local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")

if not getgenv then
	getgenv = function() return _G end
end

if not game then
	game = {
		CoreGui = {},
		GetService = function(_, name)
			return {}
		end
	}
end

getgenv().gethui = function() return game.CoreGui end

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
		Default = {
			Main = Color3.fromRGB(15, 12, 18),
			Second = Color3.fromRGB(35, 30, 45),
			Stroke = Color3.fromRGB(170, 122, 255),
			Divider = Color3.fromRGB(120, 100, 150),
			Bloom = Color3.fromRGB(255, 170, 255),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(180, 170, 190)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
	warn("OrionLib: Failed to load icons. ", Response)
end

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Global
Orion.DisplayOrder = 999
if syn then
	pcall(function() syn.protect_gui(Orion) end)
	Orion.Parent = game.CoreGui
else
	Orion.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			pcall(function() Interface:Destroy() end)
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			pcall(function() Interface:Destroy() end)
		end
	end
end

function OrionLib:IsRunning()
	if gethui then
		return Orion.Parent == gethui()
	else
		return Orion.Parent == game:GetService("CoreGui")
	end
end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SafeFunction = function(...)
		local s, e = pcall(Function, ...)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end
	local SignalConnect = Signal:Connect(SafeFunction)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	local s, e = pcall(function()
		while (OrionLib:IsRunning()) do
			task.wait()
		end

		for _, Connection in next, OrionLib.Connections do
			if Connection then pcall(function() Connection:Disconnect() end) end
		end
	end)
	if not s then
		warn("OrionLib Error: ", e)
	end
end)

local function MakeDraggable(DragPoint, Main)
	local s, e = pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				Main.Position	= UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
			end
		end)
	end)
	if not s then
		warn("OrionLib Error: ", e)
	end
end

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
		Object[i] = v
	end
	for i, v in next, Children or {} do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	for Property, Value in pairs(Props) do
		Element[Property] = Value
	end
	return Element
end

local function SetChildren(Element, Children)
	for _, Child in ipairs(Children) do
		Child.Parent = Element
	end
	return Element
end

local function Round(Number, Factor)
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 then Result = Result + Factor end
	return Result
end

local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("UIGradient") or Object:IsA("ImageLabel") or Object:IsA("ImageButton") or Object:IsA("VideoFrame") then
		return "BackgroundColor3"
	end
	if Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	end
	if Object:IsA("UIStroke") then
		return "Color"
	end
	if Object:IsA("TextLabel") or Object:IsA("TextBox") or Object:IsA("Sound") then
		return "TextColor3"
	end
end

local function AddThemeObject(Object, Type)
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local prop = ReturnProperty(Object)
	if prop and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
		Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
	end
	return Object
end

local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in pairs(Type) do
			local prop = ReturnProperty(Object)
			if prop and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
				pcall(function() Object[prop] = OrionLib.Themes[OrionLib.SelectedTheme][Name] end)
			end
		end
	end
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local s, Data = pcall(HttpService.JSONDecode, HttpService, Config)
	if not s or not Data then return end
	for a, b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function()
				local s,e = pcall(function()
					if OrionLib.Flags[a].Type == "Colorpicker" then
						OrionLib.Flags[a]:Set(UnpackColor(b))
					elseif OrionLib.Flags[a].Type == "Textbox" then
						OrionLib.Flags[a]:Set(b, true)
					else
						OrionLib.Flags[a]:Set(b)
					end
				end)
				if not s then
					warn("OrionLib Error: ", e)
				end
			end)
		else
		end
	end
end

local function SaveCfg(Name)
	if not (writefile and OrionLib.Folder and Name) then return end
	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end
	end
	pcall(writefile, OrionLib.Folder .. "/" .. Name .. ".txt", tostring(HttpService:JSONEncode(Data)))
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3,Enum.UserInputType.Touch}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})

	if GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.GothamSemibold,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Right,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 8)
	})
}), {
	Position = UDim2.new(1, -15, 1, -15),
	Size = UDim2.new(0, 300, 1, 0),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function()
		local s, e = pcall(function()
			NotificationConfig.Name = NotificationConfig.Name or "Notification"
			NotificationConfig.Content = NotificationConfig.Content or "Test"
			NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
			NotificationConfig.Time = NotificationConfig.Time or 5

			local NotificationFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 8), {
				Size = UDim2.new(1, 0, 0, 0),
				AutomaticSize = Enum.AutomaticSize.Y,
				Parent = NotificationHolder,
				BackgroundTransparency = 1
			}), {
				Create("UIScale", {Scale = 0.8}),
				AddThemeObject(MakeElement("Stroke", nil, 1.2), "Stroke"),
				AddThemeObject(Create("UIStroke", {Thickness = 3, Transparency = 1, Enabled = false, Name = "Bloom"}), "Bloom"),
				MakeElement("Padding", 10, 10, 10, 10),
				AddThemeObject(SetProps(MakeElement("Image", NotificationConfig.Image), {
					Size = UDim2.new(0, 20, 0, 20), Name = "Icon", ImageTransparency = 1
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
					Size = UDim2.new(1, -30, 0, 20), Position = UDim2.new(0, 30, 0, 0), Font = Enum.Font.GothamBold, Name = "Title", TextTransparency = 1
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
					Size = UDim2.new(1, 0, 0, 0), Position = UDim2.new(0, 0, 0, 25), Font = Enum.Font.GothamSemibold, Name = "Content", AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true, TextTransparency = 1
				}), "TextDark")
			}), "Main")

			local bloomStroke = NotificationFrame:FindFirstChild("Bloom")
			if bloomStroke then bloomStroke.Enabled = true end

			local entranceTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
			TweenService:Create(NotificationFrame.UIScale, entranceTweenInfo, {Scale = 1}):Play()
			TweenService:Create(NotificationFrame, entranceTweenInfo, {BackgroundTransparency = 0.1}):Play()
			for _, child in ipairs(NotificationFrame:GetChildren()) do
				local prop; if child:IsA("TextLabel") then prop = "TextTransparency" elseif child:IsA("ImageLabel") then prop = "ImageTransparency" elseif child:IsA("UIStroke") then prop = "Transparency" end
				if prop then TweenService:Create(child, entranceTweenInfo, {[prop] = child == bloomStroke and 0.5 or 0}):Play() end
			end

			task.wait(NotificationConfig.Time - 0.5)

			local exitTweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
			TweenService:Create(NotificationFrame.UIScale, exitTweenInfo, {Scale = 0.8}):Play()
			for _, child in ipairs(NotificationFrame:GetChildren()) do
				local prop; if child:IsA("TextLabel") then prop = "TextTransparency" elseif child:IsA("ImageLabel") then prop = "ImageTransparency" elseif child:IsA("UIStroke") or child:IsA("Frame") then prop = "Transparency" end
				if prop then TweenService:Create(child, exitTweenInfo, {[prop] = 1}):Play() end
			end
			TweenService:Create(NotificationFrame, exitTweenInfo, {BackgroundTransparency = 1}):Play()

			task.wait(exitTweenInfo.Time)
			if NotificationFrame and NotificationFrame.Parent then NotificationFrame:Destroy() end
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg then
		local s, e = pcall(function()
			if isfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				if readfile then LoadCfg(readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt")) end
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end
end

function OrionLib:MakeWindow(WindowConfig)
	local Minimized = false
	local Loaded = false
	local UIHidden = false
	local gradientsToAnimate = {}

	WindowConfig = WindowConfig or {}
	local isShiny = WindowConfig.Shiny or (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.Shiny)
	local isUnlockMouse = WindowConfig.UnlockMouse or (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.UnlockMouse)

	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	WindowConfig.SearchBar = WindowConfig.SearchBar or nil
	WindowConfig.UnlockMouse = isUnlockMouse or false
	WindowConfig.Shiny = isShiny or false
	WindowConfig.KeyToOpenWindow = WindowConfig.KeyToOpenWindow or "M"
	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	local mouseCaptureGui = nil
	local mouselock = false
	local freeMouse = nil

	local function UnlockMouse(Value)
		if not freeMouse then return end
		mouselock = Value
		if Value then
			task.spawn(function()
				while mouselock do
					UserInputService.MouseIconEnabled = true
					freeMouse.Visible = true
					task.wait()
				end
				UserInputService.MouseIconEnabled = false
				freeMouse.Visible = false
			end)
		else
			UserInputService.MouseIconEnabled = false
			if freeMouse then freeMouse.Visible = false end
		end
	end

	if WindowConfig.UnlockMouse and UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
		mouseCaptureGui = Create("ScreenGui", {
			Name = "OrionMouseCapture",
			Parent = Orion.Parent,
			ResetOnSpawn = false,
			Enabled = true,
			DisplayOrder = Orion.DisplayOrder - 1
		})
		freeMouse = Create("TextButton", {
			Name = "FMouse",
			Size = UDim2.fromScale(1, 1),
			BackgroundTransparency = 1,
			Text = "",
			Modal = true,
			Parent = mouseCaptureGui,
			Visible = false
		})
	end

	local function MakeShineOnHover(target, textLabel)
		if not WindowConfig.Shiny or not target or not textLabel then return end

		local shineGradient = textLabel:FindFirstChild("Shine")
		if not shineGradient then
			shineGradient = Create("UIGradient", {
				Name = "Shine",
				Enabled = false,
				Rotation = 0,
				Color = ColorSequence.new(Color3.fromRGB(255, 255, 255)),
				Transparency = NumberSequence.new({
					NumberSequenceKeypoint.new(0, 1),
					NumberSequenceKeypoint.new(0.4, 0.8),
					NumberSequenceKeypoint.new(0.5, 0.2),
					NumberSequenceKeypoint.new(0.6, 0.8),
					NumberSequenceKeypoint.new(1, 1)
				}),
				Parent = textLabel
			})
		end

		AddConnection(target.MouseEnter, function()
			shineGradient.Enabled = true
			if not table.find(gradientsToAnimate, shineGradient) then
				table.insert(gradientsToAnimate, shineGradient)
			end
		end)

		AddConnection(target.MouseLeave, function()
			shineGradient.Enabled = false
			for i, v in ipairs(gradientsToAnimate) do
				if v == shineGradient then
					table.remove(gradientsToAnimate, i)
					break
				end
			end
		end)
	end

	if WindowConfig.SaveConfig then
		local s, e = pcall(function()
			if (isfolder and makefolder) and not isfolder(WindowConfig.ConfigFolder) then
				makefolder(WindowConfig.ConfigFolder)
			elseif not (isfolder and isfolder(WindowConfig.ConfigFolder)) then
				if makefolder then makefolder(WindowConfig.ConfigFolder) end
			end
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4),
	WindowConfig.SearchBar and {
		Size = UDim2.new(1, 0, 1, -90),
		Position = UDim2.new(0, 0, 0, 40)
	} or {
		Size = UDim2.new(1, 0, 1, -50)
	}),
	{
		MakeElement("List"),
		MakeElement("Padding", 8, 0, 0, 8)
	}), "Divider")


	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		if TabHolder and TabHolder.UIListLayout then
			TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16)
		end
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50)
	})

	local PlayerImage = SetProps(MakeElement("Image", ""), { Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1 })
	task.spawn(function()
		local s, content, isReady = pcall(Players.GetUserThumbnailAsync, Players, LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420x420)
		if s and isReady and PlayerImage and PlayerImage.Parent then
			PlayerImage.Image = content
		end
	end)

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Size = UDim2.new(0, 150, 1, -85),
		Position = UDim2.new(0, 0, 0, 85)
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),
		TabHolder,
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50)
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),
			SetChildren(SetProps(MakeElement("Frame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0),
				ClipsDescendants = true,
				BackgroundTransparency = 1
			}), {
				PlayerImage,
				MakeElement("Corner", 1)
			}),
			SetChildren(SetProps(MakeElement("TFrame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1)
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "@" .. LocalPlayer.Name, 12), {
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Font = Enum.Font.GothamSemibold,
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		}),
	}), "Second")

	local Tabs = {};

	if WindowConfig.SearchBar then
		local SearchBox = Create("TextBox", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			PlaceholderColor3 = Color3.fromRGB(210,210,210),
			PlaceholderText = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.Default) or "🔍 Search",
			Font = Enum.Font.GothamBold,
			TextWrapped = true,
			Text = '',
			TextXAlignment = Enum.TextXAlignment.Center,
			TextSize = 14,
			ClearTextOnFocus = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.ClearTextOnFocus ~= nil and WindowConfig.SearchBar.ClearTextOnFocus) or true
		})

		local TextboxActual = AddThemeObject(SearchBox, "Text")

		local SearchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 6), {
			Parent = WindowStuff,
			Size = UDim2.new(0, 130, 0, 24),
			Position = UDim2.new(1.013, -12, 0.075, 0),
			AnchorPoint = Vector2.new(1, 0.5)
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			TextboxActual
		}), "Main")

		MakeShineOnHover(TextboxActual, TextboxActual)

		local function SearchHandle()
			local s, e = pcall(function()
				local Text = string.lower(SearchBox.Text);
				if not TabHolder or not TabHolder:IsA("GuiObject") then return end

				for i,v in pairs(Tabs) do
					if v and v:IsA('TextButton') then
						if Text == "" or string.find(string.lower(i), Text) then
							v.Visible = true
						else
							v.Visible = false
						end
					end
				end
			end)
			if not s then
				warn("OrionLib Error: ", e)
			end
		end
		AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle);
	end

	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
		Size = UDim2.new(1, -30, 2, 0),
		Position = UDim2.new(0, 25, 0, -24),
		Font = Enum.Font.GothamBlack,
		TextSize = 20
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1)
	}), "Stroke")

	local TopTabHolder = SetChildren(Create("Frame", {
		Name = "TopTabHolder",
		Size = UDim2.new(1, -10, 1, 0),
		Position = UDim2.new(0, 10, 0, 0),
		BackgroundTransparency = 1,
		ZIndex = 3
	}), {
		Create("UIListLayout", {
			FillDirection = Enum.FillDirection.Horizontal,
			VerticalAlignment = Enum.VerticalAlignment.Center,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 5)
		})
	})

	local TopBar = SetChildren(SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50),
		Name = "TopBar",
		ZIndex = 2
	}), {
		WindowName,
		WindowTopBarLine,
		AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
			Size = UDim2.new(0, 70, 0, 30),
			Position = UDim2.new(1, -90, 0, 10)
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(0, 1, 1, 0),
				Position = UDim2.new(0.5, 0, 0, 0)
			}), "Stroke"),
			CloseBtn,
			MinimizeBtn
		}), "Second"),
	})

	local TopTabBar = AddThemeObject(SetChildren(Create("Frame", {
		Name = "TopTabBar",
		Size = UDim2.new(1, 0, 0, 35),
		Position = UDim2.new(0, 0, 0, 50),
		BackgroundTransparency = 1,
		ZIndex = 2
	}), {
		TopTabHolder,
		AddThemeObject(Create("Frame", {
			Size = UDim2.new(1,0,0,1),
			Position = UDim2.new(0,0,1,-1)
		}), "Stroke")
	}), "Second")

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -190),
		Size = UDim2.new(0, 615, 0, 380),
		ClipsDescendants = true
	}), {
		Create("UIStroke", {
			ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
			Thickness = 2,
			LineJoinMode = Enum.LineJoinMode.Round
		}),
		AddThemeObject(Create("Frame", {
			BorderSizePixel = 0,
			Size = UDim2.new(1, 0, 0, 85),
			ZIndex = 0
		}, {
			Create("UICorner", {
				CornerRadius = UDim.new(0, 10)
			})
		}), "Second"),
		TopBar,
		TopTabBar,
		DragPoint,
		WindowStuff
	}), "Main")

	AddThemeObject(MainWindow.UIStroke, "Stroke")

	MakeShineOnHover(DragPoint, WindowName)

	local function HueLerp(h1, h2, t)
		local dist = (h2 - h1 + 1) % 1
		if dist > 0.5 then
			dist = dist - 1
		end
		return (h1 + dist * t + 1) % 1
	end

	AddConnection(RunService.RenderStepped, function()
		local t = tick() * 0.15
		local progress = t % 1

		local hue_purple, hue_red, hue_green = 0.75, 0.98, 0.33
		local dynamic_hue

		if progress < 0.333 then
			dynamic_hue = HueLerp(hue_purple, hue_red, progress / 0.333)
		elseif progress < 0.666 then
			dynamic_hue = HueLerp(hue_red, hue_green, (progress - 0.333) / 0.333)
		else
			dynamic_hue = HueLerp(hue_green, hue_purple, (progress - 0.666) / 0.333)
		end

		local dynamicColors = {
			Main = Color3.fromHSV(dynamic_hue, 0.9, 0.08),
			Second = Color3.fromHSV(dynamic_hue, 0.8, 0.2),
			Stroke = Color3.fromHSV(dynamic_hue, 0.9, 1),
			Divider = Color3.fromHSV(dynamic_hue, 0.8, 0.5),
			Bloom = Color3.fromHSV(dynamic_hue, 0.9, 1)
		}

		for themeName, themeColor in pairs(dynamicColors) do
			if OrionLib.ThemeObjects[themeName] then
				for _, object in ipairs(OrionLib.ThemeObjects[themeName]) do
					if object and object.Parent then
						local prop = ReturnProperty(object)
						if prop then
							pcall(function() object[prop] = themeColor end)
						end
					end
				end
			end
		end

		local shineSpeed = 1.2
		for i = #gradientsToAnimate, 1, -1 do
			local gradient = gradientsToAnimate[i]
			if gradient and gradient.Parent then
				gradient.Offset = Vector2.new(((tick() * shineSpeed) % 2) - 1, 0)
			else
				table.remove(gradientsToAnimate, i)
			end
		end
	end)


	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, -24)
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 25, 0, 15)
		})
		WindowIcon.Parent = MainWindow.TopBar
	end

	MakeDraggable(DragPoint, MainWindow)

	local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
		Parent = Orion,
		Size = UDim2.new(0, 40, 0, 40),
		Position = UDim2.new(0.5, -20, 0, 20),
		BackgroundTransparency = 0,
		BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second,
		Visible = false,
		AnchorPoint = Vector2.new(0.5, 0.5)
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://10489703350"), {
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(0.7, 0, 0.7, 0),
			BackgroundColor3 = OrionLib.Themes.Default.Text
		}), "Text"),
		MakeElement("Corner", 1)
	})

	local function MakeDraggableMobile(button)
		local s, e = pcall(function()
			local dragging
			local dragStart
			local startPos

			local function update(input)
				local delta = input.Position - dragStart
				local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
				TweenService:Create(button, TweenInfo.new(0.2), {Position = newPosition}):Play()
			end

			button.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					dragging = true
					dragStart = input.Position
					startPos = button.Position

					input.Changed:Connect(function()
						if input.UserInputState == Enum.UserInputState.End then
							dragging = false
						end
					end)
				end
			end)

			UserInputService.InputChanged:Connect(function(input)
				if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
					update(input)
				end
			end)
		end)
		if not s then
			warn("OrionLib Error: ", e)
		end
	end

	MakeDraggableMobile(MobileReopenButton)


	AddConnection(CloseBtn.MouseButton1Up, function()
		MainWindow.Visible = false
		MobileReopenButton.Visible = true
		UIHidden = true
		UnlockMouse(false)
		OrionLib:MakeNotification({
			Name = "Interface Hidden",
			Content = "Press " .. WindowConfig.KeyToOpenWindow .. " to reopen the interface.",
			Time = 5
		})
		pcall(WindowConfig.CloseCallback)
	end)

	AddConnection(UserInputService.InputBegan, function(Input)
		if Input.KeyCode == Enum.KeyCode[WindowConfig.KeyToOpenWindow] and not UserInputService:GetFocusedTextBox() then
			UIHidden = not UIHidden
			MainWindow.Visible = not UIHidden
			MobileReopenButton.Visible = UIHidden
			UnlockMouse(not UIHidden)
		end
	end)

	AddConnection(MobileReopenButton.Activated, function()
		MainWindow.Visible = true
		MobileReopenButton.Visible = false
		UIHidden = false
		UnlockMouse(true)
	end)


	AddConnection(MinimizeBtn.MouseButton1Up, function()
		Minimized = not Minimized
		if Minimized then
			MainWindow.ClipsDescendants = true
			TopTabBar.Visible = false
			WindowTopBarLine.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870"
			UnlockMouse(false)
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, WindowName.TextBounds.X + 140, 0, 50)}):Play()
			task.wait(0.1)
			WindowStuff.Visible = false
		else
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 615, 0, 380)}):Play()
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
			UnlockMouse(true)
			task.wait(.02)
			MainWindow.ClipsDescendants = false
			TopTabBar.Visible = true
			WindowStuff.Visible = true
			WindowTopBarLine.Visible = true
		end
	end)

	local function LoadSequence()
		local s, e = pcall(function()
			MainWindow.Visible = false

			local IntroHolder = Create("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
				Parent = Orion
			})

			local IntroCanvas = Create("CanvasGroup", {
				GroupTransparency = 1,
				Parent = IntroHolder
			})

			local IntroScale = Create("UIScale", {
				Scale = 0.8,
				Parent = IntroHolder
			})

			local IntroList = Create("UIListLayout", {
				FillDirection = Enum.FillDirection.Horizontal,
				VerticalAlignment = Enum.VerticalAlignment.Center,
				HorizontalAlignment = Enum.HorizontalAlignment.Center,
				SortOrder = Enum.SortOrder.LayoutOrder,
				Padding = UDim.new(0, 8),
				Parent = IntroHolder,
			})

			local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
				Size = UDim2.new(0, 32, 0, 32),
				Parent = IntroHolder
			})

			local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 24), {
				Size = UDim2.new(0,0,0,32),
				AutomaticSize = Enum.AutomaticSize.X,
				Font = Enum.Font.GothamBlack,
				TextYAlignment = Enum.TextYAlignment.Center,
				Parent = IntroHolder
			})

			local tweenInfo = TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

			TweenService:Create(IntroScale, tweenInfo, {Scale = 1}):Play()
			TweenService:Create(IntroCanvas, tweenInfo, {GroupTransparency = 0}):Play()

			task.wait(tweenInfo.Time + 1.5)

			local outTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.In)
			TweenService:Create(IntroScale, outTweenInfo, {Scale = 1.2}):Play()
			TweenService:Create(IntroCanvas, outTweenInfo, {GroupTransparency = 1}):Play()

			task.wait(outTweenInfo.Time)
			MainWindow.Visible = true
			UnlockMouse(true)
			if IntroHolder and IntroHolder.Parent then IntroHolder:Destroy() end
		end)
		if not s then
			warn("OrionLib Error: ", e)
			MainWindow.Visible = true
			UnlockMouse(true)
		end
	end

	if WindowConfig.IntroEnabled then
		LoadSequence()
	else
		MainWindow.Visible = true
		UnlockMouse(true)
	end

	local AllTopTabObjects = {}
	local AllSideTabObjects = {}
	local activeTopTabObject = nil
	local currentTopTabForCreation = nil
	local legacyTabGroup = nil

	local function SelectSideTab(tabToSelect)
		local parentTopTab = tabToSelect.ParentTopTab
		if activeTopTabObject ~= parentTopTab and parentTopTab.Button then
			SelectTopTab(parentTopTab)
		end
		for _, otherSideTab in ipairs(AllSideTabObjects) do
			if otherSideTab.ParentTopTab == parentTopTab then
				local isSelected = (otherSideTab == tabToSelect)
				otherSideTab.Container.Visible = isSelected

				if isSelected then
					otherSideTab.Button.Title.Font = Enum.Font.GothamBlack
					TweenService:Create(otherSideTab.Button.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
					TweenService:Create(otherSideTab.Button.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
				else
					otherSideTab.Button.Title.Font = Enum.Font.GothamSemibold
					TweenService:Create(otherSideTab.Button.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
					TweenService:Create(otherSideTab.Button.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
				end
			end
		end
	end

	local function SelectTopTab(tabToSelect)
		for _, otherTopTab in ipairs(AllTopTabObjects) do
			local isSelected = (otherTopTab == tabToSelect)
			if otherTopTab.Container then otherTopTab.Container.Visible = isSelected and not otherTopTab.IsMultiTab end
			if otherTopTab.Button then
				if isSelected then
					AddThemeObject(otherTopTab.Button, "Stroke")
					AddThemeObject(otherTopTab.Button.Title, "Text")
					TweenService:Create(otherTopTab.Button.Title, TweenInfo.new(0.25), {TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text}):Play()
				else
					AddThemeObject(otherTopTab.Button, "Second")
					AddThemeObject(otherTopTab.Button.Title, "TextDark")
					TweenService:Create(otherTopTab.Button.Title, TweenInfo.new(0.25), {TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark}):Play()
				end
			end
		end

		activeTopTabObject = tabToSelect
		TabHolder.Visible = tabToSelect.IsMultiTab

		for _, sideTab in ipairs(AllSideTabObjects) do
			sideTab.Button.Visible = (sideTab.ParentTopTab == tabToSelect)
			sideTab.Container.Visible = false
		end

		if tabToSelect.IsMultiTab then
			local firstSideTabInGroup = nil
			if #tabToSelect.SideTabs > 0 then
				firstSideTabInGroup = tabToSelect.SideTabs[1]
			end
			if firstSideTabInGroup then
				SelectSideTab(firstSideTabInGroup)
			end
		end
	end

	local function GetElements(ItemParent)
		local ElementFunction = {}
		function ElementFunction:AddLabel(Text)
			local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 30),
				BackgroundTransparency = 0.7,
				Parent = ItemParent
			}), {
				AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
					Size = UDim2.new(1, -12, 1, 0),
					Position = UDim2.new(0, 12, 0, 0),
					Font = Enum.Font.GothamBold,
					Name = "Content"
				}), "Text"),
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Second")

			MakeShineOnHover(LabelFrame, LabelFrame.Content)

			local LabelFunction = {}
			function LabelFunction:Set(ToChange)
				if LabelFrame and LabelFrame.Content then
					LabelFrame.Content.Text = ToChange
				end
			end
			return LabelFunction
		end
		function ElementFunction:AddParagraph(Text, Content)
			Text = Text or "Text"
			Content = Content or "Content"

			local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 30),
				AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 0.7,
				Parent = ItemParent
			}), {
				AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
					Size = UDim2.new(1, -12, 0, 14),
					Position = UDim2.new(0, 12, 0, 10),
					Font = Enum.Font.GothamBold,
					Name = "Title"
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "", 13), {
					Size = UDim2.new(1, -24, 0, 0),
					Position = UDim2.new(0, 12, 0, 26),
					Font = Enum.Font.GothamSemibold,
					Name = "Content",
					TextWrapped = true,
					AutomaticSize = Enum.AutomaticSize.Y
				}), "TextDark"),
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				Create("UIPadding", {PaddingBottom=UDim.new(0,10)})
			}), "Second")

			MakeShineOnHover(ParagraphFrame, ParagraphFrame.Title)
			MakeShineOnHover(ParagraphFrame, ParagraphFrame.Content)
			ParagraphFrame.Content.Text = Content

			local ParagraphFunction = {}
			function ParagraphFunction:Set(ToChange)
				if ParagraphFrame and ParagraphFrame.Content then
					ParagraphFrame.Content.Text = ToChange
				end
			end
			return ParagraphFunction
		end
		function ElementFunction:AddButton(ButtonConfig)
			ButtonConfig = ButtonConfig or {}
			ButtonConfig.Name = ButtonConfig.Name or "Button"
			ButtonConfig.Callback = ButtonConfig.Callback or function() end
			ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://10489703350"

			local Button = {}

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local Stroke = AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
			local NeonGlow = Create("UIStroke", {
				ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
				Color = Color3.fromRGB(255,0,150),
				Thickness = 4,
				Transparency = 1,
				Enabled = false
			})

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 33),
				Parent = ItemParent,
				ClipsDescendants = true,
			}), {
				contentLabel,
				AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
					Size = UDim2.new(0, 20, 0, 20),
					Position = UDim2.new(1, -30, 0, 7),
				}), "TextDark"),
				Stroke,
				NeonGlow,
				Click
			}), "Second")

			MakeShineOnHover(Click, contentLabel)

			AddConnection(RunService.RenderStepped, function()
				local t = tick()
				local hue = (t * 0.2) % 1
				NeonGlow.Color = Color3.fromHSV(hue, 1, 1)
			end)


			AddConnection(Click.MouseEnter, function()
				local hoverColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { BackgroundColor3 = hoverColor }):Play()
				NeonGlow.Enabled = true
				TweenService:Create(NeonGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Transparency = 0.5 }):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				local defaultColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
				TweenService:Create(ButtonFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), { BackgroundColor3 = defaultColor }):Play()
				local tween = TweenService:Create(NeonGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), { Transparency = 1 })
				tween.Completed:Connect(function() NeonGlow.Enabled = false end)
				tween:Play()
			end)

			AddConnection(Click.MouseButton1Down, function()
				local pressedColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(0,0,0), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), { BackgroundColor3 = pressedColor }):Play()
				TweenService:Create(NeonGlow, TweenInfo.new(0.1), { Transparency = 0.2 }):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				local hoverColor = ButtonFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.15)
				TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), { BackgroundColor3 = hoverColor }):Play()
				TweenService:Create(NeonGlow, TweenInfo.new(0.2), { Transparency = 0.5 }):Play()
				task.spawn(ButtonConfig.Callback)
			end)


			function Button:Set(ButtonText)
				if ButtonFrame and ButtonFrame.Content then
					ButtonFrame.Content.Text = ButtonText
				end
			end

			return Button
		end
		function ElementFunction:AddToggle(ToggleConfig)
			ToggleConfig = ToggleConfig or {}
			ToggleConfig.Name = ToggleConfig.Name or "Toggle"
			ToggleConfig.Default = ToggleConfig.Default or false
			ToggleConfig.Callback = ToggleConfig.Callback or function() end
			ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(130, 80, 220)
			ToggleConfig.Flag = ToggleConfig.Flag or nil
			ToggleConfig.Save = ToggleConfig.Save or false

			local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"}

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local TogglePill = SetChildren(SetProps(MakeElement("RoundFrame", nil, 1, 0), {
				Size = UDim2.new(0, 38, 0, 20),
				Position = UDim2.new(1, -24, 0.5, 0),
				AnchorPoint = Vector2.new(0.5, 0.5)
			}), {
				SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 0), {
					Name = "Knob",
					Size = UDim2.new(0, 16, 0, 16),
					AnchorPoint = Vector2.new(0.5, 0.5),
					Position = UDim2.new(0, 10, 0.5, 0)
				})
			})

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
				Size = UDim2.new(1, -50, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38),
				Parent = ItemParent
			}), {
				contentLabel,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(TogglePill, "Divider"),
				Click
			}), "Second")

			MakeShineOnHover(Click, contentLabel)
			local Knob = TogglePill.Knob

			function Toggle:Set(Value)
				Toggle.Value = Value
				local pillColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Divider
				local knobPosition = Toggle.Value and UDim2.new(0, 28, 0.5, 0) or UDim2.new(0, 10, 0.5, 0)

				TweenService:Create(TogglePill, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = pillColor}):Play()
				TweenService:Create(Knob, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = knobPosition}):Play()

				pcall(ToggleConfig.Callback, Toggle.Value)
			end

			Toggle:Set(Toggle.Value)

			AddConnection(Click.MouseEnter, function()
				local hoverColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.1)
				TweenService:Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				local defaultColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
				TweenService:Create(ToggleFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundColor3 = defaultColor}):Play()
			end)

			AddConnection(Click.MouseButton1Down, function()
				local pressedColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(0,0,0), 0.1)
				TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = pressedColor}):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				local hoverColor = ToggleFrame.BackgroundColor3:Lerp(Color3.new(1,1,1), 0.1)
				TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = hoverColor}):Play()
				if OrionLib.SaveCfg and ToggleConfig.Save then pcall(SaveCfg, game.GameId) end
				Toggle:Set(not Toggle.Value)
			end)

			if ToggleConfig.Flag then
				OrionLib.Flags[ToggleConfig.Flag] = Toggle
			end
			return Toggle
		end
		function ElementFunction:AddSlider(SliderConfig)
			SliderConfig = SliderConfig or {}
			SliderConfig.Name = SliderConfig.Name or "Slider"
			SliderConfig.Min = SliderConfig.Min or 0
			SliderConfig.Max = SliderConfig.Max or 100
			SliderConfig.Increment = SliderConfig.Increment or 1
			SliderConfig.Default = SliderConfig.Default or 50
			SliderConfig.Callback = SliderConfig.Callback or function() end
			SliderConfig.ValueName = SliderConfig.ValueName or ""
			SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(150, 50, 220)
			SliderConfig.Flag = SliderConfig.Flag or nil
			SliderConfig.Save = SliderConfig.Save or false

			local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"}
			local Dragging = false
			local SliderKnob
			local KnobValueText
			local FillValueTextLabel

			FillValueTextLabel = SetProps(MakeElement("Label", "", 12), {
				Name = "FillValueText",
				Size = UDim2.new(1, -10, 1, 0),
				Position = UDim2.new(0, 5, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Center,
				BackgroundTransparency = 1,
			})
			AddThemeObject(FillValueTextLabel, "Text")
			FillValueTextLabel.TextTransparency = 0

			local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
				Name = "SliderDrag",
				Size = UDim2.new(0, 0, 1, 0),
				ClipsDescendants = true,
				ZIndex = 2
			}), {
				Create("UIGradient"),
				FillValueTextLabel
			})

			local dragGradient = SliderDrag.UIGradient
			AddConnection(RunService.RenderStepped, function()
				local t = tick()
				local color1 = Color3.fromHSV((t * 0.2) % 1, 1, 1)
				local color2 = Color3.fromHSV((t * 0.2 + 0.1) % 1, 1, 1)
				dragGradient.Color = ColorSequence.new(color1, color2)
				dragGradient.Rotation = 90
			end)


			local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
				Name = "SliderBar",
				Size = UDim2.new(1, -24, 0, 26),
				Position = UDim2.new(0, 12, 0, 30),
				BackgroundTransparency = 0.9,
				ZIndex = 1
			}), {
				AddThemeObject(SetProps(MakeElement("Stroke"), {
					Transparency = 0.5
				}), "Stroke"),
				SliderDrag
			})

			SliderKnob = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), {
				Name = "SliderKnob",
				Size = UDim2.new(0, 12, 0, 22),
				BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0,0,0.5,0),
				ZIndex = SliderBar.ZIndex + 2,
				Parent = SliderBar,
			}),{
				AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
			}), "Text")

			KnobValueText = AddThemeObject(SetProps(MakeElement("Label", "", 12), {
				Name = "KnobValueText",
				Size = UDim2.new(0, 60, 0, 16),
				AnchorPoint = Vector2.new(0.5, 1),
				TextXAlignment = Enum.TextXAlignment.Center,
				TextYAlignment = Enum.TextYAlignment.Bottom,
				Font = Enum.Font.GothamBold,
				ZIndex = SliderBar.ZIndex + 3,
				BackgroundTransparency = 1,
				Parent = SliderBar
			}), "Text")
			KnobValueText.TextTransparency = 0

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
				Size = UDim2.new(1, -12, 0, 14),
				Position = UDim2.new(0, 12, 0, 10),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
				Size = UDim2.new(1, 0, 0, 65),
				Parent = ItemParent
			}), {
				contentLabel,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				SliderBar
			}), "Second")

			MakeShineOnHover(SliderFrame, contentLabel)
			MakeShineOnHover(SliderBar, KnobValueText)
			MakeShineOnHover(SliderDrag, FillValueTextLabel)

			local knobOriginalSize = SliderKnob.Size
			local knobPressedSize = UDim2.new(knobOriginalSize.X.Scale, knobOriginalSize.X.Offset + 2, knobOriginalSize.Y.Scale, knobOriginalSize.Y.Offset + 2)


			AddConnection(SliderBar.InputBegan, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					Dragging = true
					TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobPressedSize}):Play()

					local interactionPos = Input.Position
					if Input.UserInputType == Enum.UserInputType.MouseButton1 then
						interactionPos = UserInputService:GetMouseLocation()
					end
					local relativeX = interactionPos.X - SliderBar.AbsolutePosition.X
					local SizeScale = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
					Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
					if OrionLib.SaveCfg and SliderConfig.Save then pcall(SaveCfg, game.GameId) end
				end
			end)
			AddConnection(SliderBar.InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					Dragging = false
					TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobOriginalSize}):Play()
					if OrionLib.SaveCfg and SliderConfig.Save then pcall(SaveCfg, game.GameId) end
				end
			end)

			AddConnection(UserInputService.InputChanged, function(Input)
				if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
					local interactionPos = Input.Position
					if Input.UserInputType == Enum.UserInputType.MouseMovement then
						interactionPos = UserInputService:GetMouseLocation()
					end
					local SizeScale = math.clamp((interactionPos.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
					Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
				end
			end)

			function Slider:Set(Value)
				self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
				local percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
				if SliderConfig.Max == SliderConfig.Min then percentage = 0 end

				local tweenInfo = TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

				TweenService:Create(SliderDrag, tweenInfo, {Size = UDim2.fromScale(percentage, 1)}):Play()
				if SliderKnob then
					TweenService:Create(SliderKnob, tweenInfo, {Position = UDim2.new(percentage, 0, 0.5, 0)}):Play()
				end

				local displayValue = tostring(self.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")

				if KnobValueText then
					KnobValueText.Text = displayValue
					KnobValueText.Position = UDim2.new(percentage, 0, 0, -5)
				end

				if FillValueTextLabel then
					FillValueTextLabel.Text = displayValue
				end

				pcall(SliderConfig.Callback, self.Value)
			end

			Slider:Set(Slider.Value)
			if SliderConfig.Flag then
				OrionLib.Flags[SliderConfig.Flag] = Slider
			end
			return Slider
		end
		function ElementFunction:AddDropdown(DropdownConfig)
			DropdownConfig = DropdownConfig or {}
			DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
			DropdownConfig.Options = DropdownConfig.Options or {}
			DropdownConfig.Default = DropdownConfig.Default or ""
			DropdownConfig.Callback = DropdownConfig.Callback or function() end
			DropdownConfig.Flag = DropdownConfig.Flag or nil
			DropdownConfig.Save = DropdownConfig.Save or false

			local Dropdown = {Value = DropdownConfig.Default, Options = DropdownConfig.Options, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save}
			local MaxElements = 5

			if not table.find(Dropdown.Options, Dropdown.Value) then
				if #Dropdown.Options > 0 then
					Dropdown.Value = Dropdown.Options[1]
				else
					Dropdown.Value = "..."
				end
			end

			local DropdownList = MakeElement("List", 0, 4)

			local DropdownContainer = AddThemeObject(SetProps(SetChildren(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
				DropdownList,
				MakeElement("Padding", 4,4,4,4)
			}), {
				Position = UDim2.new(0, 0, 0, 38),
				Size = UDim2.new(1, 0, 1, -38),
				ClipsDescendants = true,
				BackgroundTransparency = 1,
			}), "Second")

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local selectedLabel = AddThemeObject(SetProps(MakeElement("Label", "Selected", 13), {
				Size = UDim2.new(1, -40, 1, 0),
				Font = Enum.Font.Gotham,
				Name = "Selected",
				TextXAlignment = Enum.TextXAlignment.Right
			}), "TextDark")

			local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38),
				Parent = ItemParent,
				ClipsDescendants = true
			}), {
				DropdownContainer,
				SetProps(SetChildren(MakeElement("TFrame"), {
					contentLabel,
					AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0, 0.5),
						Position = UDim2.new(1, -30, 0.5, 0),
						ImageColor3 = Color3.fromRGB(240, 240, 240),
						Name = "Ico"
					}), "TextDark"),
					selectedLabel,
					AddThemeObject(SetProps(MakeElement("Frame"), {
						Size = UDim2.new(1, 0, 0, 1),
						Position = UDim2.new(0, 0, 1, -1),
						Name = "Line",
						Visible = false
					}), "Stroke"),
					Click
				}), {
					Size = UDim2.new(1, 0, 0, 38),
					ClipsDescendants = true,
					Name = "F"
				}),
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner")
			}), "Second")

			MakeShineOnHover(Click, contentLabel)
			MakeShineOnHover(Click, selectedLabel)

			DropdownContainer.Parent = DropdownFrame


			AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
				if DropdownContainer and DropdownList then
					DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y)
				end
			end)

			local function AddOptions(Options)
				for _, Option in pairs(Options) do
					local title = AddThemeObject(SetProps(MakeElement("Label", Option, 13), {
						Name = "Title",
						Size = UDim2.new(1,-16,1,0),
						Position = UDim2.new(0,8,0,0),
						TextTransparency = 0.4
					}), "Text")

					local selectionStroke = Create("UIStroke", {
						Name = "SelectionStroke",
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
						Color = Color3.fromRGB(0, 255, 127),
						Thickness = 1.5,
						Transparency = 1,
						Enabled = false
					})

					local optionBtn = SetChildren(SetProps(MakeElement("Button"), {
						Size = UDim2.new(1, 0, 0, 28),
						BackgroundTransparency = 0,
						BackgroundColor3 = Color3.fromRGB(25, 25, 25),
						Parent = DropdownContainer
					}), {
						MakeElement("Corner", 0, 4),
						selectionStroke,
						title
					})

					MakeShineOnHover(optionBtn, title)

					AddConnection(optionBtn.MouseEnter, function()
						TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0}):Play()
					end)

					AddConnection(optionBtn.MouseLeave, function()
						if Dropdown.Value ~= Option then
							TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 0.4}):Play()
						end
					end)

					AddConnection(optionBtn.MouseButton1Click, function()
						Dropdown:Set(Option)
						if OrionLib.SaveCfg and DropdownConfig.Save then pcall(SaveCfg, game.GameId) end
					end)

					Dropdown.Buttons[Option] = optionBtn
				end
			end

			function Dropdown:Refresh(Options, Delete)
				if Delete then
					for _,v in pairs(Dropdown.Buttons) do
						if v and v.Parent then pcall(function() v:Destroy() end) end
					end
					table.clear(Dropdown.Options)
					table.clear(Dropdown.Buttons)
				end
				Dropdown.Options = Options or {}
				AddOptions(Dropdown.Options)
			end

			function Dropdown:Set(Value)
				if not table.find(Dropdown.Options, Value) then
					if #Dropdown.Options > 0 then
						Dropdown.Value = Dropdown.Options[1]
					else
						Dropdown.Value = "..."
					end
				end

				Dropdown.Value = Value
				if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Selected then
					DropdownFrame.F.Selected.Text = Dropdown.Value
				end

				for optKey, optButton in pairs(Dropdown.Buttons) do
					local isSelected = (optKey == Dropdown.Value)
					local stroke = optButton:FindFirstChild("SelectionStroke")
					local title = optButton.Title

					if stroke then
						stroke.Enabled = true
						TweenService:Create(stroke, TweenInfo.new(0.2), {Transparency = isSelected and 0 or 1}):Play()
					end
					TweenService:Create(title, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = isSelected and 0 or 0.4}):Play()
				end

				pcall(DropdownConfig.Callback, Dropdown.Value)
			end

			AddConnection(Click.MouseButton1Click, function()
				Dropdown.Toggled = not Dropdown.Toggled
				if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Line then
					DropdownFrame.F.Line.Visible = Dropdown.Toggled
				end
				if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Ico then
					TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{Rotation = Dropdown.Toggled and 180 or 0}):Play()
				end

				local targetHeight
				if Dropdown.Toggled then
					local contentHeight = DropdownList.AbsoluteContentSize.Y
					local paddingOffset = 8

					if #Dropdown.Options > MaxElements then
						targetHeight = 38 + (MaxElements * 28) + ((MaxElements - 1) * 4) + paddingOffset
					else
						targetHeight = 38 + contentHeight + paddingOffset
					end
					if #Dropdown.Options == 0 then targetHeight = 38 end
				else
					targetHeight = 38
				end
				if DropdownFrame then
					TweenService:Create(DropdownFrame,TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
				end
			end)

			Dropdown:Refresh(Dropdown.Options, false)
			Dropdown:Set(Dropdown.Value)
			if DropdownConfig.Flag then
				OrionLib.Flags[DropdownConfig.Flag] = Dropdown
			end
			return Dropdown
		end
		function ElementFunction:AddBind(BindConfig)
			BindConfig.Name = BindConfig.Name or "Bind"
			BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
			BindConfig.Hold = BindConfig.Hold or false
			BindConfig.Callback = BindConfig.Callback or function() end
			BindConfig.Flag = BindConfig.Flag or nil
			BindConfig.Save = BindConfig.Save or false

			local Bind = {Value = BindConfig.Default, Binding = false, Type = "Bind", Save = BindConfig.Save}
			local Holding = false

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local valueLabel = AddThemeObject(SetProps(MakeElement("Label", "", 14), {
				Size = UDim2.new(1, 0, 1, 0),
				Font = Enum.Font.GothamBold,
				TextXAlignment = Enum.TextXAlignment.Center,
				Name = "Value"
			}), "Text")

			local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
				Size = UDim2.new(0, 24, 0, 24),
				Position = UDim2.new(1, -12, 0.5, 0),
				AnchorPoint = Vector2.new(1, 0.5)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				valueLabel
			}), "Main")

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38),
				Parent = ItemParent
			}), {
				contentLabel,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				BindBox,
				Click
			}), "Second")

			MakeShineOnHover(Click, contentLabel)
			MakeShineOnHover(Click, valueLabel)

			AddConnection(BindBox.Value:GetPropertyChangedSignal("TextBounds"), function()
				if BindBox and BindBox.Value then
					TweenService:Create(BindBox, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)}):Play()
				end
			end)

			AddConnection(Click.InputEnded, function(Input)
				if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
					if Bind.Binding then return end
					Bind.Binding = true
					if BindBox and BindBox.Value then BindBox.Value.Text = "..." end
				end
			end)

			local CurrentInputBeganConnection
			AddConnection(UserInputService.InputBegan, function(Input)
				if UserInputService:GetFocusedTextBox() then return end

				local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name

				if keyName == Bind.Value and not Bind.Binding then
					if BindConfig.Hold then
						Holding = true
						pcall(BindConfig.Callback, Holding)
					else
						pcall(BindConfig.Callback)
					end
				elseif Bind.Binding then
					local CapturedKey
					if not CheckKey(BlacklistedKeys, Input.KeyCode) and Input.KeyCode ~= Enum.KeyCode.Unknown then
						CapturedKey = Input.KeyCode.Name
					elseif CheckKey(WhitelistedMouse, Input.UserInputType) then
						CapturedKey = Input.UserInputType.Name
					end

					if CapturedKey then
						Bind:Set(CapturedKey)
						if OrionLib.SaveCfg and BindConfig.Save then pcall(SaveCfg, game.GameId) end
					else
						Bind:Set(Bind.Value)
					end
					Bind.Binding = false
				end
			end)

			AddConnection(UserInputService.InputEnded, function(Input)
				local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name
				if keyName == Bind.Value then
					if BindConfig.Hold and Holding then
						Holding = false
						pcall(BindConfig.Callback, Holding)
					end
				end
			end)


			AddConnection(Click.MouseEnter, function()
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
			end)

			AddConnection(Click.MouseButton1Down, function()
				TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(0,0,0), 0.1)}):Play()
			end)

			function Bind:Set(Key)
				Bind.Binding = false
				Bind.Value = (type(Key) == "EnumItem" and Key.Name) or (type(Key) == "string" and Key) or "None"
				if BindBox and BindBox.Value then BindBox.Value.Text = Bind.Value end
				task.wait()
				if BindBox and BindBox.Value and BindBox.Value.TextBounds.X > 0 then
					TweenService:Create(BindBox, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, BindBox.Value.TextBounds.X + 16, 0, 24)}):Play()
				end
			end

			Bind:Set(BindConfig.Default)
			if BindConfig.Flag then
				OrionLib.Flags[BindConfig.Flag] = Bind
			end
			return Bind
		end
		function ElementFunction:AddTextbox(TextboxConfig)
			TextboxConfig = TextboxConfig or {}
			TextboxConfig.Name = TextboxConfig.Name or "Textbox"
			TextboxConfig.Default = TextboxConfig.Default or ""
			TextboxConfig.ClearTextOnFocus = TextboxConfig.ClearTextOnFocus
			TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false
			TextboxConfig.Callback = TextboxConfig.Callback or function() end
			TextboxConfig.Numeric = TextboxConfig.Numeric or false
			TextboxConfig.Flag = TextboxConfig.Flag or nil
			TextboxConfig.Save = TextboxConfig.Save or false

			local initialValue
			if TextboxConfig.Numeric then
				initialValue = tonumber(TextboxConfig.Default) or 0
			else
				initialValue = TextboxConfig.Default
			end

			local Textbox = {Value = initialValue, Save = TextboxConfig.Save, Type = "Textbox"}
			local previousText = tostring(Textbox.Value)

			local Click = SetProps(MakeElement("Button"), {
				Size = UDim2.new(1, 0, 1, 0)
			})

			local TextboxActual = AddThemeObject(Create("TextBox", {
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
				TextColor3 = Color3.fromRGB(255, 255, 255),
				PlaceholderColor3 = Color3.fromRGB(210,210,210),
				PlaceholderText = "Input",
				Font = Enum.Font.GothamSemibold,
				TextXAlignment = Enum.TextXAlignment.Center,
				TextSize = 14,
				Text = previousText,
				ClearTextOnFocus = TextboxConfig.ClearTextOnFocus or false
			}), "Text")

			local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
				Size = UDim2.new(0, 24, 0, 24),
				Position = UDim2.new(1, -12, 0.5, 0),
				AnchorPoint = Vector2.new(1, 0.5)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				TextboxActual
			}), "Main")

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0),
				Position = UDim2.new(0, 12, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Content"
			}), "Text")

			local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38),
				Parent = ItemParent
			}), {
				contentLabel,
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				TextContainer,
				Click
			}), "Second")

			MakeShineOnHover(Click, contentLabel)
			MakeShineOnHover(TextboxActual, TextboxActual)

			AddConnection(TextboxActual.FocusLost, function(enterPressed)
				local currentText = TextboxActual.Text
				local processedValue
				local isValid = false

				if TextboxConfig.Numeric then
					local num = tonumber(currentText)
					if num ~= nil then
						processedValue = num
						Textbox.Value = num
						previousText = currentText
						isValid = true
					else
						TextboxActual.Text = previousText
						processedValue = Textbox.Value
					end
				else
					processedValue = currentText
					Textbox.Value = currentText
					isValid = true
				end

				if isValid then
					pcall(TextboxConfig.Callback, Textbox.Value, enterPressed)
				end

				if TextboxConfig.TextDisappear and isValid then
					TextboxActual.Text = ""
				end

				if OrionLib.SaveCfg and Textbox.Save and isValid then
					pcall(SaveCfg, game.GameId)
				end
			end)

			AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
				if TextboxConfig.Numeric then
					if TextboxActual.Text ~= "" and not tonumber(TextboxActual.Text) then
						if not (TextboxActual.Text == "-" or string.match(TextboxActual.Text, "^%-?%d*%.?%d*$")) then
							local pos = TextboxActual.CursorPosition
							TextboxActual.Text = previousText
							TextboxActual.CursorPosition = pos - 1
						end
					else

					end
				end
				if TextContainer and TextboxActual and TextboxActual.TextBounds.X > 0 then
					TweenService:Create(TextContainer, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, TextboxActual.TextBounds.X + 16, 0, 24)}):Play()
				elseif TextContainer then
					TweenService:Create(TextContainer, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 24, 0, 24)}):Play()
				end
			end)

			task.wait()
			if TextboxActual and TextContainer and TextboxActual.TextBounds.X > 0 then
				TextContainer.Size = UDim2.new(0, TextboxActual.TextBounds.X + 16, 0, 24)
			elseif TextContainer then
				TextContainer.Size = UDim2.new(0, 24, 0, 24)
			end

			AddConnection(Click.MouseEnter, function()
				TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
			end)

			AddConnection(Click.MouseLeave, function()
				TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
			end)

			AddConnection(Click.MouseButton1Up, function()
				TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(1,1,1), 0.1)}):Play()
				TextboxActual:CaptureFocus()
			end)

			AddConnection(Click.MouseButton1Down, function()
				TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second:Lerp(Color3.new(0,0,0), 0.1)}):Play()
			end)

			function Textbox:Set(value, suppressCallback)
				local textForDisplay
				if TextboxConfig.Numeric then
					local num = tonumber(value)
					if num ~= nil then
						self.Value = num
						textForDisplay = tostring(num)
						previousText = textForDisplay
					else
						textForDisplay = previousText
					end
				else
					self.Value = value
					textForDisplay = tostring(value)
				end
				TextboxActual.Text = textForDisplay

				if not suppressCallback then
					pcall(TextboxConfig.Callback, self.Value, false)
				end

				if OrionLib.SaveCfg and self.Save then
					pcall(SaveCfg, game.GameId)
				end
			end

			if TextboxConfig.Flag then
				OrionLib.Flags[TextboxConfig.Flag] = Textbox
			end
			return Textbox
		end
		function ElementFunction:AddColorpicker(ColorpickerConfig)
			ColorpickerConfig = ColorpickerConfig or {}
			ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
			ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
			ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
			ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
			ColorpickerConfig.Save = ColorpickerConfig.Save or false

			local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}
			local ColorH, ColorS, ColorV = Color3.toHSV(ColorpickerConfig.Default)
			local draggingColor, draggingHue = false, false

			local ColorSelection = Create("ImageLabel", {
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.fromScale(ColorS, 1 - ColorV),
				ScaleType = Enum.ScaleType.Fit,
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=4805639000",
				ZIndex = 3
			})

			local HueSelection = Create("ImageLabel", {
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0.5, 0, ColorH, 0),
				ScaleType = Enum.ScaleType.Fit,
				AnchorPoint = Vector2.new(0.5, 0.5),
				BackgroundTransparency = 1,
				Image = "http://www.roblox.com/asset/?id=4805639000",
				ZIndex = 3
			})

			local ColorImageDisplay = Create("ImageLabel", {
				Name = "ColorImageDisplay",
				Size = UDim2.new(1, -25, 1, 0),
				Image = "rbxassetid://4155801252",
				BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1),
				ZIndex = 2
			}, {
				Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
				ColorSelection
			})

			local HueBarDisplay = Create("Frame", {
				Name = "HueBarDisplay",
				Size = UDim2.new(0, 20, 1, 0),
				Position = UDim2.new(1, -20, 0, 0),
				ZIndex = 2
			}, {
				Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)),ColorSequenceKeypoint.new(0.16,Color3.fromRGB(255,255,0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
				Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
				HueSelection
			})

			local ColorpickerContainer = AddThemeObject(Create("Frame", {
				Name = "ColorpickerContainer",
				Position = UDim2.new(0, 0, 0, 38),
				Size = UDim2.new(1, 0, 0, 122),
				ClipsDescendants = true,
				Visible = false,
				ZIndex = 1
			}, {
				HueBarDisplay,
				ColorImageDisplay,
				Create("UIPadding", {
					PaddingLeft = UDim.new(0, 10),
					PaddingRight = UDim.new(0, 35),
					PaddingBottom = UDim.new(0, 10),
					PaddingTop = UDim.new(0, 10)
				})
			}), "Main")

			local Click = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
			local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), {
				Size = UDim2.new(0, 24, 0, 24),
				Position = UDim2.new(1, -12, 0.5, 0),
				AnchorPoint = Vector2.new(1, 0.5)
			}), { AddThemeObject(MakeElement("Stroke"), "Stroke") }), "Main")
			ColorpickerBox.BackgroundColor3 = ColorpickerConfig.Default

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
				Size = UDim2.new(1, -12, 1, 0), Position = UDim2.new(0, 12, 0, 0), Font = Enum.Font.GothamBold, Name = "Content"
			}), "Text")

			local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
				Size = UDim2.new(1, 0, 0, 38), Parent = ItemParent, ClipsDescendants = true
			}), {
				SetProps(SetChildren(MakeElement("TFrame"), {
					contentLabel, ColorpickerBox, Click,
					AddThemeObject(SetProps(MakeElement("Frame"), { Size = UDim2.new(1, 0, 0, 1), Position = UDim2.new(0, 0, 1, 0), Name = "Line", Visible = false }), "Stroke"),
				}), { Size = UDim2.new(1, 0, 0, 38), ClipsDescendants = true, Name = "F" }),
				ColorpickerContainer, AddThemeObject(MakeElement("Stroke"), "Stroke"),
			}), "Second")

			MakeShineOnHover(Click, contentLabel)

			local function UpdateColorPicker(updatePositions)
				local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
				ColorpickerBox.BackgroundColor3 = newColor
				if updatePositions then
					ColorSelection.Position = UDim2.fromScale(ColorS, 1 - ColorV)
					HueSelection.Position = UDim2.fromScale(0.5, ColorH)
				end
				ColorImageDisplay.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
				if Colorpicker.Value ~= newColor then
					Colorpicker:Set(newColor, true)
				end
			end

			function Colorpicker:Set(Value, internalCall)
				Colorpicker.Value = Value
				if not internalCall then
					ColorH, ColorS, ColorV = Color3.toHSV(Value)
					UpdateColorPicker(true)
				end
				ColorpickerBox.BackgroundColor3 = Colorpicker.Value
				pcall(ColorpickerConfig.Callback, Colorpicker.Value)
				if OrionLib.SaveCfg and self.Save and not internalCall then pcall(SaveCfg, game.GameId) end
			end
			Colorpicker:Set(ColorpickerConfig.Default)

			local tweenInfo = TweenInfo.new(.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
			AddConnection(Click.MouseButton1Click, function()
				Colorpicker.Toggled = not Colorpicker.Toggled
				local targetSize = Colorpicker.Toggled and UDim2.new(1, 0, 0, 160) or UDim2.new(1, 0, 0, 38)
				TweenService:Create(ColorpickerFrame, tweenInfo, {Size = targetSize}):Play()
				ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				if Colorpicker.Toggled then
					ColorpickerContainer.Visible = true
				else
					draggingColor, draggingHue = false, false
					task.delay(tweenInfo.Time, function()
						if ColorpickerFrame and not Colorpicker.Toggled then ColorpickerContainer.Visible = false end
					end)
				end
			end)

			AddConnection(ColorImageDisplay.InputBegan, function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingColor = true end end)
			AddConnection(HueBarDisplay.InputBegan, function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then draggingHue = true end end)

			AddConnection(UserInputService.InputEnded, function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					if draggingColor or draggingHue then
						if OrionLib.SaveCfg and Colorpicker.Save then pcall(SaveCfg, game.GameId) end
					end
					draggingColor, draggingHue = false, false
				end
			end)

			AddConnection(UserInputService.InputChanged, function(input)
				if input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch then return end
				if not (draggingColor or draggingHue) then return end
				if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
					draggingColor, draggingHue = false, false
					return
				end

				if draggingColor then
					local frame = ColorImageDisplay
					local x = math.clamp((input.Position.X - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
					local y = math.clamp((input.Position.Y - frame.AbsolutePosition.Y) / frame.AbsoluteSize.Y, 0, 1)
					ColorS, ColorV = x, 1 - y
					UpdateColorPicker(true)
				elseif draggingHue then
					local frame = HueBarDisplay
					local y = math.clamp((input.Position.Y - frame.AbsolutePosition.Y) / frame.AbsoluteSize.Y, 0, 1)
					ColorH = y
					UpdateColorPicker(true)
				end
			end)

			if ColorpickerConfig.Flag then OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker end
			return Colorpicker
		end
		function ElementFunction:executerthing(ExecuterConfig)
			ExecuterConfig = ExecuterConfig or {}
			ExecuterConfig.Name = ExecuterConfig.Name or "Executer"
			ExecuterConfig.Default = ExecuterConfig.Default or "-- Welcome to the Orion Executor!\nprint('Hello World!')"
			
			local isTyping = false
			local ignoreNextTextChange = false
			local hasSyntaxError = false
		
			local ExecuterFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
				Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = ItemParent
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 8) }),
				MakeElement("Padding", 8, 8, 8, 8)
			}), "Second")
		
			local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", ExecuterConfig.Name, 15), {
				Size = UDim2.new(1, 0, 0, 16), Font = Enum.Font.GothamBold, Name = "Content", Parent = ExecuterFrame
			}), "Text")
		
			local TextboxHolder = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(1, 0, 0, 250), Parent = ExecuterFrame, ClipsDescendants = true
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Main")
		
			local TextboxScroll = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 4), {
				Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Parent = TextboxHolder, Active = true, ScrollingDirection = Enum.ScrollingDirection.XY
			}), {}), "Divider")
		
			local TextboxContainer = Create("Frame", {
				Size = UDim2.new(1, 0, 1, 0), AutomaticSize = Enum.AutomaticSize.XY, BackgroundTransparency = 1, Parent = TextboxScroll,
			})
		
			local LineNumbers = AddThemeObject(Create("TextLabel", {
				Size = UDim2.new(0, 35, 1, 0), Text = "1", Font = Enum.Font.Code, TextSize = 16,
				TextColor3 = Color3.fromRGB(120, 120, 120), TextXAlignment = Enum.TextXAlignment.Right,
				TextYAlignment = Enum.TextYAlignment.Top, BackgroundTransparency = 1, Parent = TextboxContainer
			}), "TextDark")
		
			local ActualTextbox = Create("TextBox", {
				Size = UDim2.new(1, -40, 1, 0), Position = UDim2.new(0, 40, 0, 0), Text = ExecuterConfig.Default,
				MultiLine = true, RichText = true, TextWrapped = false, TextXAlignment = Enum.TextXAlignment.Left,
				TextYAlignment = Enum.TextYAlignment.Top, Font = Enum.Font.Code, TextSize = 16,
				TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text, PlaceholderText = "your script here...",
				BackgroundTransparency = 1, Parent = TextboxContainer, ClearTextOnFocus = false, Active = true,
				AutomaticSize = Enum.AutomaticSize.XY
			})
		
			local OutputFrame = Create("Frame", {
				Name = "OutputFrame", Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y,
				BackgroundTransparency = 1, Parent = ExecuterFrame, Visible = false, ClipsDescendants = true
			})
			local OutputLabel = SetProps(MakeElement("Label", "", 14), {
				Size = UDim2.new(1, 0, 0, 0), Font = Enum.Font.Code, Name = "OutputLabel",
				AutomaticSize = Enum.AutomaticSize.Y, TextWrapped = true, TextXAlignment = Enum.TextXAlignment.Left,
				TextColor3 = Color3.fromRGB(255, 100, 100), Parent = OutputFrame
			})
			local OutputStroke = Create("UIStroke", {
				Color = Color3.fromRGB(255, 180, 180), Thickness = 1.5, Transparency = 0.4, Parent = OutputLabel
			})
		
			local function setOutput(text, isError)
				if text and text ~= "" then
					OutputLabel.Text = text
					if isError then
						OutputLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
						OutputStroke.Color = Color3.fromRGB(255, 180, 180)
					else
						OutputLabel.TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text
						OutputStroke.Color = OrionLib.Themes[OrionLib.SelectedTheme].TextDark
					end
					OutputFrame.Visible = true
				else
					OutputLabel.Text = ""
					OutputFrame.Visible = false
				end
			end
		
			ExecuterConfig.Callback = ExecuterConfig.Callback or function(content)
				local func, compileErr = loadstring(content, "OrionScript")
				if not func then
					setOutput("[Compile Error]: " .. tostring(compileErr), true)
					return
				end
		
				setOutput("")
		
				local env = getfenv(func)
				env.print = function(...)
					local args = {...}
					local newText = {}
					for i = 1, #args do table.insert(newText, tostring(args[i])) end
					setOutput((OutputLabel.Text ~= "" and OutputLabel.Text .. "\n" or "") .. table.concat(newText, "\t"), false)
				end
				env.warn = function(...)
					local args = {...}
					local newText = {}
					for i = 1, #args do table.insert(newText, tostring(args[i])) end
					setOutput((OutputLabel.Text ~= "" and OutputLabel.Text .. "\n" or "") .. "[Warning]: " .. table.concat(newText, "\t"), true)
				end
		
				local success, runErr = pcall(func)
				if not success then
					local trace = debug.traceback(tostring(runErr), 2)
					setOutput((OutputLabel.Text ~= "" and OutputLabel.Text .. "\n" or "") .. trace, true)
				end
			end
		
			local snippets = {
				["print"] = 'print("%1")', ["warn"] = 'warn("%1")', ["wait"] = 'task.wait(%1)', ["function"] = 'function %1()\n\t\nend',
				["local"] = 'local %1 = ', ["if"] = 'if %1 then\n\t\nend', ["elseif"] = 'elseif %1 then', ["for"] = 'for i = 1, %1 do\n\t\nend',
				["pairs"] = 'for _, v in pairs(%1) do\n\t\nend', ["ipairs"] = 'for i, v in ipairs(%1) do\n\t\nend', ["pcall"] = 'pcall(function()\n\t%1\nend)',
				["game"] = 'game', ["Players"] = 'game:GetService("Players")', ["ReplicatedStorage"] = 'game:GetService("ReplicatedStorage")',
				["ServerScriptService"] = 'game:GetService("ServerScriptService")', ["Workspace"] = 'game:GetService("Workspace")', ["Lighting"] = 'game:GetService("Lighting")',
				["StarterGui"] = 'game:GetService("StarterGui")', ["UserInputService"] = 'game:GetService("UserInputService")', ["TweenService"] = 'game:GetService("TweenService")',
				["RunService"] = 'game:GetService("RunService")', ["GetService"] = ':GetService("%1")', ["WaitForChild"] = ':WaitForChild("%1")',
				["MouseButton1Click"] = ':MouseButton1Click:Connect(function()\n\t%1\nend)', ["Connect"] = ':Connect(function(%1)\n\t\nend)',
				["Instance"] = 'Instance.new("%1")', ["Vector3"] = 'Vector3.new(%1)', ["CFrame"] = 'CFrame.new(%1)',
				["and"] = ' and ', ["or"] = ' or ', ["not"] = 'not ', ["return"] = 'return ', ["LocalPlayer"] = "game:GetService('Players').LocalPlayer",
				["Character"] = "LocalPlayer.Character", ["Humanoid"] = "Character:WaitForChild('Humanoid')"
			}
		
			local AutocompleteFrame = AddThemeObject(SetChildren(MakeElement("ScrollFrame", nil, 3), {
				Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder }),
				Create("UIPadding", { PaddingLeft = UDim.new(0, 2), PaddingRight = UDim.new(0, 2), PaddingTop = UDim.new(0, 2), PaddingBottom = UDim.new(0, 2) }),
				AddThemeObject(MakeElement("Stroke"), "Stroke")
			}), "Main")
		
			SetProps(AutocompleteFrame, {
				Size = UDim2.new(0, 160, 0, 120), Position = UDim2.new(0, 0, 0, 0), Visible = false, ZIndex = 1000, Parent = Orion
			})
		
			local autocompleteSuggestions = {}
			local selectedSuggestionIndex = 0
		
			local function clearSuggestions()
				AutocompleteFrame.Visible = false
				for _, v in pairs(AutocompleteFrame:GetChildren()) do
					if v:IsA("TextButton") then v:Destroy() end
				end
				table.clear(autocompleteSuggestions)
				selectedSuggestionIndex = 0
			end
		
			local function updateSuggestionHighlight()
				for i, button in ipairs(autocompleteSuggestions) do
					local isSelected = (i == selectedSuggestionIndex)
					button.BackgroundColor3 = isSelected and OrionLib.Themes[OrionLib.SelectedTheme].Stroke or OrionLib.Themes[OrionLib.SelectedTheme].Main
					button.TextColor3 = isSelected and OrionLib.Themes[OrionLib.SelectedTheme].Text or OrionLib.Themes[OrionLib.SelectedTheme].TextDark
				end
			end
		
			local function insertSnippet(snippetKey)
				clearSuggestions()
				isTyping = true
				local text = ActualTextbox.Text
				local cursorPos = ActualTextbox.CursorPosition
				local textBeforeCursor = string.sub(text, 1, cursorPos)
				local word = string.match(textBeforeCursor, "([%w_.:]+)$")
				if not word then isTyping = false; return end
		
				local snippet = snippets[snippetKey]
				local snippetStart = cursorPos - string.len(word)
				local textAfterCursor = string.sub(text, cursorPos + 1)
				local placeholderPos = string.find(snippet, "%%1")
		
				ignoreNextTextChange = true
				if placeholderPos then
					local finalSnippet = string.gsub(snippet, "%%1", "", 1)
					ActualTextbox.Text = string.sub(text, 1, snippetStart) .. finalSnippet .. textAfterCursor
					task.delay(0, function() ActualTextbox.CursorPosition = snippetStart + placeholderPos end)
				else
					ActualTextbox.Text = string.sub(text, 1, snippetStart) .. snippet .. textAfterCursor
					task.delay(0, function() ActualTextbox.CursorPosition = snippetStart + string.len(snippet) + 1 end)
				end
				ActualTextbox:CaptureFocus()
				isTyping = false
			end
		
			local function updateAutocomplete()
				pcall(function()
					clearSuggestions()
					local text = ActualTextbox.Text
					local cursorPos = ActualTextbox.CursorPosition
					if cursorPos == 0 then return end
			
					local textBeforeCursor = string.sub(text, 1, cursorPos)
					local word = string.match(textBeforeCursor, "([%w_.:]+)$")
			
					if not word or #word < 1 then return end
			
					local matches = {}
					for key, _ in pairs(snippets) do
						if key:sub(1, #word):lower() == word:lower() then
							table.insert(matches, key)
						end
					end
			
					if #matches == 0 then return end
					table.sort(matches)
			
					for _, key in ipairs(matches) do
						local suggestionButton = Create("TextButton", {
							Size = UDim2.new(1, 0, 0, 22), Text = key, Font = Enum.Font.Code, TextSize = 14,
							TextXAlignment = Enum.TextXAlignment.Left, Parent = AutocompleteFrame,
							BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
							TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark,
							AutoButtonColor = false
						})
			
						Create("UIPadding", { PaddingLeft = UDim.new(0, 5), Parent = suggestionButton })
						suggestionButton.MouseButton1Click:Connect(function() insertSnippet(key) end)
						table.insert(autocompleteSuggestions, suggestionButton)
					end
			
					local lineStart = 1
					for pos in string.gmatch(text:sub(1, cursorPos), "\n") do
						lineStart = pos + 1
					end
			
					local lineCount = 1
					for _ in string.gmatch(text:sub(1, cursorPos), "\n") do
						lineCount = lineCount + 1
					end
			
					local textOnLine = text:sub(lineStart, cursorPos - 1)
					local textBounds = TweenService:GetTextBounds(textOnLine, ActualTextbox.Font, ActualTextbox.TextSize, Vector2.new(1000, 1000))
			
					local lineHeight = ActualTextbox.TextSize + 4 
					local xPos = ActualTextbox.AbsolutePosition.X + 40 + textBounds.X - TextboxScroll.CanvasPosition.X
					local yPos = ActualTextbox.AbsolutePosition.Y + (lineCount - 1) * lineHeight - TextboxScroll.CanvasPosition.Y + lineHeight
			
					AutocompleteFrame.Position = UDim2.fromOffset(xPos, yPos)
					AutocompleteFrame.Visible = true
					selectedSuggestionIndex = 1
					updateSuggestionHighlight()
				end)
			end
		
			local function updateLineNumbers()
				local lineCount = 1
				for _ in string.gmatch(ActualTextbox.Text, "\n") do
					lineCount = lineCount + 1
				end
				local lineText = ""
				for i = 1, lineCount do
					lineText = lineText .. i .. "\n"
				end
				LineNumbers.Text = lineText
			end
		
			local autoPairing = { ["("] = ")", ["{"] = "}", ["["] = "]", ['"'] = '"', ["'"] = "'" }
		
			AddConnection(ActualTextbox:GetPropertyChangedSignal("Text"), function()
				if ignoreNextTextChange then
					ignoreNextTextChange = false
					return
				end
				if isTyping then return end
				isTyping = true
		
				updateLineNumbers()
		
				local _, err = loadstring(ActualTextbox.Text, "OrionScript")
				if err then
					local lineNum, reason = err:match(".*:(%d+): (.*)")
					if lineNum and reason then
						local lines = ActualTextbox.Text:split("\n")
						local lineContent = lines[tonumber(lineNum)] or ""
						setOutput(string.format("[Syntax Error on Line %s]: %s\n> %s", lineNum, reason, lineContent:gsub("^%s+", ""):gsub("%s+$", "")), true)
					else
						setOutput(tostring(err), true)
					end
					hasSyntaxError = true
				else
					setOutput("")
					hasSyntaxError = false
				end
		
				local originalCursor = ActualTextbox.CursorPosition
				local text = ActualTextbox.Text
				local char = string.sub(text, originalCursor - 1, originalCursor - 1)
				local charAfter = string.sub(text, originalCursor, originalCursor)
		
				if autoPairing[char] then
					if charAfter ~= autoPairing[char] and charAfter ~= '"' and charAfter ~= "'" then
						ignoreNextTextChange = true
						ActualTextbox.Text = string.sub(text, 1, originalCursor - 1) .. autoPairing[char] .. string.sub(text, originalCursor)
						ActualTextbox.CursorPosition = originalCursor
					end
				end
		
				task.spawn(updateAutocomplete)
				isTyping = false
			end)
		
			AddConnection(ActualTextbox.InputBegan, function(input)
				if AutocompleteFrame.Visible and #autocompleteSuggestions > 0 then
					if input.KeyCode == Enum.KeyCode.Down then
						selectedSuggestionIndex = (selectedSuggestionIndex % #autocompleteSuggestions) + 1
						updateSuggestionHighlight()
						input.KeyCode = Enum.KeyCode.Unknown
					elseif input.KeyCode == Enum.KeyCode.Up then
						selectedSuggestionIndex = selectedSuggestionIndex - 1
						if selectedSuggestionIndex < 1 then selectedSuggestionIndex = #autocompleteSuggestions end
						updateSuggestionHighlight()
						input.KeyCode = Enum.KeyCode.Unknown
					elseif input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.Tab then
						pcall(function() input.KeyCode = Enum.KeyCode.Unknown end)
						if selectedSuggestionIndex > 0 and autocompleteSuggestions[selectedSuggestionIndex] then
							insertSnippet(autocompleteSuggestions[selectedSuggestionIndex].Text)
						end
					elseif input.KeyCode == Enum.KeyCode.Escape then
						clearSuggestions()
					end
				end
			end)
		
			AddConnection(ActualTextbox.FocusLost, function()
				task.delay(0.1, function()
					if not UserInputService:GetFocusedTextBox() or UserInputService:GetFocusedTextBox() ~= ActualTextbox then
						clearSuggestions()
					end
				end)
			end)
		
			updateLineNumbers()
		
			local ButtonContainer = SetChildren(Create("Frame", {
				Size = UDim2.new(1, 0, 0, 32), BackgroundTransparency = 1, Parent = ExecuterFrame
			}), {
				Create("UIListLayout", {
					FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right,
					SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6)
				})
			})
		
			local function createExecButton(btnText, btnCallback, isExecute)
				local buttonFrame = AddThemeObject(Create("TextButton", {
					Size = UDim2.new(0, 100, 1, 0), Text = "", Parent = ButtonContainer, AutoButtonColor = false,
				}), "Second")
		
				local contentLabel = AddThemeObject(SetProps(MakeElement("Label", btnText, 14), {
					Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, BackgroundTransparency = 1, Parent = buttonFrame,
					RichText = true
				}), "Text")
		
				if isExecute then
					contentLabel.Text = "<font color='#70FF70'><b>"..btnText.."</b></font>"
				end
		
				SetChildren(buttonFrame, {
					contentLabel,
					AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"),
					MakeElement("Corner", 0, 4)
				})
		
				MakeShineOnHover(buttonFrame, contentLabel)
		
				local baseColor = OrionLib.Themes[OrionLib.SelectedTheme].Second
				AddConnection(buttonFrame.MouseEnter, function() TweenService:Create(buttonFrame, TweenInfo.new(0.2), { BackgroundColor3 = baseColor:Lerp(Color3.new(1,1,1), 0.2) }):Play() end)
				AddConnection(buttonFrame.MouseLeave, function() TweenService:Create(buttonFrame, TweenInfo.new(0.2), { BackgroundColor3 = baseColor }):Play() end)
				AddConnection(buttonFrame.MouseButton1Down, function() TweenService:Create(buttonFrame, TweenInfo.new(0.1), { BackgroundColor3 = baseColor:Lerp(Color3.new(0,0,0), 0.2) }):Play() end)
				AddConnection(buttonFrame.MouseButton1Up, function()
					if isExecute and hasSyntaxError then
						local originalColor = buttonFrame.BackgroundColor3
						buttonFrame.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
						task.wait(0.3)
						buttonFrame.BackgroundColor3 = originalColor
						return
					end
					TweenService:Create(buttonFrame, TweenInfo.new(0.1), { BackgroundColor3 = baseColor:Lerp(Color3.new(1,1,1), 0.2) }):Play()
					task.spawn(btnCallback)
				end)
			end
		
			createExecButton("Clear", function() ActualTextbox.Text = "" end)
			createExecButton("Execute", function() ExecuterConfig.Callback(ActualTextbox.Text) end, true)
		
			local ExecuterObject = {}
			function ExecuterObject:SetScript(newScript) ActualTextbox.Text = newScript end
			function ExecuterObject:GetScript() return ActualTextbox.Text end
			return ExecuterObject
		end
		function ElementFunction:AddMediaPlayer(MediaPlayerConfig)
			MediaPlayerConfig = MediaPlayerConfig or {}
			MediaPlayerConfig.Name = MediaPlayerConfig.Name or "Media Player"
			MediaPlayerConfig.Default = MediaPlayerConfig.Default or ""
			MediaPlayerConfig.Callback = MediaPlayerConfig.Callback or function() end

			local currentMediaInstance = nil
			local mediaFolder = "media_cache"
			local isPaused = false
			local currentVolume = 0.5
			local volumeSlider

			local function detectMediaType(url)
				if url:lower():match("%.mp3$") then return "MP3" end
				if url:lower():match("%.mp4$") then return "MP4" end
				return nil
			end

			local function extractFileName(url)
				return url:match(".+/([^/?#]+)") or url:match(".+/([^/]+)$") or ("mediafile_" .. string.sub(tostring(tick()), -5))
			end

			local MediaPlayerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), {
				Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, Parent = ItemParent
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"), Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6) }),
				Create("UIPadding", { PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6), PaddingTop = UDim.new(0, 6), PaddingBottom = UDim.new(0, 6) })
			}), "Second")

			local TopFrame = Create("Frame", { Size = UDim2.new(1, 0, 0, 0), AutomaticSize = Enum.AutomaticSize.Y, BackgroundTransparency = 1, Parent = MediaPlayerFrame, LayoutOrder = 1 },
			{ Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 6) }) })

			local contentLabel = AddThemeObject(SetProps(MakeElement("Label", MediaPlayerConfig.Name, 15), {
				Size = UDim2.new(1, 0, 0, 14), Font = Enum.Font.GothamBold, Name = "Content"
			}), "Text")
			contentLabel.Parent = TopFrame

			local TextboxActual = AddThemeObject(Create("TextBox", {
				Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255), PlaceholderColor3 = Color3.fromRGB(210,210,210),
				PlaceholderText = "Enter Media URL...", Font = Enum.Font.GothamSemibold, TextXAlignment = Enum.TextXAlignment.Left, TextSize = 14, Text = MediaPlayerConfig.Default, ClearTextOnFocus = false
			}), "Text")

			local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(1, 0, 0, 28)
			}), { AddThemeObject(MakeElement("Stroke"), "Stroke"), Create("UIPadding", {PaddingLeft = UDim.new(0,8)}), TextboxActual }), "Main")
			TextContainer.Parent = TopFrame
			
			volumeSlider = ElementFunction:AddSlider({
				Name = "Volume", Min = 0, Max = 1, Default = currentVolume, Increment = 0.01, ValueName = "%",
				Callback = function(value)
					currentVolume = value
					if currentMediaInstance then pcall(function() currentMediaInstance.Volume = value end) end
				end
			})
			volumeSlider.Parent = TopFrame

			local ButtonRow = Create("Frame", { Size = UDim2.new(1, 0, 0, 28), BackgroundTransparency = 1, Parent = TopFrame },
			{ Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,6)}) })

			local LoadClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
			local LoadButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Load", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
			local LoadButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow
			}), { LoadButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), LoadClick }), "Second")

			local PauseClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
			local PauseButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Pause", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
			local PauseButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow, Visible = false
			}), { PauseButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), PauseClick }), "Second")

			local ExitClick = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
			local ExitButtonContent = AddThemeObject(SetProps(MakeElement("Label", "Exit", 14), { Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamBold, TextXAlignment = Enum.TextXAlignment.Center }), "Text")
			local ExitButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
				Size = UDim2.new(0, 60, 0, 28), Parent = ButtonRow, Visible = false
			}), { ExitButtonContent, AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke"), ExitClick }), "Second")

			local VideoContainer = Create("Frame", {
				Size = UDim2.new(1, 0, 0, 0), BackgroundTransparency = 1, ClipsDescendants = true, Parent = MediaPlayerFrame, Visible = false, LayoutOrder = 2
			})

			local function stopAndClear()
				if currentMediaInstance then
					pcall(function() currentMediaInstance:Destroy() end)
					currentMediaInstance = nil
				end
				if VideoContainer.Visible then
					TweenService:Create(VideoContainer, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 0)}):Play()
					task.delay(0.2, function() if VideoContainer and not currentMediaInstance then VideoContainer.Visible = false end end)
				end
				isPaused = false
				LoadButtonFrame.Visible = true
				PauseButtonFrame.Visible = false
				ExitButtonFrame.Visible = false
			end

			local function loadMedia(url)
				stopAndClear()
				task.wait(0.21)

				if not url or url == "" then OrionLib:MakeNotification({Name = "Media Player", Content = "URL is empty."}); return end
				local mediaType = detectMediaType(url)
				if not mediaType then OrionLib:MakeNotification({Name = "Media Player", Content = "Invalid URL. Use a direct .mp3 or .mp4 link."}); return end

				OrionLib:MakeNotification({Name = "Media Player", Content = "Loading " .. mediaType .. "..."})

				local function playAsset(assetId)
					pcall(function()
						if mediaType == "MP4" then
							VideoContainer.Visible = true
							local aspectRatio = 16/9
							local videoHeight = VideoContainer.AbsoluteSize.X / aspectRatio
							if videoHeight <= 0 then videoHeight = 250 end
							TweenService:Create(VideoContainer, TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, videoHeight)}):Play()

							local videoPlayer = Create("VideoFrame", {
								Name = "Orion_EmbeddedVideoPlayer", Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(0, 0, 0), Parent = VideoContainer,
								Draggable = false, Active = false, Video = assetId, Looped = true, Volume = currentVolume
							}, { Create("UICorner", {CornerRadius = UDim.new(0, 8)}) })
							currentMediaInstance = videoPlayer
							videoPlayer:Play()
						elseif mediaType == "MP3" then
							local soundPlayer = Create("Sound", { Name = "Orion_MediaPlayer_Audio", Parent = Orion, SoundId = assetId, Looped = true, Volume = currentVolume })
							currentMediaInstance = soundPlayer
							soundPlayer:Play()
						end

						isPaused = false
						LoadButtonFrame.Visible = false
						PauseButtonFrame.Visible = true
						PauseButtonContent.Text = "Pause"
						ExitButtonFrame.Visible = true

						MediaPlayerConfig.Callback(true, mediaType)
					end)
				end

				if not (isfolder and makefolder and writefile and getcustomasset and isfile and delfile and readfile and request) then
					OrionLib:MakeNotification({Name = "Media Player", Content = "File functions not found. Playing without cache."})
					task.spawn(playAsset, url)
					return
				end

				task.spawn(function()
					if not isfolder(mediaFolder) then makefolder(mediaFolder) end
					local fileName = extractFileName(url)
					local filePath = mediaFolder .. "/" .. fileName

					if isfile(filePath) then
						local success, assetId = pcall(getcustomasset, filePath)
						if success and assetId then playAsset(assetId)
						else
							pcall(delfile, filePath)
							local s, r = pcall(request, {Url = url, Method = "GET"})
							if s and r.Success and r.Body then
								pcall(writefile, filePath, r.Body)
								local _, newId = pcall(getcustomasset, filePath)
								if newId then playAsset(newId) else OrionLib:MakeNotification({Name = "Media Player", Content = "Failed to create asset."}) end
							else OrionLib:MakeNotification({Name = "Media Player", Content = "Download failed."}) end
						end
					else
						local s, r = pcall(request, {Url = url, Method = "GET"})
						if s and r.Success and r.Body then
							pcall(writefile, filePath, r.Body)
							local _, newId = pcall(getcustomasset, filePath)
							if newId then playAsset(newId) else OrionLib:MakeNotification({Name = "Media Player", Content = "Failed to create asset."}) end
						else OrionLib:MakeNotification({Name = "Media Player", Content = "Download failed."}) end
					end
				end)
			end

			AddConnection(LoadClick.MouseButton1Click, function() loadMedia(TextboxActual.Text) end)
			AddConnection(PauseClick.MouseButton1Click, function()
				if not currentMediaInstance or not currentMediaInstance.Parent then return end
				isPaused = not isPaused
				if isPaused then
					pcall(function() if currentMediaInstance.ClassName == "VideoFrame" then currentMediaInstance:Pause() else currentMediaInstance.Paused = true end end)
					PauseButtonContent.Text = "Play"
				else
					pcall(function() if currentMediaInstance.ClassName == "VideoFrame" then currentMediaInstance:Play() else currentMediaInstance.Paused = false end end)
					PauseButtonContent.Text = "Pause"
				end
			end)
			AddConnection(ExitClick.MouseButton1Click, function() stopAndClear() end)

			local MediaPlayerObject = {}
			function MediaPlayerObject:Stop() stopAndClear() end
			function MediaPlayerObject:SetURL(url) TextboxActual.Text = url end
			function MediaPlayerObject:Load() loadMedia(TextboxActual.Text) end

			return MediaPlayerObject
		end
		return ElementFunction
	end

	local TabFunction = {}

	function TabFunction:newmaketabtop(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Top Tab"
		local isMultiTab = TabConfig.MultiTab or false

		local TopButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(0, 0, 1, -4),
			AutomaticSize = Enum.AutomaticSize.X,
			Parent = TopTabHolder,
			BackgroundTransparency = 1,
		}), {
			AddThemeObject(MakeElement("Stroke"),"Stroke"), MakeElement("Corner", 0, 5),
			Create("UIPadding", {PaddingLeft = UDim.new(0, 8), PaddingRight = UDim.new(0, 8)}),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, 0, 1, 0), Font = Enum.Font.GothamSemibold, Name = "Title"
			}), "TextDark")
		}), "Second")

		MakeShineOnHover(TopButton, TopButton.Title)

		local topTabInfo = {
			Button = TopButton,
			Name = TabConfig.Name,
			SideTabs = {},
			IsMultiTab = isMultiTab,
			Container = nil
		}

		if not isMultiTab then
			topTabInfo.Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
				Size = UDim2.new(1, -150, 1, -85), Position = UDim2.new(0, 150, 0, 85), Parent = MainWindow, Visible = false, Name = "ItemContainer_Direct"
			}), {
				MakeElement("List", 0, 6), MakeElement("Padding", 15, 10, 10, 15)
			}), "Divider")

			AddConnection(topTabInfo.Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
				if topTabInfo.Container and topTabInfo.Container.UIListLayout then
					topTabInfo.Container.CanvasSize = UDim2.new(0, 0, 0, topTabInfo.Container.UIListLayout.AbsoluteContentSize.Y + 30)
				end
			end)
		end

		table.insert(AllTopTabObjects, topTabInfo)
		currentTopTabForCreation = topTabInfo

		AddConnection(TopButton.MouseButton1Click, function() SelectTopTab(topTabInfo) end)

		if not activeTopTabObject then
			if legacyTabGroup then table.insert(AllTopTabObjects, 1, legacyTabGroup) end
			SelectTopTab(AllTopTabObjects[1])
		end


		if not isMultiTab then
			return GetElements(topTabInfo.Container)
		else
			return nil
		end
	end

	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

		local parentTopTab = currentTopTabForCreation
		if not parentTopTab then
			if not legacyTabGroup then
				local mainTabInfo = TabFunction:newmaketabtop({ Name = "Main", MultiTab = true })
				legacyTabGroup = currentTopTabForCreation
			end
			parentTopTab = legacyTabGroup
		elseif not parentTopTab.IsMultiTab then
			warn("OrionLib: MakeTab() cannot be used right after a newmaketabtop({MultiTab=false}). A side tab can only be added to a MultiTab group.")
			return {}
		end

		local TabButton = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5), Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 10, 0.5, 0), ImageTransparency = 0.4, Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0), Position = UDim2.new(0, 35, 0, 0), Font = Enum.Font.GothamSemibold, TextTransparency = 0.4, Name = "Title"
			}), "Text")
		})
		if GetIcon(TabConfig.Icon) ~= nil then TabButton.Ico.Image = GetIcon(TabConfig.Icon) end

		MakeShineOnHover(TabButton, TabButton.Title)
		if WindowConfig.SearchBar then Tabs[TabConfig.Name] = TabButton end

		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
			Size = UDim2.new(1, -150, 1, -85), Position = UDim2.new(0, 150, 0, 85), Parent = MainWindow, Visible = false, Name = "ItemContainer_Side"
		}), {
			MakeElement("List", 0, 6), MakeElement("Padding", 15, 10, 10, 15)
		}), "Divider")

		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			if Container and Container.UIListLayout then
				Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30)
			end
		end)

		local sideTabInfo = {
			Button = TabButton,
			Container = Container,
			ParentTopTab = parentTopTab
		}
		table.insert(parentTopTab.SideTabs, sideTabInfo)
		table.insert(AllSideTabObjects, sideTabInfo)

		if activeTopTabObject == parentTopTab then
			TabButton.Visible = true
			if #parentTopTab.SideTabs == 1 then
				SelectSideTab(sideTabInfo)
			else
				Container.Visible = false
			end
		else
			TabButton.Visible = false
			Container.Visible = false
		end


		AddConnection(TabButton.MouseButton1Click, function() SelectSideTab(sideTabInfo) end)

		local Elements = GetElements(Container)
		if TabConfig.PremiumOnly then
			for i,v in next, Elements do Elements[i] = function() end end
			if Container:FindFirstChild("UIListLayout") then pcall(function() Container:FindFirstChild("UIListLayout"):Destroy() end) end
			if Container:FindFirstChild("UIPadding") then pcall(function() Container:FindFirstChild("UIPadding"):Destroy() end) end
			SetChildren(SetProps(MakeElement("TFrame"), {Size = UDim2.new(1, 0, 1, 0), Parent = Container }), {
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), { Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 15, 0, 15), ImageTransparency = 0.4 }), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Unauthorised Access", 14), { Size = UDim2.new(1, -38, 0, 14), Position = UDim2.new(0, 38, 0, 18), TextTransparency = 0.4 }), "Text"),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345875"), { Size = UDim2.new(0, 56, 0, 56), Position = UDim2.new(0, 84, 0, 110) }), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Premium Features", 14), { Size = UDim2.new(1, -150, 0, 14), Position = UDim2.new(0, 150, 0, 112), Font = Enum.Font.GothamBold }), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "This part of the script is locked to Sirius Premium users. Purchase Premium in the Discord server (discord.gg/sirius)", 12), { Size = UDim2.new(1, -200, 0, 14), Position = UDim2.new(0, 150, 0, 138), TextWrapped = true, TextTransparency = 0.4 }), "Text")
			})
		end
		return Elements
	end

	return TabFunction
end

function OrionLib:Destroy()
	if Orion and Orion.Parent then pcall(function() Orion:Destroy() end) end
end

return OrionLib
