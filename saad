OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/VerbalHubz/Verbal-Hub/main/Orion%20Hub%20Ui",true))()
 
Window = OrionLib:MakeWindow({Name = "Verbal Sigma Hub Ftap ",
HidePremium = false,
SaveConfig = true,
IntroEnabled = true,
IntroText = "Welcome To Verbal Sigma Hub Ftap",
IntroIcon = "rbxassetid://18919749220",
ConfigFolder = "VerbalHubConfig"
})


Tab = Window:MakeTab({
    Name = "EmergancyðŸš¨",
    Icon = "rbxassetid://18969927583",
    PremiumOnly = false
 })

 toggleActiveAntiGrab = false 
 toggleActiveAntiBlobman = false

 PS = game:GetService("Players")
 Player = PS.LocalPlayer
 RS = game:GetService("ReplicatedStorage")
 CE = RS:WaitForChild("CharacterEvents")
 R = game:GetService("RunService")
 BeingHeld = Player:WaitForChild("IsHeld")

--[[ Remotes ]]--
 StruggleEvent = CE:WaitForChild("Struggle")

--[[ Improved Anti-Fling ]]--
 initialPosition = nil
 teleportDistanceThreshold = 100 -- Distance in studs before teleporting back
 velocityThreshold = 1000 -- Velocity threshold to detect flinging
local grabDistanceThreshold = 10 -- Minimum distance change to consider the player grabbed

-- This function handles teleporting the player back to their original position
local function teleportToInitialPosition()
    if toggleActiveAntiGrab and initialPosition then
        local char = Player.Character
        if char then
            local humanoidRootPart = char:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                humanoidRootPart.CFrame = CFrame.new(initialPosition)
            end
        end
    end
end

-- Check the player's velocity and distance to detect if they're being flung
local function onThrow()
    if toggleActiveAntiGrab then
        local char = Player.Character
        if char then
            local humanoidRootPart = char:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                local currentVelocity = humanoidRootPart.AssemblyLinearVelocity
                local currentPosition = humanoidRootPart.Position
                local distanceFromStart = (currentPosition - initialPosition).Magnitude

                -- Check if the player is moving too fast or too far from their initial position
                if currentVelocity.Magnitude > velocityThreshold and distanceFromStart > teleportDistanceThreshold then
                    humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0) -- Zero out velocity
                    humanoidRootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0) -- Zero out angular velocity
                    teleportToInitialPosition() -- Teleport back to the initial position
                end
            end
        end
    end
end

R.RenderStepped:Connect(onThrow)

--[[ Anti-Grab ]] --
BeingHeld.Changed:Connect(function(isHeld)
    if toggleActiveAntiGrab and isHeld then
        local char = Player.Character
        if char then
            local humanoidRootPart = char:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                initialPosition = humanoidRootPart.Position
                local eventConnection

                eventConnection = R.RenderStepped:Connect(function()
                    if BeingHeld.Value then
                        local currentPosition = humanoidRootPart.Position
                        local distanceMoved = (currentPosition - initialPosition).Magnitude

                        if distanceMoved > grabDistanceThreshold then
                            humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                            humanoidRootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                            StruggleEvent:FireServer(Player)
                        end
                    else
                        eventConnection:Disconnect()
                    end
                end)
            end
        end
    end
end)

--[[ Anti-Blobman ]] --
local function checkBlobman()
    if toggleActiveAntiBlobman then
        local char = Player.Character or Player.CharacterAdded:Wait()
        local humanoid = char:FindFirstChildWhichIsA("Humanoid") or char:WaitForChild("Humanoid")
        local humanoidRootPart = char:WaitForChild("HumanoidRootPart")

        local function onAnimationTrackChanged()
            if humanoid.SeatPart and tostring(humanoid.SeatPart.Parent) == "CreatureBlobman" then
                local rightGrabAnim = humanoid:FindFirstChild("RightGrabAnimation")
                local leftGrabAnim = humanoid:FindFirstChild("LeftGrabAnimation")

                if rightGrabAnim then
                    rightGrabAnim.AnimationId = "" -- Prevent grab animation
                end
                if leftGrabAnim then
                    leftGrabAnim.AnimationId = "" -- Prevent grab animation
                end
            end
        end

        humanoid:GetPropertyChangedSignal("SeatPart"):Connect(onAnimationTrackChanged)
        onAnimationTrackChanged() 
    end
end

local function reconnect()
    local char = Player.Character or Player.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildWhichIsA("Humanoid") or char:WaitForChild("Humanoid")
    local humanoidRootPart = char:WaitForChild("HumanoidRootPart")

    -- Anti-Blobman
    humanoidRootPart.ChildAdded:Connect(function(child)
        if toggleActiveAntiBlobman and child:IsA("Fire") then
            child:Destroy() 
        end
    end)

    checkBlobman()

    humanoid.Changed:Connect(function(property)
        if toggleActiveAntiGrab and property == "Sit" and humanoid.Sit then
            if humanoid.SeatPart and tostring(humanoid.SeatPart.Parent) == "CreatureBlobman" then
                -- Prevent sitting on Blobman
            elseif not humanoid.SeatPart then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
                humanoid.Sit = false
            end
        end
    end)
end

reconnect()
Player.CharacterAdded:Connect(reconnect)

--[[ UI Toggle Functions ]]--
Tab:AddToggle({
    Name = "Anti Grab",
    Default = false,
    Callback = function(Value)
        toggleActiveAntiGrab = Value
        print("Anti Grab toggle set to:", Value)
    end    
})

Tab:AddToggle({
    Name = "Anti Blobman",
    Default = false,
    Callback = function(Value)
        toggleActiveAntiBlobman = Value
        print("Anti Blobman toggle set to:", Value)
        checkBlobman() 
    end    
})
