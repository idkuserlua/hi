--[[
    Orion Library
    Rewritten by Sirius Softworks
    Credits to respective owners for some functions (Feather Icons, MakeDraggable).
    Please keep these credits if you use this library.
]]

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
getgenv().gethui = function() return game:GetService("CoreGui") end -- Fallback if not set by environment

local OrionLib = {
    Elements = {},
    ThemeObjects = {},
    Connections = {},
    Flags = {},
    Themes = {
        Default = {
            Main = Color3.fromRGB(25, 25, 25),
            Second = Color3.fromRGB(32, 32, 32),
            Stroke = Color3.fromRGB(60, 60, 60),
            Divider = Color3.fromRGB(60, 60, 60),
            Text = Color3.fromRGB(240, 240, 240),
            TextDark = Color3.fromRGB(150, 150, 150)
        }
    },
    SelectedTheme = "Default",
    Folder = nil,
    SaveCfg = false
}

--Feather Icons https://github.com/evoincorp/lucideblox/tree/master/src/modules/util - Created by 7kayoh
local Icons = {}

local Success, Response = pcall(function()
    Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
    warn("OrionLib: Failed to load icons - ", Response)
end

local function GetIcon(IconName)
    if Icons[IconName] ~= nil then
        return Icons[IconName]
    else
        return nil
    end
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensures proper layering if other UIs use Global
if syn and syn.protect_gui then
    syn.protect_gui(Orion)
end
Orion.Parent = gethui() or game:GetService("CoreGui")


if gethui then
    for _, Interface in ipairs(gethui():GetChildren()) do
        if Interface.Name == Orion.Name and Interface ~= Orion then
            Interface:Destroy()
        end
    end
else
    for _, Interface in ipairs(game:GetService("CoreGui"):GetChildren()) do
        if Interface.Name == Orion.Name and Interface ~= Orion then
            Interface:Destroy()
        end
    end
end

function OrionLib:IsRunning()
    if gethui then
        return Orion.Parent == gethui()
    else
        return Orion.Parent == game:GetService("CoreGui")
    end
end

local function AddConnection(Signal, Function)
    if (not OrionLib:IsRunning()) then
        return
    end
    local SignalConnect = Signal:Connect(Function)
    table.insert(OrionLib.Connections, SignalConnect)
    return SignalConnect
end

task.spawn(function()
    while (OrionLib:IsRunning()) do
        task.wait()
    end

    for _, Connection in pairs(OrionLib.Connections) do
        Connection:Disconnect()
    end
    OrionLib.Connections = {} -- Clear the table
end)

local function MakeDraggableOriginal(DragPoint, Main) -- Original MakeDraggable, used for main window
    local Dragging, DragInput, MousePos, FramePos = false
    AddConnection(DragPoint.InputBegan, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            MousePos = Input.Position
            FramePos = Main.Position

            local changedConnection
            changedConnection = Input.Changed:Connect(function()
                if Input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                    if changedConnection then
                        changedConnection:Disconnect()
                    end
                end
            end)
        end
    end)
    AddConnection(DragPoint.InputChanged, function(Input)
        if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
            DragInput = Input
        end
    end)
    AddConnection(UserInputService.InputChanged, function(Input)
        if Input == DragInput and Dragging then
            local Delta = Input.Position - MousePos
            Main.Position = UDim2.new(FramePos.X.Scale, FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
        end
    end)
end

local function Create(Name, Properties, Children)
    local Object = Instance.new(Name)
    for i, v in pairs(Properties or {}) do
        Object[i] = v
    end
    for i, v in pairs(Children or {}) do
        v.Parent = Object
    end
    return Object
end

local function CreateElement(ElementName, ElementFunction)
    OrionLib.Elements[ElementName] = function(...)
        return ElementFunction(...)
    end
end

local function MakeElement(ElementName, ...)
    local NewElement = OrionLib.Elements[ElementName](...)
    return NewElement
end

local function SetProps(Element, Props)
    for Property, Value in pairs(Props or {}) do
        Element[Property] = Value
    end
    return Element
end

local function SetChildren(Element, Children)
    for _, Child in pairs(Children or {}) do
        Child.Parent = Element
    end
    return Element
end

local function Round(Number, Factor)
    local Result = math.floor(Number / Factor + (math.sign(Number) * 0.5)) * Factor
    if Result < 0 and Number > 0 and Factor > 0 then Result = Result + Factor end -- Adjusted for positive numbers rounding to 0 then adding factor
    return Result
end

local function ReturnProperty(Object)
    if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("TextBox") then -- TextBox often needs BackgroundColor3 for its frame part
        return "BackgroundColor3"
    end
    if Object:IsA("ScrollingFrame") then
        return "ScrollBarImageColor3"
    end
    if Object:IsA("UIStroke") then
        return "Color"
    end
    if Object:IsA("TextLabel") then -- Separated from TextBox for TextColor3 as primary
        return "TextColor3"
    end
    if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
        return "ImageColor3"
    end
    return nil -- Fallback
end

local function AddThemeObject(Object, Type)
    if not OrionLib.ThemeObjects[Type] then
        OrionLib.ThemeObjects[Type] = {}
    end
    table.insert(OrionLib.ThemeObjects[Type], Object)
    local propName = ReturnProperty(Object)
    if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
        Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
    end
    return Object
end

local function SetTheme()
    for Name, Type in pairs(OrionLib.ThemeObjects) do
        for _, Object in pairs(Type) do
            if Object and Object.Parent then -- Ensure object exists
                local propName = ReturnProperty(Object)
                if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
                    Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Name]
                end
            end
        end
    end
end

local function PackColor(Color)
    return { R = Color.R * 255, G = Color.G * 255, B = Color.B * 255 }
end

local function UnpackColor(Color)
    return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
    local Success, Data = pcall(function() return HttpService:JSONDecode(Config) end)
    if not Success or not Data then return end

    for a, b in pairs(Data) do
        if OrionLib.Flags[a] then
            task.spawn(function()
                if OrionLib.Flags[a].Type == "Colorpicker" then
                    OrionLib.Flags[a]:Set(UnpackColor(b))
                else
                    OrionLib.Flags[a]:Set(b)
                end
            end)
        end
    end
end

local function SaveCfg(Name)
    if not (getfenv().writefile and OrionLib.Folder and Name) then return end
    local Data = {}
    for i, v in pairs(OrionLib.Flags) do
        if v.Save then
            if v.Type == "Colorpicker" then
                Data[i] = PackColor(v.Value)
            else
                Data[i] = v.Value
            end
        end
    end
    local success, err = pcall(function()
        writefile(OrionLib.Folder .. "/" .. Name .. ".txt", HttpService:JSONEncode(Data))
    end)
    if not success then
        warn("OrionLib: Failed to save config -", err)
    end
end

local WhitelistedMouse = { Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3, Enum.UserInputType.Touch }
local BlacklistedKeys = { Enum.KeyCode.Unknown, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.KeyCode.Up, Enum.KeyCode.Left, Enum.KeyCode.Down, Enum.KeyCode.Right, Enum.KeyCode.Slash, Enum.KeyCode.Tab, Enum.KeyCode.Backspace, Enum.KeyCode.Escape }

local function CheckKey(Table, Key)
    for _, v in ipairs(Table) do -- Use ipairs for arrays
        if v == Key then
            return true
        end
    end
    return false
end

CreateElement("Corner", function(Scale, Offset)
    local Corner = Create("UICorner", {
        CornerRadius = UDim.new(Scale or 0, Offset or 10)
    })
    return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
    local Stroke = Create("UIStroke", {
        Color = Color or Color3.fromRGB(255, 255, 255),
        Thickness = Thickness or 1
    })
    return Stroke
end)

CreateElement("List", function(Scale, Offset)
    local List = Create("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(Scale or 0, Offset or 0)
    })
    return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
    local Padding = Create("UIPadding", {
        PaddingBottom = UDim.new(0, Bottom or 4),
        PaddingLeft = UDim.new(0, Left or 4),
        PaddingRight = UDim.new(0, Right or 4),
        PaddingTop = UDim.new(0, Top or 4)
    })
    return Padding
end)

CreateElement("TFrame", function()
    local TFrame = Create("Frame", {
        BackgroundTransparency = 1
    })
    return TFrame
end)

CreateElement("Frame", function(Color)
    local Frame = Create("Frame", {
        BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0
    })
    return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
    local Frame = Create("Frame", {
        BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0
    }, {
        Create("UICorner", {
            CornerRadius = UDim.new(Scale or 0, Offset or 10) -- Ensure default for Scale
        })
    })
    return Frame
end)

CreateElement("Button", function()
    local Button = Create("TextButton", {
        Text = "",
        AutoButtonColor = false,
        BackgroundTransparency = 1,
        BorderSizePixel = 0
    })
    return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
    local ScrollFrame = Create("ScrollingFrame", {
        BackgroundTransparency = 1,
        MidImage = "rbxassetid://7445543667",
        BottomImage = "rbxassetid://7445543667",
        TopImage = "rbxassetid://7445543667",
        ScrollBarImageColor3 = Color or Color3.fromRGB(100,100,100), -- Default color
        BorderSizePixel = 0,
        ScrollBarThickness = Width or 6, -- Default width
        CanvasSize = UDim2.new(0, 0, 0, 0)
    })
    return ScrollFrame
end)

CreateElement("Image", function(ImageID)
    local ImageNew = Create("ImageLabel", {
        Image = ImageID or "",
        BackgroundTransparency = 1
    })

    if GetIcon(ImageID) ~= nil then
        ImageNew.Image = GetIcon(ImageID)
    end

    return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
    local Image = Create("ImageButton", {
        Image = ImageID or "",
        BackgroundTransparency = 1
    })
    return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
    local Label = Create("TextLabel", {
        Text = Text or "",
        TextColor3 = Color3.fromRGB(240, 240, 240),
        TextTransparency = Transparency or 0,
        TextSize = TextSize or 15,
        Font = Enum.Font.Roboto,
        RichText = true,
        BackgroundTransparency = 1,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
    SetProps(MakeElement("List"), {
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        VerticalAlignment = Enum.VerticalAlignment.Bottom,
        Padding = UDim.new(0, 5)
    })
}), {
    Position = UDim2.new(1, -25, 1, -25),
    Size = UDim2.new(0, 300, 1, -25),
    AnchorPoint = Vector2.new(1, 1),
    Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
    task.spawn(function()
        NotificationConfig.Name = NotificationConfig.Name or "Notification"
        NotificationConfig.Content = NotificationConfig.Content or "Test"
        NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
        NotificationConfig.Time = NotificationConfig.Time or 15

        local NotificationParent = SetProps(MakeElement("TFrame"), {
            Size = UDim2.new(1, 0, 0, 0),
            AutomaticSize = Enum.AutomaticSize.Y,
            Parent = NotificationHolder
        })

        local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(25, 25, 25), 0, 10), {
            Parent = NotificationParent,
            Size = UDim2.new(1, 0, 0, 0),
            Position = UDim2.new(1, -55, 0, 0), -- Start off-screen
            BackgroundTransparency = 0,
            AutomaticSize = Enum.AutomaticSize.Y
        }), {
            MakeElement("Stroke", Color3.fromRGB(93, 93, 93), 1.2),
            MakeElement("Padding", 12, 12, 12, 12),
            SetProps(MakeElement("Image", NotificationConfig.Image), {
                Size = UDim2.new(0, 20, 0, 20),
                ImageColor3 = Color3.fromRGB(240, 240, 240),
                Name = "Icon"
            }),
            SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
                Size = UDim2.new(1, -30, 0, 20),
                Position = UDim2.new(0, 30, 0, 0),
                Font = Enum.Font.GothamBold,
                Name = "Title"
            }),
            SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 25),
                Font = Enum.Font.GothamSemibold,
                Name = "Content",
                AutomaticSize = Enum.AutomaticSize.Y,
                TextColor3 = Color3.fromRGB(200, 200, 200),
                TextWrapped = true
            })
        })

        TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), { Position = UDim2.new(0, 0, 0, 0) }):Play()

        task.wait(NotificationConfig.Time - 0.88)
        TweenService:Create(NotificationFrame:FindFirstChild("Icon"), TweenInfo.new(0.4, Enum.EasingStyle.Quint), { ImageTransparency = 1 }):Play()
        TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), { BackgroundTransparency = 0.6 }):Play()
        task.wait(0.3)
        TweenService:Create(NotificationFrame:FindFirstChildOfClass("UIStroke"), TweenInfo.new(0.6, Enum.EasingStyle.Quint), { Transparency = 0.9 }):Play()
        TweenService:Create(NotificationFrame:FindFirstChild("Title"), TweenInfo.new(0.6, Enum.EasingStyle.Quint), { TextTransparency = 0.4 }):Play()
        TweenService:Create(NotificationFrame:FindFirstChild("Content"), TweenInfo.new(0.6, Enum.EasingStyle.Quint), { TextTransparency = 0.5 }):Play()
        task.wait(0.05)

        NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0), 'Out', 'Quint', 0.8, true) -- Use 'Out' for smoother exit
        task.wait(1.35)
        NotificationFrame:Destroy()
        NotificationParent:Destroy() -- Clean up parent as well
    end)
end

function OrionLib:Init()
    if OrionLib.SaveCfg then
        pcall(function()
            if getfenv().isfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
                local success, content = pcall(function() return readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") end)
                if success and content then
                    LoadCfg(content)
                    OrionLib:MakeNotification({
                        Name = "Configuration",
                        Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
                        Time = 5
                    })
                end
            end
        end)
    end
end

function OrionLib:MakeWindow(WindowConfig)
    local FirstTab = true
    local Minimized = false
    local UIHidden = false

    WindowConfig = WindowConfig or {}
    WindowConfig.Name = WindowConfig.Name or "Orion Library"
    WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
    WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
    WindowConfig.HidePremium = WindowConfig.HidePremium or false
    if WindowConfig.IntroEnabled == nil then
        WindowConfig.IntroEnabled = true
    end
    WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
    WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
    WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
    WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
    WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
    WindowConfig.SearchBar = WindowConfig.SearchBar or nil
    OrionLib.Folder = WindowConfig.ConfigFolder
    OrionLib.SaveCfg = WindowConfig.SaveConfig

    if WindowConfig.SaveConfig then
        pcall(function()
            if getfenv().isfolder and getfenv().makefolder and not isfolder(WindowConfig.ConfigFolder) then
                makefolder(WindowConfig.ConfigFolder)
            elseif not (getfenv().isfolder and isfolder(WindowConfig.ConfigFolder)) then
                 if getfenv().makefolder then makefolder(WindowConfig.ConfigFolder) end
            end
        end)
    end

    local TabHolderListLayout = MakeElement("List")
    local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4),
        WindowConfig.SearchBar and {
            Size = UDim2.new(1, 0, 1, -90),
            Position = UDim2.new(0, 0, 0, 40)
        } or {
            Size = UDim2.new(1, 0, 1, -50)
        }),
        {
            TabHolderListLayout,
            MakeElement("Padding", 8, 0, 0, 8) -- Bottom, Left, Right, Top
        }), "Divider")


    AddConnection(TabHolderListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
        if TabHolderListLayout and TabHolder and TabHolder:IsA("ScrollingFrame") then
             TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolderListLayout.AbsoluteContentSize.Y + 16) -- +16 for padding (8 top + 8 bottom)
        end
    end)

    local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.5, 0, 1, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        BackgroundTransparency = 1
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
            Position = UDim2.new(0, 9, 0, 6),
            Size = UDim2.new(0, 18, 0, 18)
        }), "Text")
    })

    local MinimizeBtnIcon = AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
        Position = UDim2.new(0, 9, 0, 6),
        Size = UDim2.new(0, 18, 0, 18),
    }), "Text")
    local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
        Size = UDim2.new(0.5, 0, 1, 0),
        BackgroundTransparency = 1
    }), { MinimizeBtnIcon })


    local DragPoint = SetProps(MakeElement("TFrame"), {
        Size = UDim2.new(1, 0, 0, 50)
    })

    local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
        Size = UDim2.new(0, 150, 1, -50),
        Position = UDim2.new(0, 0, 0, 50)
    }), {
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(1, 0, 0, 10),
            Position = UDim2.new(0, 0, 0, 0)
        }), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(0, 10, 1, 0),
            Position = UDim2.new(1, -10, 0, 0)
        }), "Second"),
        AddThemeObject(SetProps(MakeElement("Frame"), {
            Size = UDim2.new(0, 1, 1, 0),
            Position = UDim2.new(1, -1, 0, 0)
        }), "Stroke"),
        TabHolder,
        SetChildren(SetProps(MakeElement("TFrame"), { -- Bottom user info bar
            Size = UDim2.new(1, 0, 0, 50),
            Position = UDim2.new(0, 0, 1, -50)
        }), {
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(1, 0, 0, 1) -- Divider line
            }), "Stroke"),
            AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), { -- User image background
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 32, 0, 32),
                Position = UDim2.new(0, 10, 0.5, 0)
            }), {
                SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=" .. LocalPlayer.UserId .. "&width=420&height=420&format=png"), {
                    Size = UDim2.new(1, 0, 1, 0)
                }),
                AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), { -- Image overlay/mask
                    Size = UDim2.new(1, 0, 1, 0),
                }), "Second"),
                MakeElement("Corner", 1) -- Make it round
            }), "Divider"),
            SetChildren(SetProps(MakeElement("TFrame"), { -- Stroke around user image
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 32, 0, 32),
                Position = UDim2.new(0, 10, 0.5, 0)
            }), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                MakeElement("Corner", 1)
            }),
            AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
                Size = UDim2.new(1, -60, 0, 13),
                Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
                Font = Enum.Font.GothamBold,
                ClipsDescendants = true
            }), "Text"),
            AddThemeObject(SetProps(MakeElement("Label", "@" .. LocalPlayer.Name, 12), { -- Changed to Username
                Size = UDim2.new(1, -60, 0, 12),
                Position = UDim2.new(0, 50, 1, -25),
                Visible = not WindowConfig.HidePremium,
                Font = Enum.Font.Gotham, -- Changed font for distinction
            }), "TextDark")
        }),
    }), "Second")

    local Tabs = {};

    if WindowConfig.SearchBar then
        local searchBarDefaultText = "🔍 Search"
        local clearTextOnFocusSearch = true
        if type(WindowConfig.SearchBar) == "table" then
            searchBarDefaultText = WindowConfig.SearchBar.Default or searchBarDefaultText
            clearTextOnFocusSearch = WindowConfig.SearchBar.ClearTextOnFocus ~= nil and WindowConfig.SearchBar.ClearTextOnFocus or clearTextOnFocusSearch
        end

        local TextboxActual = AddThemeObject(Create("TextBox", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            PlaceholderColor3 = Color3.fromRGB(210, 210, 210),
            PlaceholderText = searchBarDefaultText,
            Font = Enum.Font.GothamBold,
            TextWrapped = true,
            Text = '',
            TextXAlignment = Enum.TextXAlignment.Center,
            TextSize = 14,
            ClearTextOnFocus = clearTextOnFocusSearch
        }), "Text")


        local SearchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 6), {
            Parent = WindowStuff,
            Size = UDim2.new(0, 130, 0, 24),
            Position = UDim2.new(1, -140, 0, 13), -- Adjusted position to be more centered within the 150px width of WindowStuff
            AnchorPoint = Vector2.new(0, 0.5)
        }), {
            AddThemeObject(MakeElement("Stroke"), "Stroke"),
            TextboxActual
        }), "Main")

        local function SearchHandle()
            local Text = string.lower(TextboxActual.Text);
            if not TabHolder or not TabHolder:IsA("GuiObject") then return end

            for tabName, tabButton in pairs(Tabs) do
                if tabButton and tabButton:IsA('TextButton') then
                    if Text == "" or string.find(string.lower(tabName), Text) then
                        tabButton.Visible = true
                    else
                        tabButton.Visible = false
                    end
                end
            end
        end
        AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle);
    end

    local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
        Size = UDim2.new(1, -30, 2, 0),
        Position = UDim2.new(0, 25, 0, -24),
        Font = Enum.Font.GothamBlack,
        TextSize = 20
    }), "Text")

    local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
        Size = UDim2.new(1, 0, 0, 1),
        Position = UDim2.new(0, 0, 1, -1)
    }), "Stroke")

    local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
        Parent = Orion,
        Position = UDim2.new(0.5, -307, 0.5, -172),
        Size = UDim2.new(0, 615, 0, 344),
        ClipsDescendants = true
    }), {
        SetChildren(SetProps(MakeElement("TFrame"), {
            Size = UDim2.new(1, 0, 0, 50),
            Name = "TopBar"
        }), {
            WindowName,
            WindowTopBarLine,
            AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), { -- Control buttons frame
                Size = UDim2.new(0, 70, 0, 30),
                Position = UDim2.new(1, -80, 0.5, -15) -- Anchor to right, vertically center
            }), {
                AddThemeObject(MakeElement("Stroke"), "Stroke"),
                AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider in control buttons
                    Size = UDim2.new(0, 1, 1, 0),
                    Position = UDim2.new(0.5, 0, 0, 0)
                }), "Stroke"),
                CloseBtn,
                MinimizeBtn
            }), "Second"),
        }),
        DragPoint,
        WindowStuff -- Contains TabHolder and user info
    }), "Main")

    if WindowConfig.ShowIcon then
        WindowName.Position = UDim2.new(0, 50, 0, -24)
        local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(0, 25, 0.5, -10), -- Vertically center icon
            Parent = MainWindow:FindFirstChild("TopBar")
        })
    end

    MakeDraggableOriginal(DragPoint, MainWindow) -- Use the original draggable for the main window

    local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
        Parent = Orion,
        Size = UDim2.new(0, 40, 0, 40),
        Position = UDim2.new(0.05, 0, 0.05, 0), -- Default to top-leftish
        BackgroundTransparency = 0,
        BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
        Visible = false,
        AnchorPoint = Vector2.new(0, 0) -- Changed anchor point for easier positioning
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://17615525476"), { -- Replace with a more suitable icon if needed
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0.7, 0, 0.7, 0)
        }), "Text"),
        MakeElement("Corner", 1)
    })

    local function MakeDraggableForMobile(button)
        local dragging = false
        local dragInput, mousePos, framePos

        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                mousePos = input.Position
                framePos = button.Position

                local changedConnection
                changedConnection = input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        if changedConnection then changedConnection:Disconnect() end
                    end
                end)
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
             if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                local delta = input.Position - mousePos
                local newPosition = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
                -- Optional: Clamp position to screen bounds
                -- local screenGui = button:FindFirstAncestorOfClass("ScreenGui")
                -- if screenGui then
                --    local boundX = math.clamp(newPosition.X.Offset, 0, screenGui.AbsoluteSize.X - button.AbsoluteSize.X)
                --    local boundY = math.clamp(newPosition.Y.Offset, 0, screenGui.AbsoluteSize.Y - button.AbsoluteSize.Y)
                --    newPosition = UDim2.new(newPosition.X.Scale, boundX, newPosition.Y.Scale, boundY)
                -- end
                button.Position = newPosition
            end
        end)
    end

    MakeDraggableForMobile(MobileReopenButton)


    AddConnection(CloseBtn.MouseButton1Up, function()
        MainWindow.Visible = false
        MobileReopenButton.Visible = true
        UIHidden = true
        OrionLib:MakeNotification({
            Name = "Interface Hidden",
            Content = "Tap the open button or press M to reopen.",
            Time = 5
        })
        if WindowConfig.CloseCallback then WindowConfig.CloseCallback() end
    end)

    AddConnection(UserInputService.InputBegan, function(Input)
        if UserInputService:GetFocusedTextBox() then return end -- Don't toggle if typing
        if Input.KeyCode == Enum.KeyCode.M then
            UIHidden = not UIHidden
            MainWindow.Visible = not UIHidden
            MobileReopenButton.Visible = UIHidden
            if UIHidden and WindowConfig.CloseCallback then WindowConfig.CloseCallback() end
        end
    end)

    AddConnection(MobileReopenButton.Activated, function()
        UIHidden = false
        MainWindow.Visible = true
        MobileReopenButton.Visible = false
    end)


    AddConnection(MinimizeBtn.MouseButton1Up, function()
        Minimized = not Minimized
        if Minimized then
            MainWindow.ClipsDescendants = true
            WindowTopBarLine.Visible = false
            MinimizeBtnIcon.Image = "rbxassetid://7072720870" -- Minimized icon
            WindowStuff.Visible = false
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.new(0, WindowName.TextBounds.X + (WindowConfig.ShowIcon and 50 or 25) + 90, 0, 50) }):Play() -- Adjusted width for controls
        else
            TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Size = UDim2.new(0, 615, 0, 344) }):Play()
            MinimizeBtnIcon.Image = "rbxassetid://7072719338" -- Maximized icon
            task.wait(0.1) -- Wait for tween to start showing content
            MainWindow.ClipsDescendants = false -- Allow content to overflow if necessary during tween
            WindowStuff.Visible = true
            WindowTopBarLine.Visible = true
        end
    end)

    local function LoadSequence()
        MainWindow.Visible = false
        local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
            Parent = Orion,
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.4, 0),
            Size = UDim2.new(0, 28, 0, 28),
            ImageColor3 = Color3.fromRGB(255, 255, 255),
            ImageTransparency = 1
        })

        local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
            Parent = Orion,
            Size = UDim2.new(1, 0, 0, 30), -- Use AutomaticSize or fixed height
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 19, 0.5, 0), -- Initial position to the right of where logo will be
            TextXAlignment = Enum.TextXAlignment.Center,
            TextYAlignment = Enum.TextYAlignment.Center,
            Font = Enum.Font.GothamBold,
            TextTransparency = 1
        })

        TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0) }):Play()
        task.wait(0.8)
        -- Calculate position for logo to be left of text
        local textWidth = LoadSequenceText.TextBounds.X
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Position = UDim2.new(0.5, -(textWidth / 2) - (LoadSequenceLogo.AbsoluteSize.X/2) - 5, 0.5, 0) }):Play()
        LoadSequenceText.Position = UDim2.new(0.5, (LoadSequenceLogo.AbsoluteSize.X/2) + 5, 0.5, 0) -- Position text to the right of logo
        task.wait(0.3)
        TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = 0 }):Play()
        task.wait(2)
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { ImageTransparency = 1 }):Play()
        TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = 1 }):Play()
        task.wait(0.3)
        MainWindow.Visible = true
        LoadSequenceLogo:Destroy()
        LoadSequenceText:Destroy()
    end

    if WindowConfig.IntroEnabled then
        LoadSequence()
    else
        MainWindow.Visible = true
    end

    local TabFunction = {}
    function TabFunction:MakeTab(TabConfig)
        TabConfig = TabConfig or {}
        TabConfig.Name = TabConfig.Name or "Tab"
        TabConfig.Icon = TabConfig.Icon or ""
        TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

        local TabIcon = AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
            AnchorPoint = Vector2.new(0, 0.5),
            Size = UDim2.new(0, 18, 0, 18),
            Position = UDim2.new(0, 10, 0.5, 0),
            ImageTransparency = 0.4,
        }), "Text")
        local TabTitle = AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
            Size = UDim2.new(1, -35, 1, 0),
            Position = UDim2.new(0, 35, 0, 0),
            Font = Enum.Font.GothamSemibold,
            TextTransparency = 0.4,
        }), "Text")

        local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
            Size = UDim2.new(1, 0, 0, 30),
            Parent = TabHolder
        }), { TabIcon, TabTitle })


        if GetIcon(TabConfig.Icon) ~= nil then
            TabIcon.Image = GetIcon(TabConfig.Icon)
        end

        if WindowConfig.SearchBar then
            Tabs[TabConfig.Name] = TabFrame
        end

        local ContainerListLayout = MakeElement("List", 0, 6)
        local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 5), {
            Size = UDim2.new(1, -150, 1, -50),
            Position = UDim2.new(0, 150, 0, 50),
            Parent = MainWindow,
            Visible = false,
            Name = "ItemContainer"
        }), {
            ContainerListLayout,
            MakeElement("Padding", 15, 10, 10, 15) -- Bottom, Left, Right, Top
        }), "Divider")

        AddConnection(ContainerListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            if ContainerListLayout and Container and Container:IsA("ScrollingFrame") then
                Container.CanvasSize = UDim2.new(0, 0, 0, ContainerListLayout.AbsoluteContentSize.Y + 30) -- 15 top + 15 bottom padding
            end
        end)

        if FirstTab then
            FirstTab = false
            TabIcon.ImageTransparency = 0
            TabTitle.TextTransparency = 0
            TabTitle.Font = Enum.Font.GothamBlack
            Container.Visible = true
        end

        AddConnection(TabFrame.MouseButton1Click, function()
            for _, ChildTabFrame in ipairs(TabHolder:GetChildren()) do
                if ChildTabFrame:IsA("TextButton") then
                    local childIcon = ChildTabFrame:FindFirstChildOfClass("ImageLabel")
                    local childTitle = ChildTabFrame:FindFirstChildOfClass("TextLabel")
                    if childTitle and childIcon then
                        childTitle.Font = Enum.Font.GothamSemibold
                        TweenService:Create(childIcon, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { ImageTransparency = 0.4 }):Play()
                        TweenService:Create(childTitle, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { TextTransparency = 0.4 }):Play()
                    end
                end
            end
            for _, ItemCont in ipairs(MainWindow:GetChildren()) do
                if ItemCont.Name == "ItemContainer" then
                    ItemCont.Visible = false
                end
            end
            if TabIcon and TabTitle then
                TweenService:Create(TabIcon, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { ImageTransparency = 0 }):Play()
                TweenService:Create(TabTitle, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { TextTransparency = 0 }):Play()
                TabTitle.Font = Enum.Font.GothamBlack
            end
            Container.Visible = true
        end)

        local function GetElements(ItemParent)
            local ElementFunction = {}
            function ElementFunction:AddLabel(Text)
                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
                    Size = UDim2.new(1, -12, 1, 0),
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")
                local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 30),
                    BackgroundTransparency = 0.7,
                    Parent = ItemParent
                }), {
                    ContentLabel,
                    AddThemeObject(MakeElement("Stroke"), "Stroke")
                }), "Second")

                local LabelFunction = {}
                function LabelFunction:Set(ToChange)
                    ContentLabel.Text = ToChange
                end
                return LabelFunction
            end
            function ElementFunction:AddParagraph(Text, Content)
                Text = Text or "Text"
                Content = Content or "Content"

                local TitleLabel = AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
                    Size = UDim2.new(1, -24, 0, 14), -- Adjusted size for padding
                    Position = UDim2.new(0, 12, 0, 10),
                    Font = Enum.Font.GothamBold,
                }), "Text")
                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", Content, 13), {
                    Size = UDim2.new(1, -24, 0, 0), -- Height will be automatic
                    Position = UDim2.new(0, 12, 0, 26),
                    Font = Enum.Font.GothamSemibold,
                    TextWrapped = true,
                    AutomaticSize = Enum.AutomaticSize.Y, -- Let it size vertically
                }), "TextDark")

                local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 30), -- Initial height, will adjust
                    BackgroundTransparency = 0.7,
                    Parent = ItemParent,
                    AutomaticSize = Enum.AutomaticSize.Y -- Allow frame to resize based on content + padding
                }), {
                    MakeElement("Padding", 10,12,12,26+5), -- Bottom(10), Left(12), Right(12), Top(Title height + content offset + buffer)
                    TitleLabel,
                    ContentLabel,
                    AddThemeObject(MakeElement("Stroke"), "Stroke")
                }), "Second")
                
                -- Initial manual trigger for size update if needed, though AutomaticSize should handle it.
                task.defer(function()
                    if ContentLabel and ContentLabel.Parent then ContentLabel.Text = Content end
                end)


                local ParagraphFunction = {}
                function ParagraphFunction:Set(ToChange)
                    ContentLabel.Text = ToChange
                end
                return ParagraphFunction
            end
            function ElementFunction:AddButton(ButtonConfig)
                ButtonConfig = ButtonConfig or {}
                ButtonConfig.Name = ButtonConfig.Name or "Button"
                ButtonConfig.Callback = ButtonConfig.Callback or function() end
                ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://3944703587"

                local Button = {}

                local Click = SetProps(MakeElement("Button"), {
                    Size = UDim2.new(1, 0, 1, 0)
                })
                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
                    Size = UDim2.new(1, -12, 1, 0),
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")
                local IconImage = AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
                    Size = UDim2.new(0, 20, 0, 20),
                    Position = UDim2.new(1, -30, 0.5, -10), -- Centered vertically
                }), "TextDark")

                local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 33),
                    Parent = ItemParent
                }), {
                    ContentLabel,
                    IconImage,
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    Click
                }), "Second")

                AddConnection(Click.MouseEnter, function()
                    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                end)

                AddConnection(Click.MouseLeave, function()
                    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second }):Play()
                end)

                AddConnection(Click.MouseButton1Up, function()
                    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                    task.spawn(ButtonConfig.Callback)
                end)

                AddConnection(Click.MouseButton1Down, function()
                    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6) }):Play()
                end)

                function Button:Set(ButtonText)
                    ContentLabel.Text = ButtonText
                end

                return Button
            end
            function ElementFunction:AddToggle(ToggleConfig)
                ToggleConfig = ToggleConfig or {}
                ToggleConfig.Name = ToggleConfig.Name or "Toggle"
                ToggleConfig.Default = ToggleConfig.Default or false
                ToggleConfig.Callback = ToggleConfig.Callback or function() end
                ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
                ToggleConfig.Flag = ToggleConfig.Flag or nil
                ToggleConfig.Save = ToggleConfig.Save or false

                local Toggle = { Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle" }

                local Click = SetProps(MakeElement("Button"), {
                    Size = UDim2.new(1, 0, 1, 0)
                })
                local ToggleBoxStroke = SetProps(MakeElement("Stroke"), {
                    Color = ToggleConfig.Color,
                    Transparency = 0.5
                })
                local ToggleBoxIcon = SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
                    Size = UDim2.new(0, 20, 0, 20),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Position = UDim2.new(0.5, 0, 0.5, 0),
                    ImageColor3 = Color3.fromRGB(255, 255, 255),
                })

                local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
                    Size = UDim2.new(0, 24, 0, 24),
                    Position = UDim2.new(1, -24 - 12, 0.5, 0), -- Adjusted position to be next to label with padding
                    AnchorPoint = Vector2.new(1, 0.5)
                }), { ToggleBoxStroke, ToggleBoxIcon })
                
                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
                    Size = UDim2.new(1, -12 - 24 - 12, 1, 0), -- Adjust size for toggle box and padding
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")

                local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 38),
                    Parent = ItemParent
                }), {
                    ContentLabel,
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    ToggleBox,
                    Click
                }), "Second")

                function Toggle:Set(Value)
                    Toggle.Value = Value
                    local targetColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Divider
                    local strokeColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Stroke
                    local iconTransparency = Toggle.Value and 0 or 1
                    local iconSize = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)

                    TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = targetColor }):Play()
                    TweenService:Create(ToggleBoxStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { Color = strokeColor }):Play()
                    TweenService:Create(ToggleBoxIcon, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { ImageTransparency = iconTransparency, Size = iconSize }):Play()
                    ToggleConfig.Callback(Toggle.Value)
                end

                Toggle:Set(Toggle.Value) -- Initialize

                AddConnection(Click.MouseEnter, function()
                    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                end)
                AddConnection(Click.MouseLeave, function()
                    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second }):Play()
                end)
                AddConnection(Click.MouseButton1Up, function()
                    Toggle:Set(not Toggle.Value)
                    if OrionLib.SaveCfg and ToggleConfig.Save then SaveCfg(game.GameId) end
                     TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                end)
                AddConnection(Click.MouseButton1Down, function()
                    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6) }):Play()
                end)

                if ToggleConfig.Flag then
                    OrionLib.Flags[ToggleConfig.Flag] = Toggle
                end
                return Toggle
            end
            function ElementFunction:AddSlider(SliderConfig)
                SliderConfig = SliderConfig or {}
                SliderConfig.Name = SliderConfig.Name or "Slider"
                SliderConfig.Min = SliderConfig.Min or 0
                SliderConfig.Max = SliderConfig.Max or 100
                SliderConfig.Increment = SliderConfig.Increment or 1
                SliderConfig.Default = SliderConfig.Default or SliderConfig.Min -- Default to min if not specified
                SliderConfig.Callback = SliderConfig.Callback or function() end
                SliderConfig.ValueName = SliderConfig.ValueName or ""
                SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
                SliderConfig.Flag = SliderConfig.Flag or nil
                SliderConfig.Save = SliderConfig.Save or false

                local Slider = { Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider" }
                local Dragging = false
                local SliderKnob
                local KnobValueDisplay
                local SliderDragValueLabel = AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
                    Size = UDim2.new(1, -12, 1, 0),
                    Position = UDim2.new(0, 12, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Font = Enum.Font.GothamBold,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    TextTransparency = 0
                }), "Text")

                local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
                    Name = "SliderDrag",
                    Size = UDim2.new(0, 0, 1, 0),
                    BackgroundTransparency = 0.3,
                    ClipsDescendants = true,
                    ZIndex = 2
                }), { SliderDragValueLabel })

                local SliderBarValueLabel = AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
                    Size = UDim2.new(1, -12, 1, 0),
                    Position = UDim2.new(0, 12, 0.5, 0),
                    AnchorPoint = Vector2.new(0, 0.5),
                    Font = Enum.Font.GothamBold,
                    TextYAlignment = Enum.TextYAlignment.Center,
                    TextTransparency = 0.8
                }), "Text")

                SliderKnob = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), {
                    Name = "SliderKnob",
                    Size = UDim2.new(0, 12, 0, 22),
                    BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Position = UDim2.new(0, 0, 0.5, 0),
                    ZIndex = 3 -- Above SliderDrag and SliderBar
                }), {
                    AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
                }), "Text")


                local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
                    Name = "SliderBar",
                    Size = UDim2.new(1, -24, 0, 26),
                    Position = UDim2.new(0, 12, 0, 30),
                    BackgroundTransparency = 0.9,
                    ZIndex = 1,
                    ClipsDescendants = false -- Allow knob to exceed bounds visually
                }), {
                    SetProps(MakeElement("Stroke"), { Color = SliderConfig.Color, Transparency = 0.5 }),
                    SliderBarValueLabel,
                    SliderDrag,
                    SliderKnob -- Parent knob to SliderBar
                })
                SliderKnob.Parent = SliderBar -- Ensure correct parenting


                local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
                    Size = UDim2.new(1, 0, 0, 65),
                    Parent = ItemParent
                }), {
                    AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
                        Size = UDim2.new(1, -12, 0, 14),
                        Position = UDim2.new(0, 12, 0, 10),
                        Font = Enum.Font.GothamBold,
                    }), "Text"),
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    SliderBar
                }), "Second")

                local KnobValueDisplayText = AddThemeObject(SetProps(MakeElement("Label", "0", 11), {
                    Name = "Text",
                    Size = UDim2.new(1,0,1,0),
                    Font = Enum.Font.GothamSemibold,
                    TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    TextYAlignment = Enum.TextYAlignment.Center,
                }), "Text")
                KnobValueDisplay = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
                    Name = "KnobValueDisplay",
                    Parent = SliderFrame, -- Parent to SliderFrame for positioning relative to it
                    Size = UDim2.new(0, 0, 0, 20),
                    AutomaticSize = Enum.AutomaticSize.X,
                    BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
                    BackgroundTransparency = 0.15,
                    AnchorPoint = Vector2.new(0.5, 1), -- Anchor bottom-center of tooltip
                    Visible = false,
                    ZIndex = SliderFrame.ZIndex + 5,
                }), {
                    AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke"),
                    KnobValueDisplayText,
                    MakeElement("Padding", 1, 4, 4, 1) -- Top, Right, Bottom, Left
                }), "Main")


                local knobOriginalSize = SliderKnob.Size
                local knobPressedSize = UDim2.new(knobOriginalSize.X.Scale, knobOriginalSize.X.Offset + 2, knobOriginalSize.Y.Scale, knobOriginalSize.Y.Offset + 2)

                local function UpdateKnobValueDisplayPosition()
                    if KnobValueDisplay.Visible and SliderKnob and SliderKnob.Parent and SliderFrame and SliderFrame.Parent then
                        task.defer(function()
                            if not (SliderKnob and SliderKnob.Parent and KnobValueDisplay and KnobValueDisplay.Parent) then return end
                            local knobAbsPos = SliderKnob.AbsolutePosition
                            local knobAbsSize = SliderKnob.AbsoluteSize
                            local frameAbsPos = SliderFrame.AbsolutePosition

                            KnobValueDisplay.Position = UDim2.fromOffset(
                                (knobAbsPos.X - frameAbsPos.X) + (knobAbsSize.X / 2),
                                (knobAbsPos.Y - frameAbsPos.Y) - 3 -- 3px gap above knob's top
                            )
                        end)
                    end
                end
                
                local inputChangedConn
                local inputEndedConn

                SliderBar.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                        Dragging = true
                        TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), { Size = knobPressedSize }):Play()
                        KnobValueDisplayText.Text = tostring(Slider.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
                        KnobValueDisplay.Visible = true
                        UpdateKnobValueDisplayPosition()

                        local interactionPos = Input.Position
                        local frameLocation = SliderBar.AbsolutePosition
                        local relativeX = interactionPos.X - frameLocation.X
                        local SizeScale = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
                        Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
                        if OrionLib.SaveCfg and SliderConfig.Save then SaveCfg(game.GameId) end
                        
                        if inputChangedConn then inputChangedConn:Disconnect() end
                        inputChangedConn = UserInputService.InputChanged:Connect(function(subInput)
                            if Dragging and (subInput.UserInputType == Enum.UserInputType.MouseMovement or subInput.UserInputType == Enum.UserInputType.Touch) then
                                local currentInteractionPos = subInput.Position.X
                                -- if subInput.UserInputType == Enum.UserInputType.MouseMovement then -- Mouse.X might be more reliable if issues
                                --    currentInteractionPos = Mouse.X
                                -- end
                                local newSizeScale = math.clamp((currentInteractionPos - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
                                Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * newSizeScale))
                                UpdateKnobValueDisplayPosition()
                            end
                        end)

                        if inputEndedConn then inputEndedConn:Disconnect() end
                        inputEndedConn = UserInputService.InputEnded:Connect(function(subInput)
                            if Dragging and (subInput.UserInputType == Enum.UserInputType.MouseButton1 or subInput.UserInputType == Enum.UserInputType.Touch) then
                                Dragging = false
                                TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), { Size = knobOriginalSize }):Play()
                                KnobValueDisplay.Visible = false
                                if OrionLib.SaveCfg and SliderConfig.Save then SaveCfg(game.GameId) end
                                if inputChangedConn then inputChangedConn:Disconnect(); inputChangedConn = nil end
                                if inputEndedConn then inputEndedConn:Disconnect(); inputEndedConn = nil end
                            end
                        end)
                    end
                end)


                function Slider:Set(Value)
                    self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
                    local percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
                    if SliderConfig.Max == SliderConfig.Min then percentage = 0 end

                    local tweenInfo = TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                    TweenService:Create(SliderDrag, tweenInfo, { Size = UDim2.fromScale(percentage, 1) }):Play()
                    if SliderKnob then
                        TweenService:Create(SliderKnob, tweenInfo, { Position = UDim2.new(percentage, 0, 0.5, 0) }):Play()
                    end

                    local displayValue = tostring(self.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
                    SliderBarValueLabel.Text = displayValue
                    SliderDragValueLabel.Text = displayValue

                    if KnobValueDisplay and KnobValueDisplayText then
                        KnobValueDisplayText.Text = displayValue
                        if KnobValueDisplay.Visible then
                            UpdateKnobValueDisplayPosition()
                        end
                    end
                    SliderConfig.Callback(self.Value)
                end

                Slider:Set(Slider.Value) -- Initialize
                if SliderConfig.Flag then
                    OrionLib.Flags[SliderConfig.Flag] = Slider
                end
                return Slider
            end
            function ElementFunction:AddDropdown(DropdownConfig)
                DropdownConfig = DropdownConfig or {}
                DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
                DropdownConfig.Options = DropdownConfig.Options or {}
                DropdownConfig.Default = DropdownConfig.Default or (#DropdownConfig.Options > 0 and DropdownConfig.Options[1] or "")
                DropdownConfig.Callback = DropdownConfig.Callback or function() end
                DropdownConfig.Flag = DropdownConfig.Flag or nil
                DropdownConfig.Save = DropdownConfig.Save or false

                local Dropdown = { Value = DropdownConfig.Default, Options = DropdownConfig.Options, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save }
                local MaxElements = 5

                if not table.find(Dropdown.Options, Dropdown.Value) then
                    if #Dropdown.Options > 0 then
                        Dropdown.Value = Dropdown.Options[1]
                    else
                        Dropdown.Value = "..."
                    end
                end

                local DropdownList = MakeElement("List")
                local DropdownContainerPadding = MakeElement("UIPadding", 2, 2, 2, 2) -- B, L, R, T

                local DropdownContainer = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
                    Position = UDim2.new(0, 0, 0, 38), -- Position below header
                    Size = UDim2.new(1, 0, 1, -38), -- Fill space below header
                    ClipsDescendants = true,
                    Visible = false -- Initially hidden
                }), {
                    DropdownList,
                    DropdownContainerPadding
                }), "Divider")
                
                local DropdownHeaderLabel = AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
                    Size = UDim2.new(1, -12 - 20 - 100, 1, 0), -- Adjusted for icon and selected text
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")
                local DropdownHeaderIcon = AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
                    Size = UDim2.new(0, 20, 0, 20),
                    AnchorPoint = Vector2.new(1, 0.5), -- Anchor to its right
                    Position = UDim2.new(1, -12, 0.5, 0), -- Position on the far right
                    ImageColor3 = Color3.fromRGB(240, 240, 240),
                }), "TextDark")
                local DropdownHeaderSelectedText = AddThemeObject(SetProps(MakeElement("Label", "Selected", 13), {
                    Size = UDim2.new(0, 100, 1, 0), -- Fixed width for selected text
                    AnchorPoint = Vector2.new(1,0.5),
                    Position = UDim2.new(1, -12 -20 -5, 0.5, 0), -- Position left of the icon
                    Font = Enum.Font.Gotham,
                    TextXAlignment = Enum.TextXAlignment.Right,
                }), "TextDark")
                local DropdownHeaderLine = AddThemeObject(SetProps(MakeElement("Frame"), {
                    Size = UDim2.new(1, 0, 0, 1),
                    Position = UDim2.new(0, 0, 1, -1),
                    Visible = false
                }), "Stroke")
                local ClickButton = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })

                local HeaderFrame = SetChildren(SetProps(MakeElement("TFrame"), {
                    Size = UDim2.new(1, 0, 0, 38),
                    ClipsDescendants = true,
                    Name = "F" -- Keep name F for consistency if used elsewhere
                }), {
                    DropdownHeaderLabel, DropdownHeaderIcon, DropdownHeaderSelectedText, DropdownHeaderLine, ClickButton
                })

                local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 38), -- Initial collapsed size
                    Parent = ItemParent,
                    ClipsDescendants = true
                }), {
                    HeaderFrame,
                    DropdownContainer, -- Container is child of DropdownFrame
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    MakeElement("Corner")
                }), "Second")
                DropdownContainer.Parent = DropdownFrame -- Explicitly set parent

                AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                    if DropdownContainer and DropdownContainer:IsA("ScrollingFrame") and DropdownList and DropdownList:IsA("UIListLayout") then
                        local paddingSize = DropdownContainerPadding.PaddingTop.Offset + DropdownContainerPadding.PaddingBottom.Offset
                        DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + paddingSize)
                    end
                end)

                local function AddOptionsToUI(OptionsList)
                    if not DropdownContainer or not DropdownContainer.Parent then return end
                    for _, OptionText in ipairs(OptionsList) do
                        local OptionLabel = AddThemeObject(SetProps(MakeElement("Label", OptionText, 13, 0.4), {
                            Position = UDim2.new(0, 8, 0, 0),
                            Size = UDim2.new(1, -8, 1, 0),
                        }), "Text")
                        local OptionBtn = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), { -- Removed color arg
                            Size = UDim2.new(1, 0, 0, 28),
                            BackgroundTransparency = 1, -- Initially transparent
                            ClipsDescendants = true,
                            Parent = DropdownContainer
                        }), {
                            MakeElement("Corner", 0, 6),
                            OptionLabel
                        }), "Divider") -- Themed as Divider

                        AddConnection(OptionBtn.MouseButton1Click, function()
                            Dropdown:Set(OptionText)
                            if OrionLib.SaveCfg and DropdownConfig.Save then SaveCfg(game.GameId) end
                            -- Auto-collapse after selection
                            if Dropdown.Toggled then ClickButton:Invoke() end 
                        end)
                        Dropdown.Buttons[OptionText] = OptionBtn
                    end
                end

                function Dropdown:Refresh(NewOptions, DeleteExisting)
                    if DeleteExisting then
                        for _, btn in pairs(Dropdown.Buttons) do
                            if btn and btn.Parent then btn:Destroy() end
                        end
                        table.clear(Dropdown.Options)
                        table.clear(Dropdown.Buttons)
                    end
                    Dropdown.Options = NewOptions or {}
                    AddOptionsToUI(Dropdown.Options)
                    
                    -- Force update canvas size
                    task.defer(function()
                        if DropdownContainer and DropdownList and DropdownList:IsA("UIListLayout") then
                             local paddingSize = DropdownContainerPadding.PaddingTop.Offset + DropdownContainerPadding.PaddingBottom.Offset
                             DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + paddingSize)
                        end
                    end)
                end

                function Dropdown:Set(ValueToSet)
                    local actualValueToSet = ValueToSet
                    if not table.find(Dropdown.Options, actualValueToSet) then
                        if #Dropdown.Options > 0 then
                            actualValueToSet = Dropdown.Options[1]
                        else
                            actualValueToSet = "..."
                        end
                    end

                    Dropdown.Value = actualValueToSet
                    DropdownHeaderSelectedText.Text = Dropdown.Value

                    for optKey, optButton in pairs(Dropdown.Buttons) do
                        if optButton and optButton.Parent then
                            local isSelected = (optKey == Dropdown.Value)
                            local targetBgTrans = isSelected and 0 or 1
                            local targetTextTrans = isSelected and 0 or 0.4
                            local optionLabel = optButton:FindFirstChildOfClass("TextLabel")

                            TweenService:Create(optButton, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { BackgroundTransparency = targetBgTrans }):Play()
                            if optionLabel then
                                TweenService:Create(optionLabel, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { TextTransparency = targetTextTrans }):Play()
                            end
                        end
                    end
                    return DropdownConfig.Callback(Dropdown.Value)
                end
                
                local clickConnection = AddConnection(ClickButton.MouseButton1Click, function() -- Store connection to invoke later
                    Dropdown.Toggled = not Dropdown.Toggled
                    DropdownHeaderLine.Visible = Dropdown.Toggled
                    DropdownContainer.Visible = Dropdown.Toggled -- Toggle visibility of container

                    TweenService:Create(DropdownHeaderIcon, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Rotation = Dropdown.Toggled and 180 or 0 }):Play()

                    local targetHeight
                    if Dropdown.Toggled then
                        task.wait() -- Allow canvas size to update
                        local listContentHeight = DropdownList.AbsoluteContentSize.Y
                        local scrollPadding = DropdownContainerPadding.PaddingTop.Offset + DropdownContainerPadding.PaddingBottom.Offset
                        local actualContentHeightInScroll = listContentHeight + scrollPadding
                        
                        local itemsToShow = math.min(#Dropdown.Options, MaxElements)
                        local heightOfShownItems = itemsToShow * 28 -- Height of each option button
                        
                        if #Dropdown.Options == 0 then
                             targetHeight = 38
                        elseif #Dropdown.Options > MaxElements then
                            targetHeight = 38 + heightOfShownItems + scrollPadding
                        else
                            targetHeight = 38 + actualContentHeightInScroll
                        end
                        if #Dropdown.Options == 0 then targetHeight = 38 end -- No options, just header
                    else
                        targetHeight = 38
                    end
                    TweenService:Create(DropdownFrame, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(1, 0, 0, targetHeight) }):Play()
                end)
                -- Attach the invoke method to ClickButton itself if needed outside this scope
                ClickButton.Invoke = function() if clickConnection then clickConnection:Fire() end end


                Dropdown:Refresh(Dropdown.Options, false) -- Initial population
                Dropdown:Set(Dropdown.Value) -- Set initial value and update UI

                if DropdownConfig.Flag then
                    OrionLib.Flags[DropdownConfig.Flag] = Dropdown
                end
                return Dropdown
            end
            function ElementFunction:AddBind(BindConfig)
                BindConfig.Name = BindConfig.Name or "Bind"
                BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
                BindConfig.Hold = BindConfig.Hold or false
                BindConfig.Callback = BindConfig.Callback or function() end
                BindConfig.Flag = BindConfig.Flag or nil
                BindConfig.Save = BindConfig.Save or false

                local Bind = { Value = (type(BindConfig.Default) == "EnumItem" and BindConfig.Default.Name) or tostring(BindConfig.Default), Binding = false, Type = "Bind", Save = BindConfig.Save }
                local Holding = false

                local Click = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
                local BindBoxValueLabel = AddThemeObject(SetProps(MakeElement("Label", "", 14), {
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = Enum.Font.GothamBold,
                    TextXAlignment = Enum.TextXAlignment.Center,
                }), "Text")
                local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
                    Size = UDim2.new(0, 24, 0, 24), -- Initial small size
                    Position = UDim2.new(1, -12, 0.5, 0),
                    AnchorPoint = Vector2.new(1, 0.5),
                    AutomaticSize = Enum.AutomaticSize.X, -- Allow X to grow
                    ClipsDescendants = true -- Clip text if it's too long for some reason
                }), {
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    BindBoxValueLabel,
                    MakeElement("Padding",0,8,8,0) -- Left, Right padding for text
                }), "Main")
                
                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
                    Size = UDim2.new(1, -12 - BindBox.AbsoluteSize.X - 12, 1, 0), -- Dynamic width
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")

                local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 38),
                    Parent = ItemParent
                }), {
                    ContentLabel, AddThemeObject(MakeElement("Stroke"), "Stroke"), BindBox, Click
                }), "Second")

                -- Adjust ContentLabel size based on BindBox actual size
                local function updateContentLabelSize()
                    task.defer(function()
                        if ContentLabel and BindBox and BindBox.Parent then
                             ContentLabel.Size = UDim2.new(1, -12 - BindBox.AbsoluteSize.X - 12, 1, 0)
                        end
                    end)
                end
                AddConnection(BindBox:GetPropertyChangedSignal("AbsoluteSize"), updateContentLabelSize)


                AddConnection(Click.MouseButton1Click, function() -- Changed from InputEnded
                    if Bind.Binding then return end
                    Bind.Binding = true
                    BindBoxValueLabel.Text = "..."
                    updateContentLabelSize() -- Update label size as "..." might be different width
                end)

                AddConnection(UserInputService.InputBegan, function(Input, gameProcessedEvent)
                    if gameProcessedEvent or UserInputService:GetFocusedTextBox() then return end

                    local currentKeyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name

                    if currentKeyName == Bind.Value and not Bind.Binding then
                        if BindConfig.Hold then
                            Holding = true
                            BindConfig.Callback(Holding)
                        else
                            BindConfig.Callback()
                        end
                    elseif Bind.Binding then
                        local CapturedKeyName
                        if not CheckKey(BlacklistedKeys, Input.KeyCode) and Input.KeyCode ~= Enum.KeyCode.Unknown then
                            CapturedKeyName = Input.KeyCode.Name
                        elseif CheckKey(WhitelistedMouse, Input.UserInputType) then
                            CapturedKeyName = Input.UserInputType.Name
                        end

                        if CapturedKeyName then
                            Bind:Set(CapturedKeyName)
                            if OrionLib.SaveCfg and BindConfig.Save then SaveCfg(game.GameId) end
                        else
                            Bind:Set(Bind.Value) -- Revert to old value if invalid key
                        end
                        Bind.Binding = false
                    end
                end)

                AddConnection(UserInputService.InputEnded, function(Input, gameProcessedEvent)
                    if gameProcessedEvent or UserInputService:GetFocusedTextBox() then return end
                    local currentKeyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name
                    if currentKeyName == Bind.Value then
                        if BindConfig.Hold and Holding then
                            Holding = false
                            BindConfig.Callback(Holding)
                        end
                    end
                end)

                AddConnection(Click.MouseEnter, function()
                    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                end)
                AddConnection(Click.MouseLeave, function()
                    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second }):Play()
                end)
                AddConnection(Click.MouseButton1Down, function()
                    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6) }):Play()
                end)


                function Bind:Set(KeyName)
                    Bind.Binding = false
                    Bind.Value = (type(KeyName) == "EnumItem" and KeyName.Name) or tostring(KeyName) or "None"
                    BindBoxValueLabel.Text = Bind.Value
                    updateContentLabelSize() -- Update label size as new key name might be different width
                end

                Bind:Set(BindConfig.Default) -- Initialize
                if BindConfig.Flag then
                    OrionLib.Flags[BindConfig.Flag] = Bind
                end
                return Bind
            end
            function ElementFunction:AddTextbox(TextboxConfig)
                TextboxConfig = TextboxConfig or {}
                TextboxConfig.Name = TextboxConfig.Name or "Textbox"
                TextboxConfig.Default = TextboxConfig.Default or ""
                TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false -- Clear on focus lost if true
                TextboxConfig.Callback = TextboxConfig.Callback or function() end
                TextboxConfig.Numeric = TextboxConfig.Numeric or false
                TextboxConfig.Placeholder = TextboxConfig.Placeholder or "Input"

                local previousText = TextboxConfig.Default or ""

                local TextboxActual = AddThemeObject(Create("TextBox", {
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
                    PlaceholderColor3 = Color3.fromRGB(210, 210, 210),
                    PlaceholderText = TextboxConfig.Placeholder,
                    Font = Enum.Font.GothamSemibold,
                    TextXAlignment = Enum.TextXAlignment.Center,
                    TextSize = 14,
                    ClearTextOnFocus = false, -- Handle manually for TextDisappear
                    Text = previousText
                }), "Text") -- Theming the text color

                local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
                    Size = UDim2.new(0, 24, 0, 24), -- Initial size
                    Position = UDim2.new(1, -12, 0.5, 0),
                    AnchorPoint = Vector2.new(1, 0.5),
                    AutomaticSize = Enum.AutomaticSize.X,
                    ClipsDescendants = true
                }), {
                    AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    TextboxActual,
                    MakeElement("Padding", 0,8,8,0) -- Left/Right padding for text
                }), "Main") -- Theming the container background

                local ContentLabel = AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
                    Position = UDim2.new(0, 12, 0, 0),
                    Font = Enum.Font.GothamBold,
                }), "Text")

                local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 38),
                    Parent = ItemParent
                }), {
                    ContentLabel, AddThemeObject(MakeElement("Stroke"), "Stroke"), TextContainer
                }), "Second")
                
                local function updateSizes()
                     task.defer(function()
                        if TextContainer and TextContainer.Parent and ContentLabel and ContentLabel.Parent then
                             ContentLabel.Size = UDim2.new(1, -12 - TextContainer.AbsoluteSize.X - 12, 1, 0)
                        end
                    end)
                end
                AddConnection(TextContainer:GetPropertyChangedSignal("AbsoluteSize"), updateSizes)
                AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), updateSizes) -- Also update when text changes causing potential size change


                if TextboxConfig.Numeric then
                    AddConnection(TextboxActual.FocusLost, function(enterPressed)
                        local text = TextboxActual.Text
                        local num = tonumber(text)
                        if num then
                            TextboxConfig.Callback(num)
                            previousText = text -- Update previousText only if valid number
                            if TextboxConfig.TextDisappear then TextboxActual.Text = "" end
                        else
                            TextboxActual.Text = previousText -- Revert to last valid number or default
                        end
                        updateSizes()
                    end)
                    AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
                        local currentText = TextboxActual.Text
                        if currentText ~= "" and not string.match(currentText, "^%-?[0-9]*%.?[0-9]*$") then
                            TextboxActual.Text = string.sub(currentText,1, #currentText-1) -- Remove last char if invalid
                        end
                        -- previousText is not updated here, only on valid FocusLost
                        updateSizes()
                    end)
                else
                    AddConnection(TextboxActual.FocusLost, function(enterPressed)
                        TextboxConfig.Callback(TextboxActual.Text)
                        previousText = TextboxActual.Text -- Update previousText
                        if TextboxConfig.TextDisappear then
                            TextboxActual.Text = ""
                        end
                        updateSizes()
                    end)
                end
                
                updateSizes() -- Initial size update

                AddConnection(TextboxFrame.InputBegan, function(input) -- Click anywhere on frame to focus textbox
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        TextboxActual:CaptureFocus()
                    end
                end)
                -- Hover effects
                AddConnection(TextboxFrame.MouseEnter, function()
                    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3) }):Play()
                end)
                AddConnection(TextboxFrame.MouseLeave, function()
                    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), { BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second }):Play()
                end)

            end
            function ElementFunction:AddColorpicker(ColorpickerConfig)
                ColorpickerConfig = ColorpickerConfig or {}
                ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
                ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255, 255, 255)
                ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
                ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
                ColorpickerConfig.Save = ColorpickerConfig.Save or false

                local ColorH, ColorS, ColorV = table.unpack({ Color3.toHSV(ColorpickerConfig.Default) })
                local Colorpicker = { Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save }

                local ColorSelection = Create("ImageLabel", {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = UDim2.new(ColorS, 0, 1 - ColorV, 0),
                    ScaleType = Enum.ScaleType.Fit,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundTransparency = 1,
                    Image = "http://www.roblox.com/asset/?id=4805639000",
                    ZIndex = 3
                })
                local HueSelection = Create("ImageLabel", {
                    Size = UDim2.new(0, 18, 0, 18),
                    Position = UDim2.new(0.5, 0, ColorH, 0),
                    ScaleType = Enum.ScaleType.Fit,
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    BackgroundTransparency = 1,
                    Image = "http://www.roblox.com/asset/?id=4805639000",
                    ZIndex = 3
                })

                local ColorImage = Create("ImageLabel", {
                    Name = "ColorImage", Size = UDim2.new(1, -25, 1, 0), Visible = false,
                    Image = "rbxassetid://4155801252", BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1), ZIndex = 2
                }, { Create("UICorner", { CornerRadius = UDim.new(0, 5) }), ColorSelection })

                local HueImage = Create("Frame", {
                    Name = "HueImage", Size = UDim2.new(0, 20, 1, 0), Position = UDim2.new(1, -20, 0, 0), Visible = false, ZIndex = 2
                }, {
                    Create("UIGradient", { Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(0.16, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))}, }),
                    Create("UICorner", { CornerRadius = UDim.new(0, 5) }), HueSelection
                })

                local ColorpickerContainer = Create("Frame", {
                    Position = UDim2.new(0, 0, 0, 38), Size = UDim2.new(1, 0, 1, -38), -- Below header
                    BackgroundTransparency = 1, ClipsDescendants = true, ZIndex = 1, Visible = false
                }, {
                    HueImage, ColorImage,
                    Create("UIPadding", { PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 10)}) -- Reduced padding
                })
                
                local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), {
                    Size = UDim2.new(0, 24, 0, 24), Position = UDim2.new(1, -12, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5)
                }), { AddThemeObject(MakeElement("Stroke"), "Stroke") }), "Main")
                ColorpickerBox.BackgroundColor3 = ColorpickerConfig.Default -- Ensure initial color

                local HeaderLine = AddThemeObject(SetProps(MakeElement("Frame"), {
                    Size = UDim2.new(1, 0, 0, 1), Position = UDim2.new(0, 0, 1, -1), Visible = false
                }), "Stroke")
                local Click = SetProps(MakeElement("Button"), { Size = UDim2.new(1, 0, 1, 0) })
                
                local HeaderFrame = SetChildren(SetProps(MakeElement("TFrame"), {
                    Size = UDim2.new(1,0,0,38), Name = "F"
                }),{
                    AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
                        Size = UDim2.new(1, -12-24-12, 1, 0), Position = UDim2.new(0, 12, 0, 0), Font = Enum.Font.GothamBold,
                    }), "Text"),
                    ColorpickerBox, Click, HeaderLine
                })


                local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
                    Size = UDim2.new(1, 0, 0, 38), Parent = ItemParent, ClipsDescendants = true
                }), {
                    HeaderFrame, ColorpickerContainer, AddThemeObject(MakeElement("Stroke"), "Stroke")
                }), "Second")
                ColorpickerContainer.Parent = ColorpickerFrame -- Parent container to frame

                AddConnection(Click.MouseButton1Click, function()
                    Colorpicker.Toggled = not Colorpicker.Toggled
                    local targetHeight = Colorpicker.Toggled and 148 or 38 -- 148 = 38 (header) + 100 (picker area) + 10 (padding)
                    TweenService:Create(ColorpickerFrame, TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(1, 0, 0, targetHeight) }):Play()
                    ColorpickerContainer.Visible = Colorpicker.Toggled
                    ColorImage.Visible = Colorpicker.Toggled
                    HueImage.Visible = Colorpicker.Toggled
                    HeaderLine.Visible = Colorpicker.Toggled
                end)

                local colorInputConn, hueInputConn
                local userInputEndedConn -- Single connection for mouse up

                local function stopDragging()
                    if colorInputConn then colorInputConn:Disconnect(); colorInputConn = nil end
                    if hueInputConn then hueInputConn:Disconnect(); hueInputConn = nil end
                    if userInputEndedConn then userInputEndedConn:Disconnect(); userInputEndedConn = nil end
                end
                
                local function updatePickerVisuals()
                    ColorpickerBox.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
                    ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
                    Colorpicker:Set(ColorpickerBox.BackgroundColor3) -- This will call the callback
                    if OrionLib.SaveCfg and ColorpickerConfig.Save then SaveCfg(game.GameId) end
                end


                AddConnection(ColorImage.InputBegan, function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        stopDragging() -- Stop any previous dragging
                        colorInputConn = AddConnection(RunService.RenderStepped, function()
                            local interactionPos = UserInputService:GetMouseLocation() -- Use this for mouse
                            if input.UserInputType == Enum.UserInputType.Touch then interactionPos = input.Position end -- Use input.Position for initial touch

                            local ColorX = math.clamp((interactionPos.X - ColorImage.AbsolutePosition.X) / ColorImage.AbsoluteSize.X, 0, 1)
                            local ColorY = math.clamp((interactionPos.Y - ColorImage.AbsolutePosition.Y) / ColorImage.AbsoluteSize.Y, 0, 1)
                            ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
                            ColorS = ColorX; ColorV = 1 - ColorY
                            updatePickerVisuals()
                        end)
                        userInputEndedConn = AddConnection(UserInputService.InputEnded, function(endInput) 
                            if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then stopDragging() end
                        end)
                    end
                end)
                AddConnection(HueImage.InputBegan, function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        stopDragging()
                        hueInputConn = AddConnection(RunService.RenderStepped, function()
                            local interactionPos = UserInputService:GetMouseLocation()
                            if input.UserInputType == Enum.UserInputType.Touch then interactionPos = input.Position end

                            local HueY = math.clamp((interactionPos.Y - HueImage.AbsolutePosition.Y) / HueImage.AbsoluteSize.Y, 0, 1)
                            HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
                            ColorH = HueY
                            updatePickerVisuals()
                        end)
                         userInputEndedConn = AddConnection(UserInputService.InputEnded, function(endInput) 
                            if endInput.UserInputType == Enum.UserInputType.MouseButton1 or endInput.UserInputType == Enum.UserInputType.Touch then stopDragging() end
                        end)
                    end
                end)

                function Colorpicker:Set(Value)
                    Colorpicker.Value = Value
                    local h, s, v = Color3.toHSV(Value)
                    ColorH, ColorS, ColorV = h, s, v -- Update internal HSV state
                    ColorpickerBox.BackgroundColor3 = Value
                    if ColorImage and ColorImage.Parent then ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) end
                    if ColorSelection and ColorSelection.Parent then ColorSelection.Position = UDim2.new(ColorS, 0, 1 - ColorV, 0) end
                    if HueSelection and HueSelection.Parent then HueSelection.Position = UDim2.new(0.5, 0, ColorH, 0) end
                    ColorpickerConfig.Callback(Value)
                end

                Colorpicker:Set(ColorpickerConfig.Default) -- Initialize
                if ColorpickerConfig.Flag then
                    OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
                end
                return Colorpicker
            end
            return ElementFunction
        end

        local ElementFunction = {}

        function ElementFunction:AddSection(SectionConfig)
            SectionConfig = SectionConfig or {}
            SectionConfig.Name = SectionConfig.Name or "Section"

            local SectionHolderListLayout = MakeElement("List", 0, 6)
            local SectionHolder = SetChildren(SetProps(MakeElement("TFrame"), {
                AnchorPoint = Vector2.new(0, 0),
                Size = UDim2.new(1, 0, 0,0), -- Height determined by content
                Position = UDim2.new(0, 0, 0, 23), -- Below label
                AutomaticSize = Enum.AutomaticSize.Y
            }), { SectionHolderListLayout })

            local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
                Size = UDim2.new(1, 0, 0, 26), -- Initial height for label
                Parent = Container,
                AutomaticSize = Enum.AutomaticSize.Y -- Allow frame to grow with content
            }), {
                AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
                    Size = UDim2.new(1, -12, 0, 16),
                    Position = UDim2.new(0, 0, 0, 3),
                    Font = Enum.Font.GothamSemibold
                }), "TextDark"),
                SectionHolder
            })
            
            -- No need for explicit size update connection if AutomaticSize works reliably with UIListLayout.
            -- If issues, uncomment and refine:
            -- AddConnection(SectionHolderListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
            -- if SectionFrame and SectionHolder and SectionHolderListLayout then
            -- SectionHolder.Size = UDim2.new(1, 0, 0, SectionHolderListLayout.AbsoluteContentSize.Y)
            -- SectionFrame.Size = UDim2.new(1, 0, 0, SectionHolderListLayout.AbsoluteContentSize.Y + 31) -- 23 (holder pos) + 8 (buffer)
            -- end
            -- end)


            local SectionFunction = {}
            for i, v in pairs(GetElements(SectionHolder)) do
                SectionFunction[i] = v
            end
            return SectionFunction
        end

        for i, v in pairs(GetElements(Container)) do
            ElementFunction[i] = v
        end

        if TabConfig.PremiumOnly then -- Simplified premium lock display
            for i, v in pairs(ElementFunction) do
                ElementFunction[i] = function() warn("Attempted to use a premium feature: " .. i) end
            end
            if Container:FindFirstChildOfClass("UIListLayout") then Container:FindFirstChildOfClass("UIListLayout"):Destroy() end
            if Container:FindFirstChildOfClass("UIPadding") then Container:FindFirstChildOfClass("UIPadding"):Destroy() end

            SetChildren(SetProps(MakeElement("TFrame"), { Size = UDim2.new(1, 0, 1, 0), Parent = Container }), {
                 AddThemeObject(SetProps(MakeElement("Label", "🔒 Premium Only", 18), {
                    Size = UDim2.new(1,0,0,50), TextXAlignment = Enum.TextXAlignment.Center, TextYAlignment = Enum.TextYAlignment.Center,
                    Position = UDim2.new(0.5,0,0.5,-25), AnchorPoint = Vector2.new(0.5,0.5), Font = Enum.Font.GothamBold
                 }), "TextDark"),
                 AddThemeObject(SetProps(MakeElement("Label", "This feature requires premium.", 14), {
                    Size = UDim2.new(1,0,0,50), TextXAlignment = Enum.TextXAlignment.Center, TextYAlignment = Enum.TextYAlignment.Center,
                    Position = UDim2.new(0.5,0,0.5,25), AnchorPoint = Vector2.new(0.5,0.5), Font = Enum.Font.GothamSemibold
                 }), "TextDark")
            })
        end
        return ElementFunction
    end

    OrionLib:Init() -- Call Init after window is created if auto-config load is desired then.
    return TabFunction
end

function OrionLib:Destroy()
    if Orion and Orion.Parent then
        Orion:Destroy()
    end
    for _, Connection in pairs(OrionLib.Connections) do
        if Connection then Connection:Disconnect() end
    end
    OrionLib.Connections = {}
    OrionLib.ThemeObjects = {}
    OrionLib.Flags = {}
    -- Further cleanup can be added here if necessary (e.g., specific flag cleanup)
end

return OrionLib
