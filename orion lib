local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
getgenv().gethui = function() return game.CoreGui end

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
			Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

--Feather Icons https://github.com/evoincorp/lucideblox/tree/master/src/modules/util - Created by 7kayoh
local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
	warn("OrionLib: Failed to load icons. GetIcon will return nil.", Response)
end	

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling -- Ensure proper layering if multiple ScreenGuis exist

if syn and syn.protect_gui then
	syn.protect_gui(Orion)
	Orion.Parent = game.CoreGui
else
	Orion.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
end

function OrionLib:IsRunning()
	if gethui then
		return Orion.Parent == gethui()
	else
		return Orion.Parent == game:GetService("CoreGui")
	end
end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		-- warn("OrionLib: Attempted to connect signal when UI is not running.")
		return { Disconnect = function() end } -- Return a dummy connection
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while Orion.Parent do -- More robust check
		RunService.Heartbeat:Wait()
	end

	for _, Connection in next, OrionLib.Connections do
		if Connection and typeof(Connection.Disconnect) == "function" then
			Connection:Disconnect()
		end
	end
	OrionLib.Connections = {} -- Clear connections table
end)

local function MakeDraggable(DragPoint, Main)
	pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				local changedConnection
				changedConnection = Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
						if changedConnection then
							changedConnection:Disconnect() -- Disconnect self
						end
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging and Main and Main.Parent then -- Ensure Main still exists
				local Delta = Input.Position - MousePos
				-- Using Tween for smoother drag is generally not recommended for real-time dragging due to perceived lag.
				-- Direct position update is more responsive.
				Main.Position = UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
			end
		end)
	end)
end

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
		Object[i] = v
	end
	for i, v in next, Children or {} do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	if not OrionLib.Elements[ElementName] then
		warn("OrionLib: Element '" .. tostring(ElementName) .. "' not found.")
		return Create("Frame", {Name = "Error_Element_Not_Found"}) -- Return a placeholder to prevent further errors
	end
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	if not Element then return Element end
	table.foreach(Props, function(Property, Value)
		local success, err = pcall(function() Element[Property] = Value end)
		if not success then
			-- warn("OrionLib: Failed to set property", Property, "on", Element, ":", err)
		end
	end)
	return Element
end

local function SetChildren(Element, Children)
	if not Element then return Element end
	table.foreach(Children, function(_, Child)
		if Child then
			Child.Parent = Element
		end
	end)
	return Element
end

local function Round(Number, Factor)
	Factor = Factor or 1
	if Factor == 0 then return Number end -- Avoid division by zero
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 and Number > 0 and Factor > 0 then Result = Result + Factor end -- Adjusted for positive numbers rounding down to negative
	return Result
end

local function ReturnProperty(Object)
	if not Object or not Object.ClassName then return nil end
	if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("ViewportFrame") then
		return "BackgroundColor3"
	end
	if Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	end
	if Object:IsA("UIStroke") then
		return "Color"
	end
	if Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	end
	if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
		return "ImageColor3"
	end
	return nil -- Default case
end

local function AddThemeObject(Object, Type)
	if not Object or not Type then return Object end
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local propName = ReturnProperty(Object)
	if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
		local success, err = pcall(function() Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Type] end)
		if not success then
			-- warn("OrionLib: Failed to apply theme property", propName, "for type", Type, "on", Object, ":", err)
		end
	elseif not propName then
		-- warn("OrionLib: Could not determine property for theming object", Object, "of type", Type)
	end
	return Object
end

local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in pairs(Type) do
			if Object and Object.Parent then -- Check if object still exists
				local propName = ReturnProperty(Object)
				if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
					local success, err = pcall(function() Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Name] end)
					if not success then
						-- warn("OrionLib: Failed to set theme property", propName, "for type", Name, "on", Object, ":", err)
					end
				end
			end
		end
	end
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local success, Data = pcall(function() return HttpService:JSONDecode(Config) end)
	if not success or typeof(Data) ~= "table" then
		-- warn("OrionLib: Failed to decode or invalid config data:", Config)
		return
	end

	for a,b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function() -- Use task.spawn for safety
				local flag = OrionLib.Flags[a]
				if flag.Type == "Colorpicker" then
					if typeof(b) == "table" and b.R and b.G and b.B then
						flag:Set(UnpackColor(b))
					else
						-- warn("OrionLib: Invalid color data for flag", a, ":", b)
					end
				else
					flag:Set(b)
				end
			end)
		end
	end
end

local function SaveCfg(Name)
	if not OrionLib.SaveCfg then return end -- Check if saving is enabled

	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end
	end
	if writefile and OrionLib.Folder and Name then
		local success, err = pcall(function()
			writefile(OrionLib.Folder .. "/" .. Name .. ".txt", HttpService:JSONEncode(Data))
		end)
		if not success then
			-- warn("OrionLib: Failed to save config:", err)
		end
	else
		-- warn("OrionLib: writefile not available or Folder/Name not set. Cannot save config.")
	end
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3,Enum.UserInputType.Touch}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
	return false
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale or 0, Offset or 10) -- Ensure default offset if scale is 0
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color or Color3.fromRGB(100,100,100), -- Added default color
		BorderSizePixel = 0,
		ScrollBarThickness = Width or 6, -- Added default width
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID or "", -- Default to empty string if no ID
		BackgroundTransparency = 1
	})

	if ImageID and GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end	

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID or "", -- Default to empty string if no ID
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.Roboto,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	NotificationConfig = NotificationConfig or {} -- Ensure config is a table
	task.spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", OrionLib.Themes[OrionLib.SelectedTheme].Main or Color3.fromRGB(25, 25, 25), 0, 10), {
			Parent = NotificationParent,	
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, 0, 0, 0), -- Start off-screen to the right
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y
		}), {
			MakeElement("Stroke", OrionLib.Themes[OrionLib.SelectedTheme].Stroke or Color3.fromRGB(93, 93, 93), 1.2),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text or Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Title",
				TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text or Color3.fromRGB(240,240,240)
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.GothamSemibold,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark or Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})
		
		-- Animate in from right
		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		task.wait(NotificationConfig.Time - 0.88) -- Use task.wait
		if not NotificationFrame or not NotificationFrame.Parent then return end -- Check if still exists

		TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
		TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.6}):Play()
		task.wait(0.3)
		if not NotificationFrame or not NotificationFrame.Parent then return end

		local stroke = NotificationFrame:FindFirstChildWhichIsA("UIStroke")
		if stroke then
			TweenService:Create(stroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play()
		end
		TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play()
		TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play()
		task.wait(0.05)
		if not NotificationFrame or not NotificationFrame.Parent then return end
		
		-- Animate out to the right
		NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0), Enum.EasingDirection.In, Enum.EasingStyle.Quint, 0.8, true, function()
			if NotificationParent then NotificationParent:Destroy() end -- Destroy parent after animation
		end)
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg and OrionLib.Folder and game and game.GameId then -- Added more checks
		pcall(function()
			if isfile and readfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				local content = readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt")
				LoadCfg(content)
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for this game.", -- Simpler message
					Time = 5
				})
			end
		end)		
	end	
end	

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	-- local Loaded = false -- Unused variable
	local UIHidden = false
	local AllTabs = {} -- For the search bar

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	WindowConfig.SearchBar = WindowConfig.SearchBar or nil -- Can be a table for config or nil/false

	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.SaveConfig then
		if (isfolder and makefolder) and not isfolder(WindowConfig.ConfigFolder) then
			makefolder(WindowConfig.ConfigFolder)
		end	
	end

	local tabHolderSize = WindowConfig.SearchBar and UDim2.new(1, 0, 1, -90) or UDim2.new(1, 0, 1, -50)
	local tabHolderPos = WindowConfig.SearchBar and UDim2.new(0, 0, 0, 40) or UDim2.new(0, 0, 0, 0) -- Default position if no searchbar

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4), {
		Size = tabHolderSize,
		Position = tabHolderPos -- Apply conditional position
	}), {
		MakeElement("List"),
		MakeElement("Padding", 8, 0, 0, 8) -- Left padding removed, top padding 8
	}), "Divider")


	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		if TabHolder and TabHolder.UIListLayout then
			TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16)
		end
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), { -- Close icon
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), { -- Minimize icon
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), { -- This is the main drag area for the window
		Size = UDim2.new(1, 0, 0, 50) -- Covers the top bar
	})

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Size = UDim2.new(0, 150, 1, -50), -- Width of the tab panel
		Position = UDim2.new(0, 0, 0, 50)  -- Positioned below the top bar
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), { -- Top decorative frame
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"),	
		AddThemeObject(SetProps(MakeElement("Frame"), { -- Right decorative frame
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"),	
		AddThemeObject(SetProps(MakeElement("Frame"), { -- Stroke for the right edge
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),	
		TabHolder, -- Tabs will be listed here
		SetChildren(SetProps(MakeElement("TFrame"), { -- Bottom user info section
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50) -- At the bottom of WindowStuff
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),	
			AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), { -- User avatar frame
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. (LocalPlayer and LocalPlayer.UserId or 0) .."&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), { -- Avatar overlay
					Size = UDim2.new(1, 0, 1, 0),
				}), "Second"),
				MakeElement("Corner", 1) -- Make it round
			}), "Divider"),
			SetChildren(SetProps(MakeElement("TFrame"), { -- Avatar stroke frame
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1)
			}),
			AddThemeObject(SetProps(MakeElement("Label", (LocalPlayer and LocalPlayer.DisplayName or "Player"), WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "", 12), { -- Placeholder for subtitle, e.g., "Premium User"
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		}),
	}), "Second")

	-- @ SearchBar Integration
	if WindowConfig.SearchBar and typeof(WindowConfig.SearchBar) == "table" then
		local searchBarConfig = WindowConfig.SearchBar
		local SearchBox = Create("TextBox", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text or Color3.fromRGB(255, 255, 255),
			PlaceholderColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark or Color3.fromRGB(210,210,210),
			PlaceholderText = searchBarConfig.Default or "🔍 Search Tabs",
			Font = Enum.Font.GothamBold,
			TextWrapped = false, -- Typically search bars are single line
			Text = '',
			TextXAlignment = Enum.TextXAlignment.Left, -- Usually left aligned for search
			TextSize = 14,
			ClearTextOnFocus = searchBarConfig.ClearTextOnFocus == nil and true or searchBarConfig.ClearTextOnFocus,
			Parent = nil -- Will be parented later
		})
		local TextboxActual = AddThemeObject(SearchBox, "Text") -- Apply theme to text color

		local SearchBarFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 6), { -- Use MakeElement
			Parent = WindowStuff, -- Parent to the tab panel area
			Size = UDim2.new(1, -20, 0, 24), -- Span most of the width, leave some padding
			Position = UDim2.new(0, 10, 0, 10), -- Positioned at the top of WindowStuff
			AnchorPoint = Vector2.new(0, 0) -- Top-left anchor
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			MakeElement("Padding",0,5,0,5), -- Add some internal padding for the textbox
			TextboxActual
		}), "Main") -- Theme for the search bar background

		local function SearchHandle()
			if not SearchBox or not SearchBox.Parent then return end -- Guard clause
			local Text = string.lower(SearchBox.Text)

			for name,tabButton in pairs(AllTabs) do
				if tabButton and tabButton:IsA('TextButton') and tabButton.Parent then -- Check if tab still exists
					if Text == "" or string.find(string.lower(name), Text) then
						tabButton.Visible = true
					else
						tabButton.Visible = false
					end
				end
			end
		end
		AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle)
	end


	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
		Size = UDim2.new(1, -30, 0, 50), -- Adjusted size to fill height of topbar
		Position = UDim2.new(0, 25, 0, 0), -- Centered Y
		TextYAlignment = Enum.TextYAlignment.Center,
		Font = Enum.Font.GothamBlack,
		TextSize = 20
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1) -- At the bottom of its parent (TopBar)
	}), "Stroke")

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -172),
		Size = UDim2.new(0, 615, 0, 344),
		ClipsDescendants = true
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50), -- Top bar height
			Name = "TopBar"
		}), {
			DragPoint, -- Make the entire TopBar draggable initially
			WindowName,
			WindowTopBarLine, -- This will now be at the bottom of TopBar
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -80, 0.5, 0), -- Adjusted X, Centered Y
				AnchorPoint = Vector2.new(1, 0.5) -- Anchor to right-center
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider between min/close
					Size = UDim2.new(0, 1, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0)
				}), "Stroke"),	
				CloseBtn,
				MinimizeBtn
			}), "Second"),	
		}),
		-- DragPoint is now part of TopBar to avoid overlap issues.
		WindowStuff -- This is the main content area (tabs panel + content panel)
	}), "Main")

	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, 0) -- Y position 0 to fill height
		WindowName.Size = UDim2.new(1, -100, 0, 50) -- Adjust size for icon and buttons
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 20, 0.5, 0), -- Centered Y
			AnchorPoint = Vector2.new(0, 0.5)
		})
		WindowIcon.Parent = MainWindow.TopBar
	end	

	-- MakeDraggable(DragPoint, MainWindow) -- DragPoint is now inside TopBar, MainWindow.TopBar is the draggable part
	MakeDraggable(MainWindow, MainWindow.TopBar.DragPoint) -- Drag the whole window using the DragPoint in TopBar

	-- MobileReopenButton
	local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
		Parent = Orion,
		Size = UDim2.new(0, 40, 0, 40),
		Position = UDim2.new(0, 20, 0, 20), -- Default to top-left
		BackgroundTransparency = 0,
		BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
		Visible = false,
		AnchorPoint = Vector2.new(0,0) -- Default Anchor
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://17615525476"), {
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(0.7, 0, 0.7, 0)
		}), "Text"),
		MakeElement("Corner", 1)
	})
	
	-- Smooth drag function for MobileReopenButton
	local function MakeButtonDraggable(button) -- Renamed to avoid conflict
		local draggingDraggableButton -- Renamed to avoid conflict
		local dragStartDraggableButton -- Renamed to avoid conflict
		local startPosDraggableButton -- Renamed to avoid conflict
	
		local function updateDraggableButton(input) -- Renamed to avoid conflict
			if not button or not button.Parent then -- Guard clause
				draggingDraggableButton = false
				return
			end
			local delta = input.Position - dragStartDraggableButton
			local newPosition = UDim2.new(startPosDraggableButton.X.Scale, startPosDraggableButton.X.Offset + delta.X, startPosDraggableButton.Y.Scale, startPosDraggableButton.Y.Offset + delta.Y)
	
			-- Ensure button stays within screen bounds (approximate)
			local viewportSize = Orion.AbsoluteSize
			local buttonSize = button.AbsoluteSize
			
			newPosition = UDim2.new(
				newPosition.X.Scale,
				math.clamp(newPosition.X.Offset, 0, viewportSize.X - buttonSize.X),
				newPosition.Y.Scale,
				math.clamp(newPosition.Y.Offset, 0, viewportSize.Y - buttonSize.Y)
			)
			
			TweenService:Create(button, TweenInfo.new(0.1), {Position = newPosition}):Play() -- Faster tween for responsiveness
		end
	
		AddConnection(button.InputBegan, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				draggingDraggableButton = true
				dragStartDraggableButton = input.Position
				startPosDraggableButton = button.Position
	
				local changedConnDraggableButton
				changedConnDraggableButton = input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						draggingDraggableButton = false
						if changedConnDraggableButton then
							changedConnDraggableButton:Disconnect()
						end
					end
				end)
			end
		end)
	
		AddConnection(UserInputService.InputChanged, function(input) -- Use UserInputService for global mouse tracking
			if draggingDraggableButton and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				updateDraggableButton(input)
			end
		end)
	end
	MakeButtonDraggable(MobileReopenButton)

	AddConnection(CloseBtn.MouseButton1Click, function() -- Changed from MouseButton1Up for consistency
		if MainWindow then MainWindow.Visible = false end
		if MobileReopenButton then MobileReopenButton.Visible = true end
		UIHidden = true
		OrionLib:MakeNotification({
			Name = "Interface Hidden",
			Content = "Tap the button or press 'M' to reopen.",
			Time = 5
		})
		if typeof(WindowConfig.CloseCallback) == "function" then
			WindowConfig.CloseCallback()
		end
	end)

	AddConnection(UserInputService.InputBegan, function(Input)
		if Input.UserInputType == Enum.UserInputType.Keyboard and not UserInputService:GetFocusedTextBox() then -- Check not typing in a textbox
			if Input.KeyCode == Enum.KeyCode.M then
				UIHidden = not MainWindow.Visible -- Update UIHidden based on current visibility
				if UIHidden then -- If it was visible, now hide it
					MainWindow.Visible = false
					MobileReopenButton.Visible = true
				else -- If it was hidden, now show it
					MainWindow.Visible = true
					MobileReopenButton.Visible = false
				end
			end
		end
	end)

	AddConnection(MobileReopenButton.Activated, function()
		if MainWindow then MainWindow.Visible = true end
		if MobileReopenButton then MobileReopenButton.Visible = false end
		UIHidden = false
	end)

	AddConnection(MinimizeBtn.MouseButton1Click, function() -- Changed from MouseButton1Up
		if not MainWindow or not WindowStuff or not WindowTopBarLine or not MinimizeBtn.Ico then return end

		Minimized = not Minimized 
		if Minimized then -- Minimize
			WindowStuff.Visible = false	
			WindowTopBarLine.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870" -- Maximize icon (shows when minimized)
			MainWindow:TweenSize(UDim2.new(0, (WindowName and WindowName.TextBounds.X or 150) + 140, 0, 50), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3, true, function()
				if MainWindow then MainWindow.ClipsDescendants = true end -- Clip after animation
			end)
		else -- Maximize
			MainWindow.ClipsDescendants = false -- Unclip before animation
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338" -- Minimize icon
			MainWindow:TweenSize(UDim2.new(0, 615, 0, 344), Enum.EasingDirection.Out, Enum.EasingStyle.Quint, 0.3, true, function()
				-- Show content after expanding
				if WindowStuff then WindowStuff.Visible = true end
				if WindowTopBarLine then WindowTopBarLine.Visible = true end
			end)
		end
	end)

	local function LoadSequence()
		if MainWindow then MainWindow.Visible = false end
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 28, 0, 28),
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
			Parent = Orion,
			Size = UDim2.new(0, 0,0,0), -- AutomaticSize will handle this
			AutomaticSize = Enum.AutomaticSize.XY,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 19, 0.5, 0),
			TextXAlignment = Enum.TextXAlignment.Center,
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})
		RunService.Heartbeat:Wait() -- Wait a frame for TextBounds to update for LoadSequenceText

		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		task.wait(0.8)
		if not LoadSequenceLogo or not LoadSequenceLogo.Parent then return end
		
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X/2) - (LoadSequenceLogo.AbsoluteSize.X/4), 0.5, 0)}):Play()
		task.wait(0.1) -- Shorter wait
		if not LoadSequenceText or not LoadSequenceText.Parent then return end

		LoadSequenceText.Position = UDim2.new(0.5, (LoadSequenceLogo.AbsoluteSize.X/4) + 5, 0.5, 0) -- Position text next to logo
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
		
		task.wait(2)
		if not LoadSequenceText or not LoadSequenceText.Parent then return end
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 1}):Play()
		task.wait(0.3)

		if MainWindow then MainWindow.Visible = true end
		if LoadSequenceLogo then LoadSequenceLogo:Destroy() end
		if LoadSequenceText then LoadSequenceText:Destroy() end
	end	

	if WindowConfig.IntroEnabled then
		LoadSequence()
	else
		if MainWindow then MainWindow.Visible = true end -- Show main window directly if intro is disabled
	end	

	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = Tabconfig.PremiumOnly or false -- Should be TabConfig.PremiumOnly

		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 10, 0.5, 0),
				ImageTransparency = 0.4,
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0),
				Position = UDim2.new(0, 35, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.4,
				Name = "Title"
			}), "Text")
		})
		
		AllTabs[TabConfig.Name] = TabFrame -- Add to search bar list

		if GetIcon(TabConfig.Icon) ~= nil then
			TabFrame.Ico.Image = GetIcon(TabConfig.Icon)
		end	

		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 5), {
			Size = UDim2.new(1, -150, 1, -50), -- Main content area size
			Position = UDim2.new(0, 150, 0, 50), -- Positioned to the right of tab panel, below top bar
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15) -- Top, Right, Bottom, Left
		}), "Divider")

		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			if Container and Container.UIListLayout then
				Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30)
			end
		end)

		if FirstTab then
			FirstTab = false
			TabFrame.Ico.ImageTransparency = 0
			TabFrame.Title.TextTransparency = 0
			TabFrame.Title.Font = Enum.Font.GothamBlack
			Container.Visible = true
		end

		AddConnection(TabFrame.MouseButton1Click, function()
			for _, TabChild in next, TabHolder:GetChildren() do
				if TabChild:IsA("TextButton") and TabChild:FindFirstChild("Title") and TabChild:FindFirstChild("Ico") then
					TabChild.Title.Font = Enum.Font.GothamSemibold
					TweenService:Create(TabChild.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
					TweenService:Create(TabChild.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
				end	
			end
			for _, ItemContainerChild in next, MainWindow:GetChildren() do
				if ItemContainerChild.Name == "ItemContainer" then
					ItemContainerChild.Visible = false
				end	
			end	
			TweenService:Create(TabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
			TweenService:Create(TabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
			TabFrame.Title.Font = Enum.Font.GothamBlack
			Container.Visible = true	
		end)

		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -24, 1, 0), -- Adjusted for padding
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
					if LabelFrame and LabelFrame.Content then LabelFrame.Content.Text = ToChange end
				end
				return LabelFunction
			end
			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Text"
				Content = Content or "Content"

				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30), -- Initial size, will be adjusted
					BackgroundTransparency = 0.7,
					Parent = ItemParent,
					AutomaticSize = Enum.AutomaticSize.Y -- Allow Y to auto-adjust
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -24, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0), -- Width, Y will be automatic
						Position = UDim2.new(0, 12, 0, 28), -- Position below title
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true,
						AutomaticSize = Enum.AutomaticSize.Y -- Content label autosizes Y
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("UIPadding", {PaddingBottom = UDim.new(0,10)}) -- Add padding at the bottom
				}), "Second")
				
				-- No need for connection to adjust ParagraphFrame size due to AutomaticSize on ParagraphFrame itself.
				-- Content label's AutomaticSize.Y will push the ParagraphFrame's size.

				if ParagraphFrame.Content then ParagraphFrame.Content.Text = Content end

				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
					if ParagraphFrame and ParagraphFrame.Content then ParagraphFrame.Content.Text = ToChange end
				end
				return ParagraphFunction
			end	
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function() end
				ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://3944703587"

				local Button = {}
				local ButtonFrame = nil -- Forward declare

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 33),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
						Size = UDim2.new(1, -42, 1, 0), -- Make space for icon
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -30, 0.5, 0), -- Centered Y
						AnchorPoint = Vector2.new(1, 0.5)
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")

				AddConnection(Click.MouseEnter, function()
					if ButtonFrame and ButtonFrame.Parent then TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 10)}):Play() end
				end)

				AddConnection(Click.MouseLeave, function()
					if ButtonFrame and ButtonFrame.Parent then TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play() end
				end)

				AddConnection(Click.MouseButton1Click, function() -- Changed to Click
					if ButtonFrame and ButtonFrame.Parent then TweenService:Create(ButtonFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 20, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 20, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 20)}):Play() end
					task.spawn(ButtonConfig.Callback)
					task.wait(0.1)
					if ButtonFrame and ButtonFrame.Parent then TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 10)}):Play() end
				end)
				
				function Button:Set(ButtonText)
					if ButtonFrame and ButtonFrame.Content then ButtonFrame.Content.Text = ButtonText end
				end	

				return Button
			end	
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false
				ToggleConfig.Callback = ToggleConfig.Callback or function() end
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
				ToggleConfig.Flag = ToggleConfig.Flag or nil
				ToggleConfig.Save = ToggleConfig.Save or false

				local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"} -- Added Type
				local ToggleFrame = nil -- Forward declare
				local ToggleBox = nil -- Forward declare

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -24 - 12, 0.5, 0), -- Adjusted for right padding (12) of parent
					AnchorPoint = Vector2.new(1, 0.5) -- Anchor to right-center
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = ToggleConfig.Color,
						Name = "Stroke",
						Transparency = 0.5
					}),
					SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						Name = "Ico"
					}),
				})

				ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					MakeElement("UIPadding", {PaddingRight = UDim.new(0,12)}), -- Add right padding
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
						Size = UDim2.new(1, -48, 1, 0), -- Adjusted for toggle box and padding
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")

				function Toggle:Set(Value)
					self.Value = Value
					if not ToggleBox or not ToggleBox.Parent then return end

					TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = self.Value and ToggleConfig.Color or OrionLib.Themes.Default.Divider}):Play()
					TweenService:Create(ToggleBox.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = self.Value and ToggleConfig.Color or OrionLib.Themes.Default.Stroke}):Play()
					TweenService:Create(ToggleBox.Ico, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = self.Value and 0 or 1, Size = self.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)}):Play()
					ToggleConfig.Callback(self.Value)
					if self.Save then SaveCfg(game.GameId) end -- Save on set
				end	

				Toggle:Set(Toggle.Value) -- Initialize

				AddConnection(Click.MouseEnter, function()
					if ToggleFrame and ToggleFrame.Parent then TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 10)}):Play() end
				end)

				AddConnection(Click.MouseLeave, function()
					if ToggleFrame and ToggleFrame.Parent then TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play() end
				end)

				AddConnection(Click.MouseButton1Click, function() -- Changed to Click
					if ToggleFrame and ToggleFrame.Parent then TweenService:Create(ToggleFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 20, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 20, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 20)}):Play() end
					Toggle:Set(not Toggle.Value) -- This will also call SaveCfg if self.Save is true
					task.wait(0.1)
					if ToggleFrame and ToggleFrame.Parent then TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 10)}):Play() end
				end)

				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end	
				return Toggle
			end
			function ElementFunction:AddSlider(SliderConfig)
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0
				SliderConfig.Max = SliderConfig.Max or 100
				SliderConfig.Increment = SliderConfig.Increment or 1
				SliderConfig.Default = SliderConfig.Default or SliderConfig.Min -- Default to Min if not specified
				SliderConfig.Callback = SliderConfig.Callback or function() end
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
				SliderConfig.Flag = SliderConfig.Flag or nil
				SliderConfig.Save = SliderConfig.Save or false

				local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"} -- Added Type
				local DraggingSlider = false -- Renamed
				local SliderFrame, SliderBar, SliderDrag -- Forward declare

				SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Size = UDim2.new(0, 0, 1, 0), -- Initial size, will be updated
					BackgroundTransparency = 0.3,
					ClipsDescendants = true
				}), {
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0), -- Use full height
						Position = UDim2.new(0, 12, 0, 0), -- Adjusted position
						TextYAlignment = Enum.TextYAlignment.Center,
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextTransparency = 0 -- Solid text on drag part
					}), "Text")
				})

				SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Size = UDim2.new(1, -24, 0, 26), -- Width - padding, fixed height
					Position = UDim2.new(0, 12, 0, 30), -- Positioned below title
					BackgroundTransparency = 0.9
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = SliderConfig.Color
					}),
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0), -- Use full height
						Position = UDim2.new(0, 12, 0, 0), -- Adjusted position
						TextYAlignment = Enum.TextYAlignment.Center,
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextTransparency = 0.8 -- Faded text on bar
					}), "Text"),
					SliderDrag
				})

				SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(1, 0, 0, 65), -- Fixed height for slider
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
						Size = UDim2.new(1, -24, 0, 14), -- Adjusted for padding
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar
				}), "Second")
				
				function Slider:Set(ValueInput)
					local clampedValue = math.clamp(Round(ValueInput, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
					self.Value = clampedValue
					
					if not SliderBar or not SliderBar.Parent or not SliderDrag or not SliderDrag.Parent then return end

					local percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
					if (SliderConfig.Max - SliderConfig.Min) == 0 then percentage = 0 end -- Avoid division by zero if Min == Max

					TweenService:Create(SliderDrag,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.fromScale(percentage, 1)}):Play()
					
					local valueText = tostring(self.Value) .. " " .. SliderConfig.ValueName
					if SliderBar.Value then SliderBar.Value.Text = valueText end
					if SliderDrag.Value then SliderDrag.Value.Text = valueText end
					
					SliderConfig.Callback(self.Value)
					if self.Save then SaveCfg(game.GameId) end -- Save on set
				end

				local inputBeganConn, inputChangedConn, inputEndedConn

				inputBeganConn = AddConnection(SliderBar.InputBegan, function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then	
						DraggingSlider = true	
						-- Immediately update on click
						if SliderBar and SliderBar.AbsolutePosition and Mouse then
							local SizeScale = math.clamp((Mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
							Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))	
						end
					end	
				end)
				inputEndedConn = AddConnection(UserInputService.InputEnded, function(Input) -- Use UserInputService for global release
					if (Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch) and DraggingSlider then	
						DraggingSlider = false	
					end	
				end)

				inputChangedConn = AddConnection(UserInputService.InputChanged, function(Input) -- Use UserInputService for global drag
					if DraggingSlider and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then	
						if SliderBar and SliderBar.AbsolutePosition and Mouse then
							local SizeScale = math.clamp((Mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
							Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))	
						end
					end
				end)
				
				-- Initial set
				Slider:Set(Slider.Value)

				if SliderConfig.Flag then				
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end
				return Slider
			end	
			function ElementFunction:AddDropdown(DropdownConfig)
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default or (DropdownConfig.Options[1] or "") -- Default to first option or empty
				DropdownConfig.Callback = DropdownConfig.Callback or function() end
				DropdownConfig.Flag = DropdownConfig.Flag or nil
				DropdownConfig.Save = DropdownConfig.Save or false

				local Dropdown = {Value = DropdownConfig.Default, Options = DropdownConfig.Options, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save}
				local MaxElements = 5
				local DropdownFrame, DropdownContainer, DropdownList -- Forward declare

				if not table.find(Dropdown.Options, Dropdown.Value) and #Dropdown.Options > 0 then
					Dropdown.Value = Dropdown.Options[1] -- Default to first if current default not in options
				elseif #Dropdown.Options == 0 then
					Dropdown.Value = "..." -- Placeholder if no options
				end

				DropdownList = MakeElement("List")

				DropdownContainer = AddThemeObject(SetProps(SetChildren(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
					DropdownList,
					MakeElement("UIPadding", {PaddingTop = UDim.new(0,2), PaddingBottom = UDim.new(0,2)}) -- Padding for items in scroll
				}), {
					Position = UDim2.new(0, 0, 0, 38), -- Positioned below the main dropdown bar
					Size = UDim2.new(1, 0, 0, 0), -- Height will be tweened
					ClipsDescendants = true,
					Visible = false -- Initially hidden
				}), "Divider")

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Initial height for the main bar
					Parent = ItemParent,
					ClipsDescendants = true -- Important for hiding the list initially
				}), {
					SetChildren(SetProps(MakeElement("TFrame"), { -- Top clickable part
						Size = UDim2.new(1, 0, 0, 38),
						Name = "F" -- Frame for top part
					}),{
						AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
							Size = UDim2.new(1, -120, 1, 0), -- Make space for selected text and icon
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), { -- Arrow icon
							Size = UDim2.new(0, 20, 0, 20),
							AnchorPoint = Vector2.new(1, 0.5), -- Anchor to right-center
							Position = UDim2.new(1, -12, 0.5, 0), -- Positioned to the right
							ImageColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark or Color3.fromRGB(240, 240, 240),
							Name = "Ico"
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Label", "Selected", 13), {
							Size = UDim2.new(0, 80, 1, 0), -- Fixed width for selected text
							Position = UDim2.new(1, -35 - 12, 0, 0), -- Positioned before the icon
							Font = Enum.Font.Gotham,
							Name = "Selected",
							TextXAlignment = Enum.TextXAlignment.Right
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line when open
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false -- Initially hidden
						}), "Stroke"),	
						Click
					}),
					DropdownContainer, -- This is now correctly parented
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("Corner",0,5) -- Ensure corner applies to the main frame
				}), "Second")
				DropdownContainer.Parent = DropdownFrame -- Ensure correct parenting

				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
					if DropdownContainer and DropdownList and DropdownContainer.Visible then
						DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + 4)
						-- If dropdown is open, adjust its height
						if Dropdown.Toggled then
							local listHeight = DropdownList.AbsoluteContentSize.Y + 4
							local containerHeight = math.min(listHeight, MaxElements * 28 + 4) -- Cap height
							DropdownContainer.Size = UDim2.new(1,0,0, containerHeight)
							DropdownFrame.Size = UDim2.new(1, 0, 0, 38 + containerHeight)
						end
					end
				end)	

				local function AddOptionsToDropdown(OptionsTable) -- Renamed
					for _, OptionText in pairs(OptionsTable) do
						local OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button"), {
							MakeElement("Corner", 0, 6),
							AddThemeObject(SetProps(MakeElement("Label", OptionText, 13, 0.4), {
								Position = UDim2.new(0, 8, 0, 0),
								Size = UDim2.new(1, -16, 1, 0), -- Adjusted for padding
								Name = "Title"
							}), "Text")
						}), {
							Parent = DropdownList, -- Parent to the list layout
							Size = UDim2.new(1, 0, 0, 28),
							BackgroundTransparency = 1,
							ClipsDescendants = true
						}), "Divider")

						AddConnection(OptionBtn.MouseButton1Click, function()
							Dropdown:Set(OptionText)
							-- SaveCfg(game.GameId) -- Moved to Set function
							-- Close dropdown after selection
							Dropdown.Toggled = false
							if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Line then DropdownFrame.F.Line.Visible = false end
							if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Ico then TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Rotation = 0}):Play() end
							if DropdownContainer then DropdownContainer.Visible = false end
							if DropdownFrame then TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, 38)}):Play() end
						end)
						Dropdown.Buttons[OptionText] = OptionBtn
					end
					-- After adding all options, if the dropdown is meant to be open, trigger a resize.
					if Dropdown.Toggled and DropdownContainer and DropdownList then
						RunService.Heartbeat:Wait() -- Wait a frame for layout to update
						local listHeight = DropdownList.AbsoluteContentSize.Y + 4
						local containerHeight = math.min(listHeight, MaxElements * 28 + 4)
						DropdownContainer.Size = UDim2.new(1,0,0, containerHeight)
						DropdownFrame.Size = UDim2.new(1, 0, 0, 38 + containerHeight)
					end
				end	

				function Dropdown:Refresh(NewOptions, DeleteOld)
					if DeleteOld then
						for _,btn in pairs(Dropdown.Buttons) do
							if btn and btn.Parent then btn:Destroy() end
						end	
						table.clear(Dropdown.Options)
						table.clear(Dropdown.Buttons)
					end
					self.Options = NewOptions or {} -- Ensure options is a table
					AddOptionsToDropdown(self.Options)
					-- Re-set the value to ensure correct display if options changed
					local currentValue = self.Value
					if #self.Options > 0 and not table.find(self.Options, currentValue) then
						self:Set(self.Options[1])
					else
						self:Set(currentValue) -- This will handle "..." if options are empty
					end
				end	

				function Dropdown:Set(NewValue)
					if not DropdownFrame or not DropdownFrame.F or not DropdownFrame.F.Selected then return end
					
					if #self.Options == 0 then
						self.Value = "..."
						DropdownFrame.F.Selected.Text = self.Value
						return
					end

					if not table.find(self.Options, NewValue) then
						-- warn("OrionLib: Value '" .. tostring(NewValue) .. "' not in dropdown options. Setting to first option.")
						NewValue = self.Options[1] -- Default to first option if value not found
						if not NewValue then -- If still no valid option (e.g., options list became empty)
							self.Value = "..."
							DropdownFrame.F.Selected.Text = self.Value
							return
						end
					end

					self.Value = NewValue
					DropdownFrame.F.Selected.Text = self.Value

					for optVal, btn in pairs(self.Buttons) do
						if btn and btn.Parent and btn:FindFirstChild("Title") then
							if optVal == self.Value then
								TweenService:Create(btn,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{BackgroundTransparency = 0}):Play()
								TweenService:Create(btn.Title,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{TextTransparency = 0}):Play()
							else
								TweenService:Create(btn,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{BackgroundTransparency = 1}):Play()
								TweenService:Create(btn.Title,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{TextTransparency = 0.4}):Play()
							end
						end
					end	
					DropdownConfig.Callback(self.Value)
					if self.Save then SaveCfg(game.GameId) end -- Save on set
				end

				AddConnection(Click.MouseButton1Click, function()
					if not DropdownFrame or not DropdownFrame.F or not DropdownContainer or not DropdownList then return end

					Dropdown.Toggled = not Dropdown.Toggled
					DropdownFrame.F.Line.Visible = Dropdown.Toggled
					DropdownContainer.Visible = Dropdown.Toggled
					TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Rotation = Dropdown.Toggled and 180 or 0}):Play()
					
					if Dropdown.Toggled then
						RunService.Heartbeat:Wait() -- Allow list to populate and calculate size
						local listHeight = DropdownList.AbsoluteContentSize.Y + 4 -- Padding
						local containerHeight = math.min(listHeight, MaxElements * 28 + 4) -- Cap height
						DropdownContainer.Size = UDim2.new(1,0,0,containerHeight)
						TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, 38 + containerHeight)}):Play()
					else
						TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, 38)}):Play()
					end
				end)

				Dropdown:Refresh(Dropdown.Options, false) -- Initial population
				-- Dropdown:Set(Dropdown.Value) -- Set is called within Refresh now

				if DropdownConfig.Flag then				
					OrionLib.Flags[DropdownConfig.Flag] = Dropdown
				end
				return Dropdown
			end
			function ElementFunction:AddBind(BindConfig)
				BindConfig = BindConfig or {}
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
				BindConfig.Hold = BindConfig.Hold or false
				BindConfig.Callback = BindConfig.Callback or function() end
				BindConfig.Flag = BindConfig.Flag or nil
				BindConfig.Save = BindConfig.Save or false

				local Bind = {Value = BindConfig.Default, Binding = false, Type = "Bind", Save = BindConfig.Save}
				local HoldingBind = false -- Renamed
				local BindFrame, BindBox -- Forward declare

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24), -- Initial small size
					Position = UDim2.new(1, -12, 0.5, 0), -- Positioned to the right
					AnchorPoint = Vector2.new(1, 0.5) -- Anchor to right-center
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "", 14), { -- Text will be set by :Set
						Size = UDim2.new(1, -16, 1, 0), -- Padding inside box
						Position = UDim2.new(0,8,0,0),
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
						Name = "Value"
					}), "Text")
				}), "Main")

				BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
						Size = UDim2.new(1, -12 - 50, 1, 0), -- Make space for bind box
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")

				AddConnection(BindBox.Value:GetPropertyChangedSignal("Text"), function()
					if BindBox and BindBox.Parent and BindBox.Value then
						RunService.Heartbeat:Wait() -- Wait for TextBounds to update
						local newWidth = math.max(24, BindBox.Value.TextBounds.X + 16) -- Min width 24
						TweenService:Create(BindBox, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, newWidth, 0, 24)}):Play()
					end
				end)

				AddConnection(Click.MouseButton1Click, function(Input) -- Changed to Click from InputEnded
					if Bind.Binding then return end -- Already binding
					Bind.Binding = true
					if BindBox and BindBox.Value then BindBox.Value.Text = "..." end -- Indicate binding
				end)
				
				local bindInputConnection
				bindInputConnection = AddConnection(UserInputService.InputBegan, function(InputObj, GameProcessed)
					if GameProcessed and InputObj.UserInputType ~= Enum.UserInputType.MouseButton1 then return end -- Ignore if game processed, unless it's a mouse click for unbinding
					
					if Bind.Binding then
						if InputObj.UserInputType == Enum.UserInputType.MouseButton1 then -- Click again to cancel/clear
							Bind:Set(Enum.KeyCode.Unknown) -- Set to Unknown or allow clearing
							Bind.Binding = false -- Stop binding
						elseif not CheckKey(BlacklistedKeys, InputObj.KeyCode) then
							Bind:Set(InputObj.KeyCode)
							Bind.Binding = false -- Stop binding
						elseif CheckKey(WhitelistedMouse, InputObj.UserInputType) then
							Bind:Set(InputObj.UserInputType)
							Bind.Binding = false -- Stop binding
						end
						-- SaveCfg(game.GameId) -- Moved to Set
						return -- Consume this input if we were binding
					end

					if not UserInputService:GetFocusedTextBox() then
						if (InputObj.KeyCode == Bind.Value or InputObj.UserInputType == Bind.Value) and Bind.Value ~= Enum.KeyCode.Unknown then
							if BindConfig.Hold then
								HoldingBind = true
								BindConfig.Callback(HoldingBind)
							else
								BindConfig.Callback()
							end
						end
					end
				end)

				AddConnection(UserInputService.InputEnded, function(InputObj)
					if not UserInputService:GetFocusedTextBox() then
						if (InputObj.KeyCode == Bind.Value or InputObj.UserInputType == Bind.Value) and Bind.Value ~= Enum.KeyCode.Unknown then
							if BindConfig.Hold and HoldingBind then
								HoldingBind = false
								BindConfig.Callback(HoldingBind)
							end
						end
					end
				end)

				AddConnection(Click.MouseEnter, function()
					if BindFrame and BindFrame.Parent then TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 10, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 10)}):Play() end
				end)

				AddConnection(Click.MouseLeave, function()
					if BindFrame and BindFrame.Parent then TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play() end
				end)
				
				function Bind:Set(KeyEnum)
					Bind.Binding = false -- Ensure binding is set to false
					self.Value = KeyEnum or Enum.KeyCode.Unknown -- Default to Unknown if nil
					if BindBox and BindBox.Value then
						if self.Value == Enum.KeyCode.Unknown then
							BindBox.Value.Text = "None"
						elseif typeof(self.Value) == "EnumItem" then
							BindBox.Value.Text = string.gsub(tostring(self.Value.Name), "MouseButton", "MB")
						else
							BindBox.Value.Text = "ERR" -- Should not happen
						end
					end
					if self.Save then SaveCfg(game.GameId) end -- Save on set
				end

				Bind:Set(BindConfig.Default) -- Initialize text
				if BindConfig.Flag then				
					OrionLib.Flags[BindConfig.Flag] = Bind
				end
				return Bind
			end	
			function ElementFunction:AddTextbox(TextboxConfig)
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
				TextboxConfig.Placeholder = TextboxConfig.Placeholder or "Input..." -- New Placeholder option
				TextboxConfig.TextDisappearOnFocus = TextboxConfig.TextDisappearOnFocus or false -- Renamed from TextDisappear for clarity
				TextboxConfig.NumbersOnly = TextboxConfig.NumbersOnly or false -- New option for numbers only
				TextboxConfig.Callback = TextboxConfig.Callback or function() end
				TextboxConfig.Flag = TextboxConfig.Flag or nil -- Added Flag
				TextboxConfig.Save = TextboxConfig.Save or false -- Added Save

				local TextboxFrame, TextContainer, TextboxActual -- Forward declare
				local Textbox = {Value = TextboxConfig.Default, Type = "Textbox", Save = TextboxConfig.Save} -- For saving

				TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1, -16, 1, -10), -- Padding applied by parent's UIPadding
					Position = UDim2.new(0,0,0,0),
					BackgroundTransparency = 1,
					TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text or Color3.fromRGB(255, 255, 255),
					PlaceholderColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark or Color3.fromRGB(210,210,210),
					PlaceholderText = TextboxConfig.Placeholder,
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Left, -- Usually left-aligned for input
					TextYAlignment = Enum.TextYAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = TextboxConfig.TextDisappearOnFocus, -- Use the renamed config
					Text = TextboxConfig.Default
				}), "Text")

				TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 150, 0, 24), -- Default width, can expand
					Position = UDim2.new(1, -12, 0.5, 0), -- Positioned to the right
					AnchorPoint = Vector2.new(1, 0.5), -- Anchor to right-center
					ClipsDescendants = true,
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("UIPadding", {PaddingLeft = UDim.new(0,8), PaddingRight = UDim2.new(0,8), PaddingTop = UDim.new(0,5), PaddingBottom = UDim.new(0,5)}),
					TextboxActual
				}), "Main")


				TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
						Size = UDim2.new(1, -12 - 160, 1, 0), -- Make space for textbox container
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer
					-- No global click, user clicks directly on TextboxActual or TextContainer
				}), "Second")

				AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
					if not TextContainer or not TextContainer.Parent or not TextboxActual or not TextboxActual.Parent then return end
					
					local newText = TextboxActual.Text
					if TextboxConfig.NumbersOnly then
						newText = string.gsub(newText, "[^%d%.%-]", "") -- Allow digits, period, and minus sign
						if TextboxActual.Text ~= newText then
							TextboxActual.Text = newText -- Correct the text if invalid chars were typed
						end
					end
					Textbox.Value = newText -- Update internal value

					RunService.Heartbeat:Wait() -- Wait for TextBounds to update
					local newWidth = math.max(80, TextboxActual.TextBounds.X + 24) -- Min width 80, +16 for padding
					newWidth = math.min(newWidth, TextboxFrame.AbsoluteSize.X - TextboxFrame.Content.AbsoluteSize.X - 30) -- Max width to not overflow
					TweenService:Create(TextContainer, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, newWidth, 0, 24)}):Play()
				end)

				AddConnection(TextboxActual.FocusLost, function(enterPressed)
					if enterPressed or not TextboxActual:IsFocused() then -- Callback on enter or actual focus lost
						TextboxConfig.Callback(TextboxActual.Text)
						Textbox.Value = TextboxActual.Text -- Ensure internal value is set
						if Textbox.Save then SaveCfg(game.GameId) end -- Save on focus lost
					end
				end)
				
				function Textbox:Set(newVal)
					self.Value = tostring(newVal)
					if TextboxActual and TextboxActual.Parent then
						TextboxActual.Text = self.Value
					end
					TextboxConfig.Callback(self.Value) -- Also call callback on programmatic set
					if self.Save then SaveCfg(game.GameId) end
				end
				
				TextboxActual.Text = Textbox.Value -- Initialize

				if TextboxConfig.Flag then
					OrionLib.Flags[TextboxConfig.Flag] = Textbox
				end
				return Textbox
			end
			function ElementFunction:AddColorpicker(ColorpickerConfig)
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
				ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
				ColorpickerConfig.Save = ColorpickerConfig.Save or false

				local ColorH, ColorS, ColorV = table.unpack( {Color3.toHSV(ColorpickerConfig.Default)} )
				local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}
				local ColorpickerFrame, ColorpickerBox, Color, Hue, ColorSelection, HueSelection -- Forward declare
				local ColorInputConn, HueInputConn -- For RenderStepped connections

				ColorSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(ColorS,0, 1-ColorV,0), -- S is X, V is Y (inverted)
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})

				HueSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0.5, 0, ColorH, 0), -- H is Y
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})

				Color = Create("ImageLabel", { -- Saturation/Value Box
					Size = UDim2.new(1, -35, 1, 0), -- Fill available space minus hue bar and padding
					Image = "rbxassetid://4155801252", -- Checkerboard for transparency
					BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1), -- Base color updates with Hue
					ZIndex = 2
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					Create("UIGradient", { -- Saturation gradient (white to transparent)
						Rotation = 90,
						Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(255,255,255)),ColorSequenceKeypoint.new(1, Color3.new(1,1,1))},
						Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0,0), NumberSequenceKeypoint.new(1,1)}
					}),
					Create("UIGradient", { -- Value gradient (black to transparent from bottom)
						Rotation = 0,
						Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(0,0,0)), ColorSequenceKeypoint.new(1, Color3.fromRGB(0,0,0))},
						Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0,1), NumberSequenceKeypoint.new(1,0)}
					}),
					ColorSelection
				})

				Hue = Create("Frame", { -- Hue Bar
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -20, 0, 0), -- Positioned to the right
					ZIndex = 2
				}, {
					Create("UIGradient", {Rotation = 90, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),ColorSequenceKeypoint.new(1/6, Color3.fromRGB(255,255,0)),ColorSequenceKeypoint.new(2/6, Color3.fromRGB(0,255,0)),ColorSequenceKeypoint.new(3/6, Color3.fromRGB(0,255,255)),ColorSequenceKeypoint.new(4/6, Color3.fromRGB(0,0,255)),ColorSequenceKeypoint.new(5/6, Color3.fromRGB(255,0,255)),ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255,0,0))}}),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					HueSelection
				})

				local ColorpickerContainer = Create("Frame", {
					Position = UDim2.new(0, 0, 0, 38), -- Below the main bar
					Size = UDim2.new(1, 0, 0, 100), -- Fixed height for picker area
					BackgroundTransparency = 1,
					ClipsDescendants = true,
					Visible = false -- Initially hidden
				}, {
					Color, -- Saturation/Value box first for layout
					Hue,   -- Hue bar next to it
					MakeElement("UIPadding", {PaddingLeft = UDim.new(0, 10), PaddingRight = UDim.new(0, 10), PaddingBottom = UDim.new(0, 10), PaddingTop = UDim.new(0, 10)})
				})

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), { -- Show current color
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Main") -- Use Main for BG, or a custom color if needed

				ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Initial size
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
					SetChildren(SetProps(MakeElement("TFrame"), { -- Top clickable part
						Size = UDim2.new(1, 0, 0, 38),
						Name = "F"
					}),{
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
							Size = UDim2.new(1, -48, 1, 0), -- Space for color box
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Divider line
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false
						}), "Stroke"),	
					}),
					ColorpickerContainer,
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")
				ColorpickerContainer.Parent = ColorpickerFrame -- Ensure correct parenting

				local function UpdateColorPickerDisplay()
					if not ColorpickerBox or not ColorpickerBox.Parent then return end
					local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
					ColorpickerBox.BackgroundColor3 = newColor
					if Color and Color.Parent then Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) end -- Update base for S/V box
					
					Colorpicker.Value = newColor -- Update internal value
					ColorpickerConfig.Callback(newColor)
					if Colorpicker.Save then SaveCfg(game.GameId) end
				end
				
				Colorpicker.Value = ColorpickerConfig.Default -- Initialize
				UpdateColorPickerDisplay() -- Initial display update

				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled
					ColorpickerContainer.Visible = Colorpicker.Toggled
					ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
					local targetSizeY = Colorpicker.Toggled and (38 + ColorpickerContainer.Size.Y.Offset + ColorpickerContainer.UIPadding.PaddingTop.Offset + ColorpickerContainer.UIPadding.PaddingBottom.Offset) or 38
					TweenService:Create(ColorpickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, targetSizeY)}):Play()
				end)
				
				local svDragging, hueDragging = false, false

				AddConnection(Color.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						svDragging = true
						local ColorX = math.clamp((Mouse.X - Color.AbsolutePosition.X) / Color.AbsoluteSize.X, 0, 1)
						local ColorY = math.clamp((Mouse.Y - Color.AbsolutePosition.Y) / Color.AbsoluteSize.Y, 0, 1)
						ColorS = ColorX
						ColorV = 1 - ColorY -- Y is inverted for V
						ColorSelection.Position = UDim2.new(ColorS, 0, 1-ColorV, 0)
						UpdateColorPickerDisplay()
					end
				end)
				AddConnection(UserInputService.InputChanged, function(input)
					if svDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						if not Color or not Color.Parent then svDragging = false return end
						local ColorX = math.clamp((Mouse.X - Color.AbsolutePosition.X) / Color.AbsoluteSize.X, 0, 1)
						local ColorY = math.clamp((Mouse.Y - Color.AbsolutePosition.Y) / Color.AbsoluteSize.Y, 0, 1)
						ColorS = ColorX
						ColorV = 1 - ColorY
						ColorSelection.Position = UDim2.new(ColorS, 0, 1-ColorV, 0)
						UpdateColorPickerDisplay()
					end
				end)
				AddConnection(UserInputService.InputEnded, function(input)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and svDragging then
						svDragging = false
					end
				end)


				AddConnection(Hue.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						hueDragging = true
						local HueY = math.clamp((Mouse.Y - Hue.AbsolutePosition.Y) / Hue.AbsoluteSize.Y, 0, 1)
						ColorH = HueY -- Hue is directly Y
						HueSelection.Position = UDim2.new(0.5, 0, ColorH, 0)
						UpdateColorPickerDisplay()
					end
				end)
				AddConnection(UserInputService.InputChanged, function(input)
					if hueDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						if not Hue or not Hue.Parent then hueDragging = false return end
						local HueY = math.clamp((Mouse.Y - Hue.AbsolutePosition.Y) / Hue.AbsoluteSize.Y, 0, 1)
						ColorH = HueY
						HueSelection.Position = UDim2.new(0.5, 0, ColorH, 0)
						UpdateColorPickerDisplay()
					end
				end)
				AddConnection(UserInputService.InputEnded, function(input)
					if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and hueDragging then
						hueDragging = false
					end
				end)

				function Colorpicker:Set(NewColorValue) -- 외부에서 호출될 수 있는 Set 함수
					self.Value = NewColorValue
					ColorH, ColorS, ColorV = table.unpack( {Color3.toHSV(self.Value)} )
					if ColorSelection and ColorSelection.Parent then ColorSelection.Position = UDim2.new(ColorS,0,1-ColorV,0) end
					if HueSelection and HueSelection.Parent then HueSelection.Position = UDim2.new(0.5,0,ColorH,0) end
					UpdateColorPickerDisplay() -- This also calls callback and saves
				end

				if ColorpickerConfig.Flag then				
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end
				return Colorpicker
			end	
			return ElementFunction	
		end	

		local ElementFunction = {}

		function ElementFunction:AddSection(SectionConfig)
			SectionConfig = SectionConfig or {}
			SectionConfig.Name = SectionConfig.Name or "Section"

			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 0, 0), -- Height will be automatic
				AutomaticSize = Enum.AutomaticSize.Y, -- Auto Y size
				Parent = Container
			}), {
				AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
					Size = UDim2.new(1, 0, 0, 16), -- Fixed height for title
					Position = UDim2.new(0, 0, 0, 3),
					Font = Enum.Font.GothamSemibold
				}), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), {
					AnchorPoint = Vector2.new(0, 0),
					Size = UDim2.new(1, 0, 0, 0), -- Height automatic
					AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0, 0, 0, 23), -- Position below title (16 height + 3 top + 4 spacing)
					Name = "Holder"
				}), {
					MakeElement("List", 0, 6) -- Padding between items in section
				}),
				MakeElement("UIPadding", {PaddingBottom = UDim.new(0,10)}) -- Padding at the bottom of the section frame
			})
			
			-- No need for AbsoluteContentSize connection due to AutomaticSize on SectionFrame and Holder.

			local SectionFunction = {}
			for i, v in next, GetElements(SectionFrame.Holder) do
				SectionFunction[i] = v	
			end
			return SectionFunction
		end	

		for i, v in next, GetElements(Container) do
			ElementFunction[i] = v	
		end

		if TabConfig.PremiumOnly and WindowConfig.HidePremium then -- Check HidePremium as well
			for i, v in next, ElementFunction do
				ElementFunction[i] = function() 
					OrionLib:MakeNotification({Name="Premium", Content="This is a premium feature."})
					-- warn("OrionLib: Attempted to access premium feature without premium.") 
				end
			end	
			if Container:FindFirstChild("UIListLayout") then Container:FindFirstChild("UIListLayout"):Destroy() end
			if Container:FindFirstChild("UIPadding") then Container:FindFirstChild("UIPadding"):Destroy() end
			
			local premiumNoticeParent = Container -- Or specific parent if needed

			SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 1, 0),
				Parent = premiumNoticeParent -- Use the correct parent
			}), {
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), { -- Lock icon
					Size = UDim2.new(0, 32, 0, 32), -- Larger icon
					Position = UDim2.new(0.5, 0, 0.3, 0), -- Centered X, upper Y
					AnchorPoint = Vector2.new(0.5,0.5),
					ImageTransparency = 0.2
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Premium Feature", 18), { -- Larger title
					Size = UDim2.new(1, -40, 0, 20),
					Position = UDim2.new(0, 20, 0.45, 0), -- Below icon
					TextXAlignment = Enum.TextXAlignment.Center,
					Font = Enum.Font.GothamBold,
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "This content is available for premium users only. Please upgrade to access.", 14), {
					Size = UDim2.new(1, -40, 0, 40),
					Position = UDim2.new(0, 20, 0.55, 0), -- Below title
					TextWrapped = true,
					TextXAlignment = Enum.TextXAlignment.Center,
					TextTransparency = 0.2
				}), "Text")
			})
		end
		return ElementFunction	
	end	
	
	return TabFunction
end	

function OrionLib:Destroy()
	if Orion then
		Orion:Destroy()
		Orion = nil -- Clear reference
	end
	for _, Connection in next, OrionLib.Connections do
		if Connection and typeof(Connection.Disconnect) == "function" then
			Connection:Disconnect()
		end
	end
	OrionLib.Connections = {}
	OrionLib.ThemeObjects = {}
	OrionLib.Flags = {}
	-- print("OrionLib: Destroyed.")
end

return OrionLib
