local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
getgenv().gethui = function() return game.CoreGui end

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
			Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

--Feather Icons https://github.com/evoincorp/lucideblox/tree/master/src/modules/util - Created by 7kayoh
local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
    warn("[OrionLib] Failed to fetch icons. Response:", Response)
end	

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end	

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
if syn then
	syn.protect_gui(Orion)
	Orion.Parent = game.CoreGui
else
	Orion.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
end

function OrionLib:IsRunning()
	if gethui then
		return Orion.Parent == gethui()
	else
		return Orion.Parent == game:GetService("CoreGui")
	end

end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while (OrionLib:IsRunning()) do
		wait()
	end

	for _, Connection in next, OrionLib.Connections do
		Connection:Disconnect()
	end
end)

-- Original MakeDraggable for the main window
local function MakeDraggable(DragPoint, Main) 
	pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				Main.Position  = UDim2.new(FramePos.X.Scale,FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
			end
		end)
	end)
end	

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in next, Properties or {} do
		Object[i] = v
	end
	for i, v in next, Children or {} do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	table.foreach(Props, function(Property, Value) -- TODO: Consider replacing table.foreach with for..pairs
		Element[Property] = Value
	end)
	return Element
end

local function SetChildren(Element, Children)
	table.foreach(Children, function(_, Child) -- TODO: Consider replacing table.foreach with for..pairs
		Child.Parent = Element
	end)
	return Element
end

local function Round(Number, Factor)
    if Factor == 0 then return Number end -- Avoid division by zero
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 then Result = Result + Factor end -- This line seems unusual for standard rounding, re-evaluate if issues arise
	return Result
end

local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") then
		return "BackgroundColor3"
	end	
	if Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	end	
	if Object:IsA("UIStroke") then
		return "Color"
	end	
	if Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	end	 
	if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
		return "ImageColor3"
	end	 
	return nil -- Added to handle cases where type is not matched
end

local function AddThemeObject(Object, Type)
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end	 
	table.insert(OrionLib.ThemeObjects[Type], Object)
    local propName = ReturnProperty(Object)
    if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
	    Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
    end
	return Object
end	 

local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in pairs(Type) do
            local propName = ReturnProperty(Object)
			if propName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
				Object[propName] = OrionLib.Themes[OrionLib.SelectedTheme][Name]
            end
		end	 
	end	 
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end	 

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local success, Data = pcall(function() return HttpService:JSONDecode(Config) end)
    if not success or not Data then
        warn("[OrionLib] Failed to decode config data:", Data)
        return
    end

	table.foreach(Data, function(a,b) -- TODO: Consider replacing table.foreach with for..pairs
		if OrionLib.Flags[a] then
			task.spawn(function()	-- Changed spawn to task.spawn for consistency
				if OrionLib.Flags[a].Type == "Colorpicker" then
					OrionLib.Flags[a]:Set(UnpackColor(b))
				else
					OrionLib.Flags[a]:Set(b)
				end	 
			end)
		else
            -- warn("[OrionLib] Flag not found during config load:", a)
		end
	end)
end

local function SaveCfg(Name)
    if not (getfenv().writefile and OrionLib.Folder and Name) then return end 
	local Data = {}
	for i,v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end	
	end
	writefile(OrionLib.Folder .. "/" .. Name .. ".txt", tostring(HttpService:JSONEncode(Data)))
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2,Enum.UserInputType.MouseButton3,Enum.UserInputType.Touch}
local BlacklistedKeys = {Enum.KeyCode.Unknown,Enum.KeyCode.W,Enum.KeyCode.A,Enum.KeyCode.S,Enum.KeyCode.D,Enum.KeyCode.Up,Enum.KeyCode.Left,Enum.KeyCode.Down,Enum.KeyCode.Right,Enum.KeyCode.Slash,Enum.KeyCode.Tab,Enum.KeyCode.Backspace,Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in next, Table do
		if v == Key then
			return true
		end
	end
	return false -- Added to ensure a boolean is always returned
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale, Offset)
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color,
		BorderSizePixel = 0,
		ScrollBarThickness = Width,
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID,
		BackgroundTransparency = 1
	})

	if GetIcon(ImageID) ~= nil then
		ImageNew.Image = GetIcon(ImageID)
	end	

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID,
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.Roboto,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function() -- Changed spawn to task.spawn
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(25, 25, 25), 0, 10), {
			Parent = NotificationParent,	
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, -55, 0, 0),
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y
		}), {
			MakeElement("Stroke", Color3.fromRGB(93, 93, 93), 1.2),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Title"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.GothamSemibold,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})

		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		task.wait(NotificationConfig.Time - 0.88) -- Changed wait to task.wait
		TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
		TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.6}):Play()
		task.wait(0.3) -- Changed wait to task.wait
		local stroke = NotificationFrame:FindFirstChildOfClass("UIStroke") -- More robustly find stroke
        if stroke then
		    TweenService:Create(stroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play()
        end
		TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play()
		TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play()
		task.wait(0.05) -- Changed wait to task.wait

		NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0),'In','Quint',0.8,true)
		task.wait(1.35) -- Changed wait to task.wait
		NotificationFrame:Destroy()
	end)
end	 

function OrionLib:Init()
	if OrionLib.SaveCfg then	
		pcall(function()
			if getfenv().isfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				LoadCfg(readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt"))
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for the game " .. game.GameId .. ".",
					Time = 5
				})
			end
		end)		
	end	
end	

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	-- local Loaded = false -- Unused variable
	local UIHidden = false

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	WindowConfig.SearchBar = WindowConfig.SearchBar or nil 
	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.SaveConfig then
		if (getfenv().isfolder and getfenv().makefolder) and not isfolder(WindowConfig.ConfigFolder) then 
			makefolder(WindowConfig.ConfigFolder)
		elseif not (getfenv().isfolder and isfolder(WindowConfig.ConfigFolder)) then 
            pcall(function() if getfenv().makefolder then makefolder(WindowConfig.ConfigFolder) end end) 
		end	
	end

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 4),
	WindowConfig.SearchBar and {
		Size = UDim2.new(1, 0, 1, -90),
		Position = UDim2.new(0, 0, 0, 40)
	} or {
		Size = UDim2.new(1, 0, 1, -50)
	}),
	{
		MakeElement("List"),
		MakeElement("Padding", 8, 0, 0, 8)
	}), "Divider")


	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16) -- 16 is Top (8) + Bottom (8 from Padding)
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50)
	})

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Size = UDim2.new(0, 150, 1, -50),
		Position = UDim2.new(0, 0, 0, 50)
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"),	
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"),	
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),	
		TabHolder,
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50)
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),	
			AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. LocalPlayer.UserId .."&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), {
					Size = UDim2.new(1, 0, 1, 0),
				}), "Second"),
				MakeElement("Corner", 1)
			}), "Divider"),
			SetChildren(SetProps(MakeElement("TFrame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1)
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "", 12), { -- Consider adding default text like "@" .. LocalPlayer.Name
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		}),
	}), "Second")

	local Tabs = {}; 

	if WindowConfig.SearchBar then
		local SearchBox = Create("TextBox", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			PlaceholderColor3 = Color3.fromRGB(210,210,210),
			PlaceholderText = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.Default) or "🔍 Search", 
			Font = Enum.Font.GothamBold,
			TextWrapped = true,
			Text = '',
			TextXAlignment = Enum.TextXAlignment.Center,
			TextSize = 14,
			ClearTextOnFocus = (type(WindowConfig.SearchBar) == "table" and WindowConfig.SearchBar.ClearTextOnFocus ~= nil and WindowConfig.SearchBar.ClearTextOnFocus) or true 
		})

		local TextboxActual = AddThemeObject(SearchBox, "Text")

		local SearchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 1, 6), {
			Parent = WindowStuff,
			Size = UDim2.new(0, 130, 0, 24),
			Position = UDim2.new(1.013, -12, 0.075, 0), 
			AnchorPoint = Vector2.new(1, 0.5) 
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			TextboxActual
		}), "Main")

		local function SearchHandle()
			local Text = string.lower(SearchBox.Text);
            if not TabHolder or not TabHolder:IsA("GuiObject") then return end

			for i,v in pairs(Tabs) do
				if v and v:IsA('TextButton') then 
					if Text == "" or string.find(string.lower(i), Text) then 
						v.Visible = true
					else
						v.Visible = false
					end
				end
			end
		end
		AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle);
	end

	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
		Size = UDim2.new(1, -30, 2, 0), -- Consider UDim2.new(1, -X, 1, 0) for better vertical centering with text size
		Position = UDim2.new(0, 25, 0, -24), -- This positioning makes the text appear above the bar
		Font = Enum.Font.GothamBlack,
		TextSize = 20
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1)
	}), "Stroke")

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 10), {
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -172),
		Size = UDim2.new(0, 615, 0, 344),
		ClipsDescendants = true
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Name = "TopBar"
		}), {
			WindowName,
			WindowTopBarLine,
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 7), {
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -90, 0, 10)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), {
					Size = UDim2.new(0, 1, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0)
				}), "Stroke"),	
				CloseBtn,
				MinimizeBtn
			}), "Second"),	
		}),
		DragPoint,
		WindowStuff
	}), "Main")

	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, -24) -- Same Y as before, ensure it's centered within the 50px bar
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 25, 0.5, -10) -- Centered Y within the 50px bar (assuming icon is 20px high)
		})
        if MainWindow and MainWindow:FindFirstChild("TopBar") then
		    WindowIcon.Parent = MainWindow.TopBar
        end
	end	

	MakeDraggable(DragPoint, MainWindow) 

    -- Redundant MakeDraggable(Frame, Button) function was here, now removed.

    local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
        Parent = Orion,
        Size = UDim2.new(0, 40, 0, 40),
        Position = UDim2.new(0.5, -20, 0, 20),  
        BackgroundTransparency = 0,
        Visible = false,
        AnchorPoint = Vector2.new(0.5, 0.5)
    }), {
        AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://17615525476"), { -- Ensure this asset ID is valid
            AnchorPoint = Vector2.new(0.5, 0.5),
            Position = UDim2.new(0.5, 0, 0.5, 0),
            Size = UDim2.new(0.7, 0, 0.7, 0)
        }), "Text"),
        MakeElement("Corner", 1)
    })
    MobileReopenButton.BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main -- Set initial color

    local function MakeDraggableMobile(button) -- Renamed to avoid conflict if any subtle difference was intended
        local dragging
        local dragStart
        local startPos

        local function update(input)
            if not dragging then return end -- Ensure dragging is still true
            local delta = input.Position - dragStart
            local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            TweenService:Create(button, TweenInfo.new(0.2), {Position = newPosition}):Play()
        end

        AddConnection(button.InputBegan, function(input) -- Used AddConnection
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                dragStart = input.Position
                startPos = button.Position

                local changedConn
                changedConn = input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        if changedConn then changedConn:Disconnect() end -- Disconnect self
                    end
                end)
            end
        end)

        AddConnection(UserInputService.InputChanged, function(input) -- Used AddConnection
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                update(input)
            end
        end)
    end

    MakeDraggableMobile(MobileReopenButton) 


    AddConnection(CloseBtn.MouseButton1Up, function()
        MainWindow.Visible = false
        MobileReopenButton.Visible = true
        UIHidden = true
        OrionLib:MakeNotification({
            Name = "Interface Hidden",
            Content = "Tap the open button to reopen the interface. Or Press Key M To Close Or Open",
            Time = 5
        })
        WindowConfig.CloseCallback()
    end)

    AddConnection(UserInputService.InputBegan, function(Input)
        if Input.KeyCode == Enum.KeyCode.M then
            if UserInputService:GetFocusedTextBox() then return end -- Don't toggle if typing
            if UIHidden then
                MainWindow.Visible = true
                MobileReopenButton.Visible = false
                UIHidden = false
            else
                MainWindow.Visible = false
                MobileReopenButton.Visible = true
                UIHidden = true
            end
        end
    end)

    AddConnection(MobileReopenButton.Activated, function()
        MainWindow.Visible = true
        MobileReopenButton.Visible = false
        UIHidden = false -- Ensure UIHidden is updated
    end)


	AddConnection(MinimizeBtn.MouseButton1Up, function()
		if Minimized then
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 615, 0, 344)}):Play()
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
			task.wait(.02) -- Changed wait to task.wait
			MainWindow.ClipsDescendants = false -- Should be true if window is smaller than contents
			WindowStuff.Visible = true
			WindowTopBarLine.Visible = true
		else
			MainWindow.ClipsDescendants = true
			WindowTopBarLine.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870"

			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, WindowName.TextBounds.X + 140, 0, 50)}):Play()
			task.wait(0.1) -- Changed wait to task.wait
			WindowStuff.Visible = false	
		end
		Minimized = not Minimized	
	end)

	local function LoadSequence()
		MainWindow.Visible = false
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 28, 0, 28),
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
			Parent = Orion,
			Size = UDim2.new(1, 0, 1, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 19, 0.5, 0),
			TextXAlignment = Enum.TextXAlignment.Center,
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})

		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		task.wait(0.8) -- Changed wait to task.wait
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X/2), 0.5, 0)}):Play()
		task.wait(0.3) -- Changed wait to task.wait
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
		task.wait(2) -- Changed wait to task.wait
		TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
		MainWindow.Visible = true
		LoadSequenceLogo:Destroy()
		LoadSequenceText:Destroy()
	end	

	if WindowConfig.IntroEnabled then
		LoadSequence()
	else 
		MainWindow.Visible = true
	end	

	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 10, 0.5, 0),
				ImageTransparency = 0.4,
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0),
				Position = UDim2.new(0, 35, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.4,
				Name = "Title"
			}), "Text")
		})

		if GetIcon(TabConfig.Icon) ~= nil then
			TabFrame.Ico.Image = GetIcon(TabConfig.Icon)
		end	

		if WindowConfig.SearchBar then
			Tabs[TabConfig.Name] = TabFrame 
		end


		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", Color3.fromRGB(255, 255, 255), 5), {
			Size = UDim2.new(1, -150, 1, -50),
			Position = UDim2.new(0, 150, 0, 50),
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15) -- Top, Right, Bottom, Left -> This padding is for the container itself
		}), "Divider")

		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + (Container.UIPadding and (Container.UIPadding.PaddingTop.Offset + Container.UIPadding.PaddingBottom.Offset) or 30)) -- 30 is Top (15) + Bottom (15 from Padding)
		end)

		if FirstTab then
			FirstTab = false
			TabFrame.Ico.ImageTransparency = 0
			TabFrame.Title.TextTransparency = 0
			TabFrame.Title.Font = Enum.Font.GothamBlack
			Container.Visible = true
		end	 

		AddConnection(TabFrame.MouseButton1Click, function()
			for _, Tab in next, TabHolder:GetChildren() do
				if Tab:IsA("TextButton") then 
					if Tab.Title and Tab.Ico then 
						Tab.Title.Font = Enum.Font.GothamSemibold
						TweenService:Create(Tab.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
						TweenService:Create(Tab.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
					end
				end	 
			end
			for _, ItemContainer in next, MainWindow:GetChildren() do
				if ItemContainer.Name == "ItemContainer" then
					ItemContainer.Visible = false
				end	 
			end	
			if TabFrame.Ico and TabFrame.Title then 
				TweenService:Create(TabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
				TweenService:Create(TabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
				TabFrame.Title.Font = Enum.Font.GothamBlack
			end
			Container.Visible = true	
		end)

		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
					LabelFrame.Content.Text = ToChange
				end
				return LabelFunction
			end
			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Text"
				Content = Content or "Content"

				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 30), -- Initial size, will be updated
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -24, 0, 14), -- Adjusted for padding
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0), -- Width adjusted for padding, height is auto
						Position = UDim2.new(0, 12, 0, 26),
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true,
                        AutomaticSize = Enum.AutomaticSize.Y -- This will make it expand
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				AddConnection(ParagraphFrame.Content:GetPropertyChangedSignal("AbsoluteSize"), function() -- Use AbsoluteSize for wrapped text
                    if ParagraphFrame and ParagraphFrame.Parent and ParagraphFrame.Content and ParagraphFrame.Content.Parent then
					    local textHeight = ParagraphFrame.Content.AbsoluteSize.Y
					    ParagraphFrame.Size = UDim2.new(1, 0, 0, textHeight + 35) -- 10 (top pad) + 14 (title) + 2 (gap) + textHeight + 9 (bottom pad)
                    end
				end)

				ParagraphFrame.Content.Text = Content -- Set text last to trigger initial size update

				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
					ParagraphFrame.Content.Text = ToChange
				end
				return ParagraphFunction
			end	 
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function() end
				ButtonConfig.Icon = ButtonConfig.Icon or "rbxassetid://3944703587"

				local Button = {}

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 33),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -30, 0.5, -10), -- Centered Y
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")

				AddConnection(Click.MouseEnter, function()
                    if ButtonFrame and ButtonFrame.Parent then
					    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
				end)

				AddConnection(Click.MouseLeave, function()
                    if ButtonFrame and ButtonFrame.Parent then
					    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Up, function()
                    if ButtonFrame and ButtonFrame.Parent then
					    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
					task.spawn(function() -- Changed spawn to task.spawn
						ButtonConfig.Callback()
					end)
				end)

				AddConnection(Click.MouseButton1Down, function()
                    if ButtonFrame and ButtonFrame.Parent then
					    TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
                    end
				end)

				function Button:Set(ButtonText)
					ButtonFrame.Content.Text = ButtonText
				end	

				return Button
			end	 
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false
				ToggleConfig.Callback = ToggleConfig.Callback or function() end
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
				ToggleConfig.Flag = ToggleConfig.Flag or nil
				ToggleConfig.Save = ToggleConfig.Save or false

				local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"} -- Added Type

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -24, 0.5, 0), -- Should be UDim2.new(1, -X, 0.5, 0) where X is its width + padding from right edge
					AnchorPoint = Vector2.new(1, 0.5) -- Anchor right-middle
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = ToggleConfig.Color,
						Name = "Stroke",
						Transparency = 0.5
					}),
					SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						Name = "Ico"
					}),
				})
                ToggleBox.Position = UDim2.new(1, -(12 + 12), 0.5, 0) -- Position from right edge (12px padding + 12px half-width of box)

				local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
						Size = UDim2.new(1, -12 - 24 - 12, 1, 0), -- Full width - left_pad - togglebox_width - right_pad
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")

				function Toggle:Set(Value)
					Toggle.Value = Value
                    if not (ToggleBox and ToggleBox.Parent and ToggleBox.Stroke and ToggleBox.Ico) then return end -- Guard
					TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Divider}):Play()
					TweenService:Create(ToggleBox.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Stroke}):Play()
					TweenService:Create(ToggleBox.Ico, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = Toggle.Value and 0 or 1, Size = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)}):Play()
					ToggleConfig.Callback(Toggle.Value)
				end	 

				Toggle:Set(Toggle.Value)

				AddConnection(Click.MouseEnter, function()
                    if ToggleFrame and ToggleFrame.Parent then
					    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
				end)

				AddConnection(Click.MouseLeave, function()
                    if ToggleFrame and ToggleFrame.Parent then
					    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Up, function()
                    if ToggleFrame and ToggleFrame.Parent then
					    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
					Toggle:Set(not Toggle.Value) -- Moved SaveCfg after Set
                    if OrionLib.SaveCfg and ToggleConfig.Save then SaveCfg(game.GameId) end
				end)

				AddConnection(Click.MouseButton1Down, function()
                    if ToggleFrame and ToggleFrame.Parent then
					    TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
                    end
				end)

				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end	
				return Toggle
			end	
			function ElementFunction:AddSlider(SliderConfig) -- ## SLIDER UPDATED HERE ##
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0
				SliderConfig.Max = SliderConfig.Max or 100
				SliderConfig.Increment = SliderConfig.Increment or 1
				SliderConfig.Default = SliderConfig.Default or math.clamp(SliderConfig.Default or 50, SliderConfig.Min, SliderConfig.Max) -- Ensure default is within min/max
				SliderConfig.Callback = SliderConfig.Callback or function() end
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
				SliderConfig.Flag = SliderConfig.Flag or nil
				SliderConfig.Save = SliderConfig.Save or false

				local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"} -- Added Type
				local Dragging = false
				local SliderKnob 
                local KnobValueDisplay

				local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Name = "SliderDrag",
					Size = UDim2.new(0, 0, 1, 0), 
					BackgroundTransparency = 0.3,
					ClipsDescendants = true,
					ZIndex = 2 
				}), {
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0), 
						Position = UDim2.new(0, 12, 0.5, 0), 
						AnchorPoint = Vector2.new(0, 0.5),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextYAlignment = Enum.TextYAlignment.Center,
						TextTransparency = 0 
					}), "Text")
				})

				local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Name = "SliderBar",
					Size = UDim2.new(1, -24, 0, 26), 
					Position = UDim2.new(0, 12, 0, 30),
					BackgroundTransparency = 0.9, 
					ZIndex = 1
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = SliderConfig.Color,
						Transparency = 0.5 
					}),
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0), 
						Position = UDim2.new(0, 12, 0.5, 0), 
						AnchorPoint = Vector2.new(0, 0.5),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextYAlignment = Enum.TextYAlignment.Center,
						TextTransparency = 0.8 
					}), "Text"),
					SliderDrag 
				})
				
				SliderKnob = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), { 
					Name = "SliderKnob",
					Size = UDim2.new(0, 12, 0, 22), 
					BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text, 
					AnchorPoint = Vector2.new(0.5, 0.5),
					Position = UDim2.new(0,0,0.5,0), 
					ZIndex = SliderBar.ZIndex + 2, 
					Parent = SliderBar,
				}),{
					AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke") 
				}), "Text")


				local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(1, 0, 0, 65), 
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar 
				}), "Second")

                KnobValueDisplay = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
                    Name = "KnobValueDisplay",
                    Parent = SliderFrame, 
                    Size = UDim2.new(0, 0, 0, 20), 
                    AutomaticSize = Enum.AutomaticSize.X,
                    BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
                    BackgroundTransparency = 0.15,
                    AnchorPoint = Vector2.new(0.5, 1), 
                    Visible = false, 
                    ZIndex = SliderFrame.ZIndex + 5, 
                }), {
                    AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke"),
                    AddThemeObject(SetProps(MakeElement("Label", "0", 11), { 
                        Name = "Text",
                        Size = UDim2.new(0,0,1,0), -- Use AutomaticSize X for label as well
                        AutomaticSize = Enum.AutomaticSize.X,
                        Font = Enum.Font.GothamSemibold,
                        TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
                        TextXAlignment = Enum.TextXAlignment.Center,
                        TextYAlignment = Enum.TextYAlignment.Center,
                    }), "Text"),
                    MakeElement("Padding", 1, 6, 1, 6) -- Top, Right, Bottom, Left (increased horizontal padding)
                }), "Main")


				local knobOriginalSize = SliderKnob.Size
				local knobPressedSize = UDim2.new(knobOriginalSize.X.Scale, knobOriginalSize.X.Offset + 2, knobOriginalSize.Y.Scale, knobOriginalSize.Y.Offset + 2)
                
                local function UpdateKnobValueDisplayPosition()
                    if KnobValueDisplay.Visible and SliderKnob and SliderKnob.Parent and SliderFrame and SliderFrame.Parent then
                        task.defer(function() -- Defer to get updated AbsolutePosition after knob tweens
                            if not (SliderKnob and SliderKnob.Parent and KnobValueDisplay and KnobValueDisplay.Parent) then return end -- Check again in defer
                            
                            local knobAbsPos = SliderKnob.AbsolutePosition
                            local knobAbsSize = SliderKnob.AbsoluteSize
                            local frameAbsPos = SliderFrame.AbsolutePosition

                            KnobValueDisplay.Position = UDim2.fromOffset(
                                (knobAbsPos.X - frameAbsPos.X) + (knobAbsSize.X / 2),
                                (knobAbsPos.Y - frameAbsPos.Y) - 3 -- Position bottom of tooltip 3px above knob's top
                            )
                        end)
                    end
                end

				AddConnection(SliderBar.InputBegan, function(Input) -- Used AddConnection
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then	
						Dragging = true	
                        if SliderKnob and SliderKnob.Parent then
						    TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobPressedSize}):Play() 
                        end
                        
                        if KnobValueDisplay and KnobValueDisplay.Text then
                            KnobValueDisplay.Text.Text = tostring(Slider.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
                            KnobValueDisplay.Visible = true
                        end
                        UpdateKnobValueDisplayPosition()
						
						local interactionPos = Input.Position
						local frameLocation = SliderBar.AbsolutePosition
						local relativeX = interactionPos.X - frameLocation.X
						local SizeScale = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
						Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
						-- SaveCfg moved to InputEnded
					end	
				end)
				AddConnection(SliderBar.InputEnded, function(Input) -- Used AddConnection	
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then	
						Dragging = false
                        if SliderKnob and SliderKnob.Parent then	
						    TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobOriginalSize}):Play() 
                        end
                        if KnobValueDisplay then
                            KnobValueDisplay.Visible = false
                        end
						if OrionLib.SaveCfg and SliderConfig.Save then SaveCfg(game.GameId) end 
					end	
				end)

				local lastInputChangedTime = 0
				AddConnection(UserInputService.InputChanged, function(Input) -- Used AddConnection
					if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then	
						local currentTime = tick()
                        if currentTime - lastInputChangedTime < 0.016 then return end -- throttle to ~60fps
                        lastInputChangedTime = currentTime

						local interactionPos = Input.Position.X -- For Touch, Position.X is fine. For MouseMovement, Mouse.X is more direct.
						if Input.UserInputType == Enum.UserInputType.MouseMovement then
							interactionPos = Mouse.X
						end
                        if SliderBar and SliderBar.Parent then
						    local SizeScale = math.clamp((interactionPos - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
						    Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale))
                        end
                        UpdateKnobValueDisplayPosition() -- Update tooltip position continuously while dragging
					end
				end)

				function Slider:Set(Value)
					self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
					local percentage = (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min)
					if SliderConfig.Max == SliderConfig.Min then percentage = 0 end 

					local tweenInfo = TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                    
                    if SliderDrag and SliderDrag.Parent then
					    TweenService:Create(SliderDrag, tweenInfo, {Size = UDim2.fromScale(percentage, 1)}):Play()
                    end
					if SliderKnob and SliderKnob.Parent then
						TweenService:Create(SliderKnob, tweenInfo, {Position = UDim2.new(percentage, 0, 0.5, 0)}):Play()
					end

					local displayValue = tostring(self.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
                    if SliderBar and SliderBar.Value then SliderBar.Value.Text = displayValue end
					if SliderDrag and SliderDrag.Value then SliderDrag.Value.Text = displayValue end
					
                    if KnobValueDisplay and KnobValueDisplay.Text then 
                        KnobValueDisplay.Text.Text = displayValue
                        if KnobValueDisplay.Visible then -- Update position if already visible (e.g. programmatic set while dragging)
                            UpdateKnobValueDisplayPosition()
                        end
                    end
					
					SliderConfig.Callback(self.Value)
				end	 	

				Slider:Set(Slider.Value) 
				if SliderConfig.Flag then				
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end
				return Slider
			end	
			function ElementFunction:AddDropdown(DropdownConfig)
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default or (#DropdownConfig.Options > 0 and DropdownConfig.Options[1] or "") -- Default to first option if exists
				DropdownConfig.Callback = DropdownConfig.Callback or function() end
				DropdownConfig.Flag = DropdownConfig.Flag or nil
				DropdownConfig.Save = DropdownConfig.Save or false

				local Dropdown = {Value = DropdownConfig.Default, Options = DropdownConfig.Options, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save}
				local MaxElements = 5

				if not table.find(Dropdown.Options, Dropdown.Value) then
                    if #Dropdown.Options > 0 then
                        Dropdown.Value = Dropdown.Options[1] 
                    else
					    Dropdown.Value = "..." -- Placeholder if no options and default is invalid
                    end
				end

				local DropdownList = MakeElement("List")
                local DropdownListPadding = MakeElement("UIPadding", 2,2,2,2) -- Padding for items within scroll

				local DropdownContainer = AddThemeObject(SetProps(SetChildren(MakeElement("ScrollFrame", Color3.fromRGB(40, 40, 40), 4), {
					DropdownList,
                    DropdownListPadding
				}), {
					Parent = ItemParent, -- This will be set later inside DropdownFrame
					Position = UDim2.new(0, 0, 0, 38), -- Positioned below the header part of DropdownFrame
					Size = UDim2.new(1, 0, 1, -38), -- Will fill the expanded area
					ClipsDescendants = true,
                    Visible = false -- Initially hidden, shown when DropdownFrame expands
				}), "Divider")

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})
                
                local DropdownHeader = SetProps(SetChildren(MakeElement("TFrame"), {
                    AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
                        Size = UDim2.new(1, -12 -20 -12 - 80, 1, 0), -- Width: 1 - LPad - IconW - IconPad - SelectedTextApproxW
                        Position = UDim2.new(0, 12, 0, 0),
                        Font = Enum.Font.GothamBold,
                        Name = "Content"
                    }), "Text"),
                    AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
                        Size = UDim2.new(0, 20, 0, 20),
                        AnchorPoint = Vector2.new(1, 0.5), -- Anchor right-middle
                        Position = UDim2.new(1, -12, 0.5, 0), -- Position from right edge
                        ImageColor3 = Color3.fromRGB(240, 240, 240),
                        Name = "Ico"
                    }), "TextDark"),
                    AddThemeObject(SetProps(MakeElement("Label", "Selected", 13), {
                        Size = UDim2.new(0, 80, 1, 0), -- Approximate width for selected text
                        AnchorPoint = Vector2.new(1, 0.5),
                        Position = UDim2.new(1, - (12 + 20 + 6) , 0.5, 0), -- Position left of the icon
                        Font = Enum.Font.Gotham,
                        Name = "Selected",
                        TextXAlignment = Enum.TextXAlignment.Right
                    }), "TextDark"),
                    AddThemeObject(SetProps(MakeElement("Frame"), {
                        Size = UDim2.new(1, 0, 0, 1),
                        Position = UDim2.new(0, 0, 1, -1),
                        Name = "Line",
                        Visible = false
                    }), "Stroke"),	
                    Click
                }), {
                    Size = UDim2.new(1, 0, 0, 38),
                    ClipsDescendants = true,
                    Name = "F" -- Header Frame
                })

				local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38), -- Initial height
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
                    DropdownHeader, -- Add header first
					DropdownContainer, -- Then container for items
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("Corner") -- This corner applies to DropdownFrame
				}), "Second")
                DropdownContainer.Parent = DropdownFrame -- Set parent after DropdownFrame is created

				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
                    if DropdownContainer and DropdownContainer.Parent and DropdownList and DropdownList.Parent then
					    DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + (DropdownListPadding.PaddingTop.Offset + DropdownListPadding.PaddingBottom.Offset))
                    end
				end)	

				local function AddOptionsToDropdown(OptionsToAdd) -- Renamed to avoid conflict
                    if not DropdownContainer or not DropdownContainer.Parent then return end
					for _, OptionText in pairs(OptionsToAdd) do
						local OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button"), { -- Removed Color3.fromRGB(40,40,40) from button creation, theme handles it.
							MakeElement("Corner", 0, 6),
							AddThemeObject(SetProps(MakeElement("Label", OptionText, 13, 0.4), {
								Position = UDim2.new(0, 8, 0, 0),
								Size = UDim2.new(1, -8, 1, 0),
								Name = "Title"
							}), "Text")
						}), {
							Parent = DropdownContainer,
							Size = UDim2.new(1, 0, 0, 28),
							BackgroundTransparency = 1,
							ClipsDescendants = true
						}), "Divider") -- Use "Divider" or "Second" based on desired look

						AddConnection(OptionBtn.MouseButton1Click, function()
							Dropdown:Set(OptionText)
                            -- Click.MouseButton1Click:Fire() -- Programmatically close dropdown after selection
                            Dropdown.Toggled = false -- Manually set state
                            DropdownFrame.F.Line.Visible = Dropdown.Toggled
                            TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Rotation = Dropdown.Toggled and 180 or 0}):Play()
                            TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, 38)}):Play()
                            DropdownContainer.Visible = false
							if OrionLib.SaveCfg and DropdownConfig.Save then SaveCfg(game.GameId) end
						end)

						Dropdown.Buttons[OptionText] = OptionBtn
					end
				end	

				function Dropdown:Refresh(NewOptions, DeleteExisting)
					if DeleteExisting then
						for _,v_btn in pairs(Dropdown.Buttons) do
                            if v_btn and v_btn.Parent then v_btn:Destroy() end
						end	 
						table.clear(Dropdown.Options)
						table.clear(Dropdown.Buttons)
					end
					Dropdown.Options = NewOptions or {}
					AddOptionsToDropdown(Dropdown.Options) -- Use renamed function
                    if DropdownContainer and DropdownContainer.Parent and DropdownList and DropdownList.Parent then
					    DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + (DropdownListPadding.PaddingTop.Offset + DropdownListPadding.PaddingBottom.Offset))
                    end
                    -- Ensure current value is still valid or update it
                    if not table.find(Dropdown.Options, Dropdown.Value) then
                        if #Dropdown.Options > 0 then
                            Dropdown:Set(Dropdown.Options[1]) -- Set to first if current is no longer valid
                        else
                            Dropdown:Set("...") -- Set to placeholder if no options
                        end
                    else
                         Dropdown:Set(Dropdown.Value) -- Re-apply to update visuals if needed
                    end
				end	

				function Dropdown:Set(ValueToSet)
					local actualValueToSet = ValueToSet
                    if not table.find(Dropdown.Options, ValueToSet) then
                        if #Dropdown.Options > 0 then
                            actualValueToSet = Dropdown.Options[1]
                        else
						    actualValueToSet = "..."
                        end
					end

					Dropdown.Value = actualValueToSet
                    if DropdownFrame and DropdownFrame.F and DropdownFrame.F.Selected then
					    DropdownFrame.F.Selected.Text = Dropdown.Value
                    end

					for optKey, optButton in pairs(Dropdown.Buttons) do
                        if optButton and optButton.Parent then
						    TweenService:Create(optButton,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{BackgroundTransparency = 1}):Play()
						    if optButton.Title then TweenService:Create(optButton.Title,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{TextTransparency = 0.4}):Play() end
                        end
					end	
                    if Dropdown.Buttons[Dropdown.Value] and Dropdown.Buttons[Dropdown.Value].Parent then
					    TweenService:Create(Dropdown.Buttons[Dropdown.Value],TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{BackgroundTransparency = 0}):Play()
					    if Dropdown.Buttons[Dropdown.Value].Title then TweenService:Create(Dropdown.Buttons[Dropdown.Value].Title,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{TextTransparency = 0}):Play() end
                    end
					return DropdownConfig.Callback(Dropdown.Value)
				end

				AddConnection(Click.MouseButton1Click, function()
					Dropdown.Toggled = not Dropdown.Toggled
                    if not (DropdownFrame and DropdownFrame.F and DropdownFrame.F.Line and DropdownFrame.F.Ico and DropdownContainer) then return end

					DropdownFrame.F.Line.Visible = Dropdown.Toggled
					TweenService:Create(DropdownFrame.F.Ico,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Rotation = Dropdown.Toggled and 180 or 0}):Play()
					
                    local targetHeight
                    if Dropdown.Toggled then
                        DropdownContainer.Visible = true -- Show before calculating height
                        task.wait() -- Allow canvas size to update
                        local contentHeight = DropdownContainer.CanvasSize.Y.Offset
                        if #Dropdown.Options > MaxElements then
                            -- Calculate height for MaxElements items + padding
                            local itemsHeight = MaxElements * 28 -- Height of each OptionBtn
                            targetHeight = 38 + itemsHeight + (DropdownListPadding.PaddingTop.Offset + DropdownListPadding.PaddingBottom.Offset)
                        else
                            targetHeight = 38 + contentHeight -- Header + full content (which includes padding)
                        end
                        if #Dropdown.Options == 0 then targetHeight = 38 end 
                    else
                        targetHeight = 38
                        DropdownContainer.Visible = false -- Hide after tweening (or before if it looks better)
                    end
                    TweenService:Create(DropdownFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
                    if not Dropdown.Toggled then
                        -- Optionally delay hiding container until after tween if it causes visual issues
                        -- task.delay(0.15, function() if not Dropdown.Toggled then DropdownContainer.Visible = false end end)
                    end
				end)

				Dropdown:Refresh(Dropdown.Options, false) -- Initial population
				Dropdown:Set(Dropdown.Value) -- Set initial value and visuals
				if DropdownConfig.Flag then				
					OrionLib.Flags[DropdownConfig.Flag] = Dropdown
				end
				return Dropdown
			end
			function ElementFunction:AddBind(BindConfig)
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
				BindConfig.Hold = BindConfig.Hold or false
				BindConfig.Callback = BindConfig.Callback or function() end
				BindConfig.Flag = BindConfig.Flag or nil
				BindConfig.Save = BindConfig.Save or false

				local Bind = {Value = (type(BindConfig.Default) == "EnumItem" and BindConfig.Default.Name or BindConfig.Default), Binding = false, Type = "Bind", Save = BindConfig.Save}
				local Holding = false

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24), -- Initial, will resize
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "", 14), { 
						Size = UDim2.new(1, 0, 1, 0),
                        AutomaticSize = Enum.AutomaticSize.X, -- Allow label to determine width
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
						Name = "Value"
					}), "Text"),
                    MakeElement("UIPadding", 0,8,0,8) -- Internal padding for BindBox
				}), "Main")
                
                local BindBoxLabel = BindBox.Value

				local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
						Size = UDim2.new(1, -12 - BindBox.AbsoluteSize.X - 12, 1, 0), -- Adjust based on BindBox size
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")
                
                local function UpdateBindBoxSize()
                    if BindBox and BindBox.Parent and BindBoxLabel and BindBoxLabel.Parent then
                        task.defer(function() -- Defer for TextBounds update
                            if not (BindBox and BindBox.Parent and BindBoxLabel and BindBoxLabel.Parent) then return end
                            local textWidth = BindBoxLabel.TextBounds.X
                            local padding = BindBox:FindFirstChildOfClass("UIPadding")
                            local horizontalPadding = (padding and (padding.PaddingLeft.Offset + padding.PaddingRight.Offset)) or 16
                            TweenService:Create(BindBox, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, textWidth + horizontalPadding, 0, 24)}):Play()
                        
                            if BindFrame and BindFrame.Content then
                                BindFrame.Content.Size = UDim2.new(1, -12 - (textWidth + horizontalPadding) -12 , 1, 0)
                            end
                        end)
                    end
                end
                AddConnection(BindBoxLabel:GetPropertyChangedSignal("Text"), UpdateBindBoxSize)


				AddConnection(Click.InputEnded, function(Input) -- Changed from InputEnded on Click to MouseButton1Click for more standard behavior
                    if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                        if Bind.Binding then return end
                        Bind.Binding = true
                        BindBoxLabel.Text = "..." 
                        UpdateBindBoxSize()
                    end
				end)
				
				AddConnection(UserInputService.InputBegan, function(Input)
					if UserInputService:GetFocusedTextBox() then return end
					
					local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name
					
					if keyName == Bind.Value and not Bind.Binding then
						if BindConfig.Hold then
							Holding = true
							BindConfig.Callback(Holding)
						else
							BindConfig.Callback()
						end
					elseif Bind.Binding then
						local CapturedKey
						if not CheckKey(BlacklistedKeys, Input.KeyCode) and Input.KeyCode ~= Enum.KeyCode.Unknown then
							CapturedKey = Input.KeyCode.Name
						elseif CheckKey(WhitelistedMouse, Input.UserInputType) then
							CapturedKey = Input.UserInputType.Name
						end

						if CapturedKey then
							Bind:Set(CapturedKey)
							if OrionLib.SaveCfg and BindConfig.Save then SaveCfg(game.GameId) end
						else 
							Bind:Set(Bind.Value) -- Revert to old value if invalid key
						end
                        Bind.Binding = false 
					end
				end)

				AddConnection(UserInputService.InputEnded, function(Input)
                    local keyName = Input.KeyCode ~= Enum.KeyCode.Unknown and Input.KeyCode.Name or Input.UserInputType.Name
					if keyName == Bind.Value then
						if BindConfig.Hold and Holding then
							Holding = false
							BindConfig.Callback(Holding)
						end
					end
				end)


				AddConnection(Click.MouseEnter, function()
                    if BindFrame and BindFrame.Parent then
					    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
				end)

				AddConnection(Click.MouseLeave, function()
                    if BindFrame and BindFrame.Parent then
					    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Up, function() 
                    if BindFrame and BindFrame.Parent then
					    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Down, function()
                    if BindFrame and BindFrame.Parent then
					    TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
                    end
				end)

				function Bind:Set(Key)
					Bind.Binding = false 
					Bind.Value = (type(Key) == "EnumItem" and Key.Name) or (type(Key) == "string" and Key) or "None"
                    if BindBoxLabel and BindBoxLabel.Parent then
					    BindBoxLabel.Text = Bind.Value
                    end
                    -- UpdateBindBoxSize will be called by the Text property change signal
				end
				
				Bind:Set(Bind.Value) -- Set initial text and size
				if BindConfig.Flag then				
					OrionLib.Flags[BindConfig.Flag] = Bind
				end
				return Bind
			end	
			function ElementFunction:AddTextbox(TextboxConfig)
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
				TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false
				TextboxConfig.Callback = TextboxConfig.Callback or function() end
                TextboxConfig.Numeric = TextboxConfig.Numeric or false 
                TextboxConfig.Placeholder = TextboxConfig.Placeholder or "Input" -- Added placeholder config

				local Click = SetProps(MakeElement("Button"), { -- This button is to focus the textbox, covers the whole element
					Size = UDim2.new(1, 0, 1, 0)
				})

				local TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1, 0, 1, 0),
					BackgroundTransparency = 1,
					TextColor3 = Color3.fromRGB(255, 255, 255),
					PlaceholderColor3 = Color3.fromRGB(210,210,210),
					PlaceholderText = TextboxConfig.Placeholder,
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = false -- Usually false for this kind of input
				}), "Text")

				local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
					Size = UDim2.new(0, 24, 0, 24), -- Initial, will resize
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextboxActual,
                    MakeElement("UIPadding", 0,8,0,8) -- Internal padding for TextContainer
				}), "Main")


				local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
						Size = UDim2.new(1, -12 - TextContainer.AbsoluteSize.X - 12, 1, 0), -- Adjust size
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer,
					Click
				}), "Second")
                
                local previousText = TextboxConfig.Default or ""
                
                local function updateTextboxContainerSize()
                    if TextboxActual and TextboxActual.Parent and TextContainer and TextContainer.Parent then
                        task.defer(function()
                            if not (TextboxActual and TextboxActual.Parent and TextContainer and TextContainer.Parent) then return end
                            local textToShow = TextboxActual.Text
                            if textToShow == "" and TextboxActual.PlaceholderText ~= "" then
                                -- Estimate based on placeholder if text is empty
                                -- This is tricky because TextBounds of placeholder isn't directly available like this
                                -- For simplicity, use a minimum width or a fixed width for placeholder
                                textToShow = TextboxActual.PlaceholderText -- Use placeholder for bounds approx.
                            end

                            local tempLabel
                            if textToShow == "" then -- If still no text, use a small default
                                textToShow = " " -- Single space to get some bounds
                            end

                            tempLabel = Create("TextLabel", {
                                Font = TextboxActual.Font,
                                TextSize = TextboxActual.TextSize,
                                Text = textToShow,
                                Size = UDim2.new(0,0,0,0), -- Let it auto-size
                                Parent = TextContainer -- Temporary parent for TextBounds
                            })
                            local textWidth = tempLabel.TextBounds.X
                            tempLabel:Destroy()
                            
                            local padding = TextContainer:FindFirstChildOfClass("UIPadding")
                            local horizontalPadding = (padding and (padding.PaddingLeft.Offset + padding.PaddingRight.Offset)) or 16
                            local newWidth = math.max(24, textWidth + horizontalPadding) -- Ensure minimum width

                            TweenService:Create(TextContainer, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, newWidth, 0, 24)}):Play()
                        
                            if TextboxFrame and TextboxFrame.Content then
                                TextboxFrame.Content.Size = UDim2.new(1, -12 - newWidth - 12 , 1, 0)
                            end
                        end)
                    end
                end

                if TextboxConfig.Numeric then
                    AddConnection(TextboxActual.FocusLost, function(enterPressed)
                        local text = TextboxActual.Text
                        local num = tonumber(text)
                        if num then
                            TextboxConfig.Callback(num)
                            previousText = text
                        else
                            TextboxActual.Text = previousText 
                        end
                        if TextboxConfig.TextDisappear and (enterPressed or num) then TextboxActual.Text = "" end
                        updateTextboxContainerSize()
                    end)

                    AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), function()
                        local currentText = TextboxActual.Text
                        if currentText ~= "" then
                            if not string.match(currentText, "^%-?[0-9]*%.?[0-9]*$") then
                                TextboxActual.Text = previousText -- Revert if invalid char typed for numeric
                            else
                                -- Allow intermediate states but don't commit 'previousText' until valid or focus lost
                                -- previousText isn't updated here, only on valid FocusLost
                            end
                        end
                        updateTextboxContainerSize()
                    end)
                else
                    AddConnection(TextboxActual.FocusLost, function(enterPressed) 
                        TextboxConfig.Callback(TextboxActual.Text)
                        previousText = TextboxActual.Text -- Update previousText on successful submit
                        if TextboxConfig.TextDisappear then
                            TextboxActual.Text = ""
                        end
                        updateTextboxContainerSize()	
                    end)
                    AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), updateTextboxContainerSize)
                end


				TextboxActual.Text = TextboxConfig.Default
                updateTextboxContainerSize() -- Initial size update


				AddConnection(Click.MouseEnter, function()
                    if TextboxFrame and TextboxFrame.Parent then
					    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
				end)

				AddConnection(Click.MouseLeave, function()
                    if TextboxFrame and TextboxFrame.Parent then
					    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
                    end
				end)

				AddConnection(Click.MouseButton1Up, function()
                    if TextboxFrame and TextboxFrame.Parent then
					    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
                    end
                    if TextboxActual and TextboxActual.Parent then TextboxActual:CaptureFocus() end
				end)

				AddConnection(Click.MouseButton1Down, function()
                    if TextboxFrame and TextboxFrame.Parent then
					    TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
                    end
				end)
                -- Add Set function for textbox if needed
                local TextboxFunction = {}
                function TextboxFunction:Set(newText)
                    if TextboxActual and TextboxActual.Parent then
                        TextboxActual.Text = tostring(newText)
                        previousText = TextboxActual.Text -- Update previousText as well
                        TextboxConfig.Callback(TextboxActual.Text) -- Optionally call callback
                        updateTextboxContainerSize()
                    end
                end
                function TextboxFunction:Get()
                    return TextboxActual and TextboxActual.Text or ""
                end
                return TextboxFunction -- Return a table to allow methods like :Set() or :Get()
			end	
			function ElementFunction:AddColorpicker(ColorpickerConfig)
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
				ColorpickerConfig.Flag = ColorpickerConfig.Flag or nil
				ColorpickerConfig.Save = ColorpickerConfig.Save or false

				local ColorH, ColorS, ColorV = table.unpack( {Color3.toHSV(ColorpickerConfig.Default)} )
				local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}

				local ColorSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(ColorS, 0, 1 - ColorV, 0), 
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
                    ZIndex = 3
				})

				local HueSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0.5, 0, ColorH, 0), 
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
                    ZIndex = 3
				})

				local ColorImage = Create("ImageLabel", { 
					Name = "ColorImage",
					Size = UDim2.new(1, -25, 1, 0),
					Visible = false,
					Image = "rbxassetid://4155801252", 
                    BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1), 
                    ZIndex = 2
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					ColorSelection
				})

				local HueImage = Create("Frame", { 
                    Name = "HueImage",
					Size = UDim2.new(0, 20, 1, 0),
					Position = UDim2.new(1, -20, 0, 0),
					Visible = false,
                    ZIndex = 2
				}, {
					Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)),ColorSequenceKeypoint.new(0.16,Color3.fromRGB(255,255,0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					HueSelection
				})

				local ColorpickerContainer = Create("Frame", {
					Position = UDim2.new(0, 0, 0, 38), -- Position below header
					Size = UDim2.new(1, 0, 0, 110), -- Height for color picker area (148 total - 38 header)
					BackgroundTransparency = 1,
					ClipsDescendants = true,
                    ZIndex = 1,
                    Visible = false -- Initially hidden
				}, {
					HueImage,
					ColorImage,
					Create("UIPadding", { -- Padding for ColorImage and HueImage within container
						PaddingLeft = UDim.new(0, 10), -- Reduced padding
						PaddingRight = UDim.new(0, 10),
						PaddingBottom = UDim2.new(0, 10),
						PaddingTop = UDim2.new(0, 10) 
					})
				})
                -- Adjust ColorImage and HueImage to be relative to their container with padding
                ColorImage.Size = UDim2.new(1, - (20 + 5), 1, 0) -- Width: 100% - HueWidth - HueGap
                HueImage.Position = UDim2.new(1, -20, 0, 0) -- Position HueImage to the right

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), { 
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Main")
                ColorpickerBox.BackgroundColor3 = ColorpickerConfig.Default 

				local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent,
                    ClipsDescendants = true 
				}), {
					SetProps(SetChildren(MakeElement("TFrame"), { -- Header part
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
							Size = UDim2.new(1, -12 - 24 - 12, 1, 0), -- Adjust for box and padding
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), {
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false
						}), "Stroke"),	
					}), {
						Size = UDim2.new(1, 0, 0, 38),
						ClipsDescendants = true,
						Name = "F" -- Header Frame
					}),
					ColorpickerContainer, -- Picker part
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")

				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled
                    if not (ColorpickerFrame and ColorpickerFrame.F and ColorpickerContainer and ColorImage and HueImage) then return end

					TweenService:Create(ColorpickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = Colorpicker.Toggled and UDim2.new(1, 0, 0, 148) or UDim2.new(1, 0, 0, 38)}):Play()
                    ColorpickerContainer.Visible = Colorpicker.Toggled -- Toggle visibility of the container
					ColorImage.Visible = Colorpicker.Toggled 
					HueImage.Visible = Colorpicker.Toggled
					ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				end)
				
				local ColorInputConn, HueInputConn 

				local function UpdateColorPickerVisuals()
                    if not (ColorpickerBox and ColorpickerBox.Parent and ColorImage and ColorImage.Parent) then return end
					ColorpickerBox.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
					ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) 
					Colorpicker:Set(ColorpickerBox.BackgroundColor3) 
					if OrionLib.SaveCfg and ColorpickerConfig.Save then SaveCfg(game.GameId) end
				end
                
				AddConnection(ColorImage.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						if ColorInputConn then ColorInputConn:Disconnect() end
						ColorInputConn = AddConnection(RunService.RenderStepped, function()
                            if not (ColorImage and ColorImage.Parent and ColorSelection and ColorSelection.Parent) then 
                                if ColorInputConn then ColorInputConn:Disconnect(); ColorInputConn = nil; end
                                return 
                            end
                            local interactionPos = input.UserInputType == Enum.UserInputType.Touch and input.Position or Vector2.new(Mouse.X, Mouse.Y)
							local ColorX = math.clamp((interactionPos.X - ColorImage.AbsolutePosition.X) / ColorImage.AbsoluteSize.X, 0, 1)
							local ColorY = math.clamp((interactionPos.Y - ColorImage.AbsolutePosition.Y) / ColorImage.AbsoluteSize.Y, 0, 1)
							ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
							ColorS = ColorX
							ColorV = 1 - ColorY 
							UpdateColorPickerVisuals()
						end)
					end
				end)

				AddConnection(UserInputService.InputEnded, function(input) 
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						if ColorInputConn then ColorInputConn:Disconnect(); ColorInputConn = nil end
						if HueInputConn then HueInputConn:Disconnect(); HueInputConn = nil end
                        if OrionLib.SaveCfg and ColorpickerConfig.Save then SaveCfg(game.GameId) end -- Save on input end
					end
				end)

				AddConnection(HueImage.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						if HueInputConn then HueInputConn:Disconnect() end
						HueInputConn = AddConnection(RunService.RenderStepped, function()
                            if not (HueImage and HueImage.Parent and HueSelection and HueSelection.Parent) then
                                if HueInputConn then HueInputConn:Disconnect(); HueInputConn = nil; end
                                return
                            end
                            local interactionPos = input.UserInputType == Enum.UserInputType.Touch and input.Position or Vector2.new(Mouse.X, Mouse.Y)
							local HueY = math.clamp((interactionPos.Y - HueImage.AbsolutePosition.Y) / HueImage.AbsoluteSize.Y, 0, 1)
							HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
							ColorH = HueY 
							UpdateColorPickerVisuals()
						end)
					end
				end)


				function Colorpicker:Set(Value) 
					Colorpicker.Value = Value
                    local h,s,v = Color3.toHSV(Value)
                    ColorH, ColorS, ColorV = h,s,v
                    if ColorpickerBox and ColorpickerBox.Parent then ColorpickerBox.BackgroundColor3 = Value end
                    if ColorImage and ColorImage.Parent then ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) end
                    if ColorSelection and ColorSelection.Parent then ColorSelection.Position = UDim2.new(ColorS,0,1-ColorV,0) end
                    if HueSelection and HueSelection.Parent then HueSelection.Position = UDim2.new(0.5,0,ColorH,0) end
					ColorpickerConfig.Callback(Value)
				end

				Colorpicker:Set(ColorpickerConfig.Default) 
				if ColorpickerConfig.Flag then				
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end
				return Colorpicker
			end	
			return ElementFunction	
		end	

		local ElementFunction = {}

		function ElementFunction:AddSection(SectionConfig)
			SectionConfig.Name = SectionConfig.Name or "Section"

			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 0, 26), -- Initial height for name label
				Parent = Container,
                AutomaticSize = Enum.AutomaticSize.Y -- Allow to expand with content
			}), {
				AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
					Size = UDim2.new(1, -12, 0, 16), -- Height of the label itself
					Position = UDim2.new(0, 0, 0, 3), -- Small top margin
					Font = Enum.Font.GothamSemibold
				}), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), {
					AnchorPoint = Vector2.new(0, 0),
					Size = UDim2.new(1, 0, 0, 0), -- Let UIListLayout determine height
					Position = UDim2.new(0, 0, 0, 23), -- Position below the section name label
					Name = "Holder",
                    AutomaticSize = Enum.AutomaticSize.Y
				}), {
					MakeElement("List", 0, 6)
				}),
			})
            -- No need to manually adjust SectionFrame size if AutomaticSize Y is on both SectionFrame and Holder
            -- The UIListLayout in Holder will push its size, and Holder will push SectionFrame's size.

			local SectionFunction = {}
			for i, v in next, GetElements(SectionFrame.Holder) do
				SectionFunction[i] = v	
			end
			return SectionFunction
		end	

		for i, v in next, GetElements(Container) do
			ElementFunction[i] = v	
		end

		if TabConfig.PremiumOnly then
			for i, v in next, ElementFunction do
				ElementFunction[i] = function() warn("[OrionLib] Attempted to use a premium feature: " .. tostring(i)) end -- Add warning
			end	 
            if Container:FindFirstChild("UIListLayout") then Container:FindFirstChild("UIListLayout"):Destroy() end
			if Container:FindFirstChild("UIPadding") then Container:FindFirstChild("UIPadding"):Destroy() end
			
			SetChildren(SetProps(MakeElement("TFrame"), { 
				Size = UDim2.new(1, 0, 1, 0),
				Parent = Container 
			}), {
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0, 15, 0, 15),
					ImageTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Unauthorised Access", 14), {
					Size = UDim2.new(1, -38, 0, 14),
					Position = UDim2.new(0, 38, 0, 18),
					TextTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345875"), {
					Size = UDim2.new(0, 56, 0, 56),
					Position = UDim2.new(0, 84, 0, 110), -- Consider centering this content or making it responsive
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Premium Features", 14), {
					Size = UDim2.new(1, -150, 0, 14),
					Position = UDim2.new(0, 150, 0, 112),
					Font = Enum.Font.GothamBold
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "This part of the script is locked to Sirius Premium users. Purchase Premium in the Discord server (discord.gg/sirius)", 12), {
					Size = UDim2.new(1, -160, 0, 0), -- Adjust width, height automatic
                    AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0, 150, 0, 138),
					TextWrapped = true,
					TextTransparency = 0.4
				}), "Text")
			})
		end
		return ElementFunction	
	end	
	
	return TabFunction
end	 

function OrionLib:Destroy()
    for _, Connection in pairs(OrionLib.Connections) do
        if Connection then Connection:Disconnect() end
    end
    table.clear(OrionLib.Connections)
    table.clear(OrionLib.Elements)
    table.clear(OrionLib.ThemeObjects)
    table.clear(OrionLib.Flags)
    
	if Orion and Orion.Parent then Orion:Destroy() end
    Orion = nil -- Clear reference
end

return OrionLib
