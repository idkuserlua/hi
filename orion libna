local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
getgenv().gethui = getgenv().gethui or function() return game:GetService("CoreGui") end -- Ensure gethui exists

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
		Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(50, 50, 50), -- Slightly adjusted for better contrast potentially
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

-- Feather Icons
local Icons = {}
local IconSuccess, IconResponse = pcall(function()
	local rawJson = game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")
	Icons = HttpService:JSONDecode(rawJson).icons
end)

if not IconSuccess then
	warn("OrionLib: Failed to load icons. Error:", IconResponse)
end

local function GetIcon(IconName)
	return Icons[IconName] -- Returns nil if not found, handled by MakeElement("Image")
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion_" .. HttpService:GenerateGUID(false):sub(1,8) -- More unique name
Orion.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Orion.ResetOnSpawn = false -- Persist across respawns

if syn and syn.protect_gui then
	syn.protect_gui(Orion)
end
Orion.Parent = gethui()

-- Destroy duplicate Orion UIs
for _, child in ipairs(gethui():GetChildren()) do
	if child:IsA("ScreenGui") and child.Name:match("^Orion_") and child ~= Orion then
		child:Destroy()
	end
end

function OrionLib:IsRunning()
	return Orion.Parent == gethui()
end

local function AddConnection(Signal, Function)
	if not OrionLib:IsRunning() then return { Disconnect = function() end } end -- Return a dummy connection if not running
	local connection = Signal:Connect(Function)
	table.insert(OrionLib.Connections, connection)
	return connection
end

task.spawn(function()
	while OrionLib:IsRunning() do
		task.wait()
	end
	for _, connection in ipairs(OrionLib.Connections) do
		if connection then connection:Disconnect() end
	end
	table.clear(OrionLib.Connections)
end)

local function MakeDraggableOriginal(DragPoint, Main)
	local Dragging, DragInput, MousePos, FramePos
	AddConnection(DragPoint.InputBegan, function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
			Dragging = true
			MousePos = Input.Position
			FramePos = Main.Position
			local changedConn
			changedConn = Input.Changed:Connect(function()
				if Input.UserInputState == Enum.UserInputState.End then
					Dragging = false
					if changedConn then changedConn:Disconnect() end
				end
			end)
		end
	end)
	AddConnection(DragPoint.InputChanged, function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
			DragInput = Input
		end
	end)
	AddConnection(UserInputService.InputChanged, function(Input)
		if Dragging and Input == DragInput then
			local Delta = Input.Position - MousePos
			Main.Position = UDim2.new(FramePos.X.Scale, FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
		end
	end)
end

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for prop, val in pairs(Properties or {}) do
		Object[prop] = val
	end
	for _, child in ipairs(Children or {}) do
		child.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	if OrionLib.Elements[ElementName] then
		return OrionLib.Elements[ElementName](...)
	end
	warn("OrionLib: Element type '" .. ElementName .. "' not found.")
	return nil
end

local function SetProps(Element, Props)
	for Property, Value in pairs(Props) do
		Element[Property] = Value
	end
	return Element
end

local function SetChildren(Element, Children)
	for _, Child in ipairs(Children) do
		Child.Parent = Element
	end
	return Element
end

local function Round(Number, Factor)
    Factor = Factor == 0 and 1 or Factor -- Avoid division by zero if Factor is 0
	local Result = math.floor(Number/Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 and Number > 0 and Factor > 0 then Result = Result + Factor end -- Correction for positive numbers rounding down to negative
	return Result
end

local function ReturnProperty(Object)
	if not Object or not Object.IsA then return nil end

	if Object:IsA("Frame") or Object:IsA("TextButton") or Object:IsA("ImageButton") then
		return "BackgroundColor3"
	elseif Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	elseif Object:IsA("UIStroke") then
		return "Color"
	elseif Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	elseif Object:IsA("ImageLabel") then
		return "ImageColor3"
	end
	return nil
end

local function AddThemeObject(Object, Type)
	if not Object then return nil end
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local propName = ReturnProperty(Object)
	local themeColor = OrionLib.Themes[OrionLib.SelectedTheme][Type]

	if propName and themeColor then
		Object[propName] = themeColor
	elseif propName and not themeColor then
		-- warn("OrionLib: Theme type '"..Type.."' not found in selected theme for object:", Object:GetFullName())
	end
	return Object
end

local function SetTheme()
	for Name, TypeGroup in pairs(OrionLib.ThemeObjects) do
		local themeColor = OrionLib.Themes[OrionLib.SelectedTheme][Name]
		if themeColor then
			for _, Object in ipairs(TypeGroup) do
				local propName = ReturnProperty(Object)
				if propName and Object and Object.Parent then -- Check if object still exists
					Object[propName] = themeColor
				end
			end
		end
	end
end

local function PackColor(Color)
	return {R = math.floor(Color.R * 255), G = math.floor(Color.G * 255), B = math.floor(Color.B * 255)}
end

local function UnpackColor(ColorTable)
    if ColorTable and type(ColorTable.R) == "number" and type(ColorTable.G) == "number" and type(ColorTable.B) == "number" then
	    return Color3.fromRGB(ColorTable.R, ColorTable.G, ColorTable.B)
    end
    return Color3.fromRGB(255,255,255) -- Default color if unpacking fails
end

local function LoadCfg(ConfigContent)
	local success, Data = pcall(HttpService.JSONDecode, HttpService, ConfigContent)
	if not success then
		warn("OrionLib: Failed to decode config data:", Data)
		return
	end
	for flagName, flagValue in pairs(Data) do
		if OrionLib.Flags[flagName] and OrionLib.Flags[flagName].Set then
			task.spawn(function()
				local setSuccess, setError = pcall(OrionLib.Flags[flagName].Set, OrionLib.Flags[flagName], flagValue)
                if not setSuccess then
                    warn("OrionLib: Error setting flag '"..flagName.."' from config:", setError)
                end
			end)
		end
	end
end

local function SaveCfg(Name)
	if not OrionLib.SaveCfg or not writefile then return end
	local Data = {}
	for flagName, flagData in pairs(OrionLib.Flags) do
		if flagData.Save and flagData.Value ~= nil then -- Ensure Value exists
			if flagData.Type == "Colorpicker" then
				Data[flagName] = PackColor(flagData.Value)
			else
				Data[flagName] = flagData.Value
			end
		end
	end
	local success, encodedData = pcall(HttpService.JSONEncode, HttpService, Data)
	if success then
		local writeSuccess, writeError = pcall(writefile, OrionLib.Folder .. "/" .. Name .. ".json", encodedData) -- Save as .json
        if not writeSuccess then warn("OrionLib: Failed to write config file:", writeError) end
	else
		warn("OrionLib: Failed to encode data for saving:", encodedData)
	end
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3, Enum.UserInputType.Touch}
local BlacklistedKeysForBind = {Enum.KeyCode.Unknown, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.KeyCode.Up, Enum.KeyCode.Left, Enum.KeyCode.Down, Enum.KeyCode.Right, Enum.KeyCode.Slash, Enum.KeyCode.Tab, Enum.KeyCode.Escape}

local function IsKeyBlacklistedForBind(Key)
	for _, v in ipairs(BlacklistedKeysForBind) do
		if v == Key then return true end
	end
	return false
end

CreateElement("Corner", function(Scale, Offset)
	return Create("UICorner", { CornerRadius = UDim.new(Scale or 0, Offset or 6) }) -- Defaulted to 6
end)

CreateElement("Stroke", function(Color, Thickness)
	return Create("UIStroke", { Color = Color or OrionLib.Themes.Default.Stroke, Thickness = Thickness or 1, ApplyStrokeMode = Enum.ApplyStrokeMode.Border })
end)

CreateElement("List", function(Scale, Offset)
	return Create("UIListLayout", { SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(Scale or 0, Offset or 0) })
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	return Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4), PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4), PaddingTop = UDim.new(0, Top or 4)
	})
end)

CreateElement("TFrame", function() return Create("Frame", { BackgroundTransparency = 1 }) end)

CreateElement("Frame", function(Color)
	return Create("Frame", { BackgroundColor3 = Color or OrionLib.Themes.Default.Main, BorderSizePixel = 0 })
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	return Create("Frame", {
		BackgroundColor3 = Color or OrionLib.Themes.Default.Main,
		BorderSizePixel = 0
	}, { CreateElement("Corner", Scale, Offset or 6) })
end)

CreateElement("Button", function()
	return Create("TextButton", { Text = "", AutoButtonColor = false, BackgroundTransparency = 1, BorderSizePixel = 0 })
end)

CreateElement("ScrollFrame", function(Color, Width)
	return Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667", BottomImage = "rbxassetid://7445543667", TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color or OrionLib.Themes.Default.Divider,
		BorderSizePixel = 0, ScrollBarThickness = Width or 5, CanvasSize = UDim2.new(0,0,0,0)
	})
end)

CreateElement("Image", function(ImageID)
	local actualId = GetIcon(ImageID) or ImageID or ""
	return Create("ImageLabel", { Image = actualId, BackgroundTransparency = 1, ScaleType = Enum.ScaleType.Fit })
end)

CreateElement("ImageButton", function(ImageID)
	local actualId = GetIcon(ImageID) or ImageID or ""
	return Create("ImageButton", { Image = actualId, BackgroundTransparency = 1, ScaleType = Enum.ScaleType.Fit })
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	return Create("TextLabel", {
		Text = Text or "", TextColor3 = OrionLib.Themes.Default.Text, TextTransparency = Transparency or 0,
		TextSize = TextSize or 14, Font = Enum.Font.GothamSemibold, RichText = true, BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), { HorizontalAlignment = Enum.HorizontalAlignment.Right, SortOrder = Enum.SortOrder.LayoutOrder, VerticalAlignment = Enum.VerticalAlignment.Bottom, Padding = UDim.new(0, 5) })
}), { Position = UDim2.new(1, -10, 1, -10), Size = UDim2.new(0, 320, 1, -25), AnchorPoint = Vector2.new(1, 1), Parent = Orion })

function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function()
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 5 -- Default 5 seconds

		local notificationParent = SetProps(MakeElement("TFrame"), { Size = UDim2.new(1,0,0,0), AutomaticSize = Enum.AutomaticSize.Y, Parent = NotificationHolder })
		local notificationFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 8), {
			Parent = notificationParent, Size = UDim2.new(1,0,0,0), Position = UDim2.new(1.2,0,0,0), -- Start off-screen
			AutomaticSize = Enum.AutomaticSize.Y, ClipsDescendants = true,
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"), MakeElement("Padding", 8,8,8,8),
			SetChildren(MakeElement("TFrame"), { MakeElement("List",0,8), Size=UDim2.new(1,0,0,0), AutomaticSize=Enum.AutomaticSize.Y }, {
				SetChildren(MakeElement("TFrame"), { MakeElement("List",0,8), Size=UDim2.new(1,0,0,20), HorizontalAlignment = Enum.HorizontalAlignment.Left}, {
					AddThemeObject(SetProps(MakeElement("Image", NotificationConfig.Image), {Size = UDim2.new(0,20,0,20)}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "<b>"..NotificationConfig.Name.."</b>", 15), {Size = UDim2.new(1,-30,0,20)}), "Text"),
				}),
				AddThemeObject(SetProps(MakeElement("Label", NotificationConfig.Content, 13), {Size = UDim2.new(1,0,0,0), TextWrapped = true, AutomaticSize = Enum.AutomaticSize.Y}), "TextDark")
			})
		}), "Main")

		TweenService:Create(notificationFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0,0,0,0)}):Play()
		task.wait(NotificationConfig.Time)
		TweenService:Create(notificationFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.In), {Position = UDim2.new(1.2,0,0,0)}):Play()
		task.wait(0.3)
		notificationParent:Destroy()
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg and readfile and isfile then
		task.spawn(function()
			local configPath = OrionLib.Folder .. "/" .. tostring(game.GameId) .. ".json"
            local readSuccess, content = pcall(readfile, configPath)
			if readSuccess and content and content ~= "" then
				LoadCfg(content)
				OrionLib:MakeNotification({ Name = "Configuration", Content = "Settings loaded for this game.", Time = 3 })
			elseif not readSuccess then
                -- warn("OrionLib: Could not read config file or it's empty.", content)
            end
		end)
	end
end

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	local UIHidden = false

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	WindowConfig.IntroEnabled = WindowConfig.IntroEnabled == nil and true or WindowConfig.IntroEnabled
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103" -- Default Orion icon
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or WindowConfig.Icon -- Use main icon if intro not specified
	WindowConfig.SearchBar = WindowConfig.SearchBar -- Keep as is, nil if not provided

	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.SaveConfig and makefolder and isfolder and not isfolder(WindowConfig.ConfigFolder) then
		makefolder(WindowConfig.ConfigFolder)
	end

	local Tabs = {};

	local tabHolderYOffset = WindowConfig.SearchBar and 40 or 0
	local tabHolderHeightReduction = WindowConfig.SearchBar and -90 or -50

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 4), {
		Size = UDim2.new(1, 0, 1, tabHolderHeightReduction),
		Position = UDim2.new(0, 0, 0, tabHolderYOffset)
	}), { MakeElement("List", 0, 0), MakeElement("Padding", 6, 6, 6, 6) }), "Divider")

	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + TabHolder.UIPadding.PaddingTop.Offset + TabHolder.UIPadding.PaddingBottom.Offset)
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {Size=UDim2.new(0.5,0,1,0),Position=UDim2.new(0.5,0,0,0)}),{AddThemeObject(SetProps(MakeElement("Image","x"),{Size=UDim2.new(0,16,0,16),Position=UDim2.new(0.5,0,0.5,0),AnchorPoint=Vector2.new(0.5,0.5)}),"Text")})
	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"),{Size=UDim2.new(0.5,0,1,0)}),{AddThemeObject(SetProps(MakeElement("Image","minus"),{Size=UDim2.new(0,16,0,16),Position=UDim2.new(0.5,0,0.5,0),AnchorPoint=Vector2.new(0.5,0.5),Name="Ico"}),"Text")})
	local DragPoint = SetProps(MakeElement("TFrame"), { Size = UDim2.new(1, 0, 0, 50) })

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 8), {
		Size = UDim2.new(0, 160, 1, -50), Position = UDim2.new(0,0,0,50), ClipsDescendants = true
	}), {
		-- Top decorative bar inside WindowStuff (left panel)
		AddThemeObject(SetProps(MakeElement("Frame"), { Size = UDim2.new(1,0,0,8), Position = UDim2.new(0,0,0,0) }), "Second"),
		-- Right decorative bar
		AddThemeObject(SetProps(MakeElement("Frame"), { Size = UDim2.new(0,8,1,0), Position = UDim2.new(1,-8,0,0) }), "Second"),
		-- Right stroke
		AddThemeObject(SetProps(MakeElement("Frame"), { Size = UDim2.new(0,1,1,0), Position = UDim2.new(1,-1,0,0) }), "Stroke"),
		TabHolder,
		-- Bottom user info section
		SetChildren(SetProps(MakeElement("TFrame"), { Size = UDim2.new(1,0,0,50), Position = UDim2.new(0,0,1,-50)}),{
			AddThemeObject(SetProps(MakeElement("Frame"), {Size = UDim2.new(1,0,0,1)}), "Stroke"), -- Top line for this section
			SetChildren(MakeElement("TFrame"), { -- Avatar and text holder
				Size=UDim2.new(1,-10,1,-10), Position=UDim2.new(0.5,0,0.5,0), AnchorPoint=Vector2.new(0.5,0.5),
				MakeElement("List", 0, 8), HorizontalAlignment = Enum.HorizontalAlignment.Left
			}, {
				AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 1,0), { -- Avatar image holder (circular)
					Size = UDim2.new(0,32,0,32), ClipsDescendants = true,
				}), {
					MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. LocalPlayer.UserId .."&width=420&height=420&format=png"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Divider"),
				SetChildren(MakeElement("TFrame"), { Size = UDim2.new(1,-40,0,0), AutomaticSize = Enum.AutomaticSize.Y, MakeElement("List",0,2)}, { -- Text next to avatar
					AddThemeObject(SetProps(MakeElement("Label", "<b>"..LocalPlayer.DisplayName.."</b>", WindowConfig.HidePremium and 13 or 12),{ClipsDescendants=true, Size=UDim2.new(1,0,0,14)}), "Text"),
					WindowConfig.HidePremium and nil or AddThemeObject(SetProps(MakeElement("Label", "@"..LocalPlayer.Name, 11),{Size=UDim2.new(1,0,0,12)}), "TextDark"),
				})
			})
		})
	}), "Second")

	if WindowConfig.SearchBar then
		local searchBox = Create("TextBox", {
			Size = UDim2.new(1, -12, 1, -8), Position = UDim2.new(0.5,0,0.5,0), AnchorPoint = Vector2.new(0.5,0.5),
			BackgroundTransparency = 1, PlaceholderText = WindowConfig.SearchBar.Default or "🔍 Search...",
			Font = Enum.Font.GothamSemibold, Text = '', TextXAlignment = Enum.TextXAlignment.Left, TextSize = 13,
			ClearTextOnFocus = WindowConfig.SearchBar.ClearTextOnFocus == nil and true or WindowConfig.SearchBar.ClearTextOnFocus
		})
		local themedSearchBox = AddThemeObject(searchBox, "Text")
		themedSearchBox.PlaceholderColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark

		local searchBarFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), {
			Parent = WindowStuff, Size = UDim2.new(1, -12, 0, 30), Position = UDim2.new(0.5,0,0,5), AnchorPoint = Vector2.new(0.5,0) -- Centered top
		}), { AddThemeObject(MakeElement("Stroke"), "Stroke"), themedSearchBox }), "Main")

		AddConnection(themedSearchBox:GetPropertyChangedSignal("Text"), function()
			local searchText = string.lower(themedSearchBox.Text)
			for tabName, tabButton in pairs(Tabs) do
				if tabButton and tabButton.Parent then
					tabButton.Visible = string.find(string.lower(tabName), searchText) ~= nil
				end
			end
		end)
	end

	local windowNameLabel = AddThemeObject(SetProps(MakeElement("Label", "<b>"..WindowConfig.Name.."</b>", 18), {
		Size = UDim2.new(1, -100, 1, 0), Position = UDim2.new(0, (WindowConfig.ShowIcon and 45 or 15), 0,0),
		TextXAlignment = Enum.TextXAlignment.Left, VerticalAlignment = Enum.VerticalAlignment.Center,
		Font = Enum.Font.GothamBold
	}), "Text")

	local topBar = SetChildren(SetProps(MakeElement("TFrame"), { Size=UDim2.new(1,0,0,50), Name="TopBar" }), {
		windowNameLabel,
		AddThemeObject(SetProps(MakeElement("Frame"),{Size=UDim2.new(1,0,0,1),Position=UDim2.new(0,0,1,-1)}),"Stroke"), -- Bottom line of top bar
		AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,6),{Size=UDim2.new(0,60,0,28),Position=UDim2.new(1,-10,0.5,0),AnchorPoint=Vector2.new(1,0.5)}),{
			AddThemeObject(MakeElement("Stroke"),"Stroke"),
			AddThemeObject(SetProps(MakeElement("Frame"),{Size=UDim2.new(0,1,0.8,0),Position=UDim2.new(0.5,0,0.5,0),AnchorPoint=Vector2.new(0.5,0.5)}),"Stroke"), -- Separator
			CloseBtn, MinimizeBtn
		}),"Second")
	})

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 8), {
		Parent = Orion, Position = UDim2.fromOffset(Orion.AbsoluteSize.X/2 - 300, Orion.AbsoluteSize.Y/2 - 200), -- Centered
		Size = UDim2.new(0,600,0,400), ClipsDescendants = true
	}), { topBar, DragPoint, WindowStuff }), "Main")
    MakeDraggableOriginal(DragPoint, MainWindow) -- Make main window draggable by its DragPoint (topBar area)

	if WindowConfig.ShowIcon then
		local windowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0,22,0,22), Position = UDim2.new(0,15,0.5,0), AnchorPoint = Vector2.new(0,0.5), Parent = topBar
		})
	end


	local mobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
		Parent = Orion, Size = UDim2.new(0,44,0,44), Position = UDim2.new(0.02,0,0.98,-44-10), -- Bottom-left
		BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main, Visible = false, AnchorPoint = Vector2.new(0,1)
	}), { AddThemeObject(SetProps(MakeElement("Image","menu"),{Size=UDim2.new(0.6,0,0.6,0),Position=UDim2.new(0.5,0,0.5,0),AnchorPoint=Vector2.new(0.5,0.5)}),"Text"), MakeElement("Corner",1,0), AddThemeObject(MakeElement("Stroke"),"Stroke")})

	local function MakeButtonDraggable(button)
		local dragging, dragStart, startPos, moveConn
		AddConnection(button.InputBegan, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true; dragStart = input.Position; startPos = button.Position
				if moveConn then moveConn:Disconnect() end
				moveConn = UserInputService.InputChanged:Connect(function(subInput)
					if dragging and (subInput.UserInputType == Enum.UserInputType.MouseMovement or subInput.UserInputType == Enum.UserInputType.Touch) then
						local delta = subInput.Position - dragStart
						local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                        -- Clamp position to screen bounds
                        local parentSize = button.Parent.AbsoluteSize
                        local newOffsetX = math.clamp(newPos.X.Offset, 0, parentSize.X - button.AbsoluteSize.X)
                        local newOffsetY = math.clamp(newPos.Y.Offset, 0, parentSize.Y - button.AbsoluteSize.Y)
						button.Position = UDim2.new(0, newOffsetX, 0, newOffsetY)
					end
				end)
			end
		end)
		AddConnection(UserInputService.InputEnded, function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = false
				if moveConn then moveConn:Disconnect(); moveConn = nil; end
			end
		end)
	end
	MakeButtonDraggable(mobileReopenButton)

	AddConnection(CloseBtn.MouseButton1Click, function()
		MainWindow.Visible = false; mobileReopenButton.Visible = true; UIHidden = true
		OrionLib:MakeNotification({ Name = "Interface Hidden", Content = "Tap the menu icon or press 'M' to reopen.", Time = 3 })
		task.spawn(WindowConfig.CloseCallback)
	end)

	AddConnection(UserInputService.InputBegan, function(Input)
		if UserInputService:GetFocusedTextBox() then return end
		if Input.KeyCode == Enum.KeyCode.M then
			UIHidden = MainWindow.Visible -- If window is visible, UIHidden will become true
			MainWindow.Visible = not UIHidden
			mobileReopenButton.Visible = UIHidden
		end
	end)

	AddConnection(mobileReopenButton.MouseButton1Click, function()
		MainWindow.Visible = true; mobileReopenButton.Visible = false; UIHidden = false
	end)

	AddConnection(MinimizeBtn.MouseButton1Click, function()
		Minimized = not Minimized
		local targetSize = Minimized and UDim2.new(0, windowNameLabel.TextBounds.X + (WindowConfig.ShowIcon and 70 or 40) + 60, 0, 50) or UDim2.new(0,600,0,400)
		MinimizeBtn.Ico.Image = Minimized and "square" or "minus" -- Lucide icons: 'square' for restore, 'minus' for minimize
        WindowStuff.Visible = not Minimized
        MainWindow.ClipsDescendants = Minimized
        topBar:FindFirstChildOfClass("UIStroke").Enabled = not Minimized -- Toggle bottom line visibility

		TweenService:Create(MainWindow, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = targetSize}):Play()
	end)

	local function LoadSequence()
		MainWindow.Visible = false
		local introHolder = Create("Frame", {Parent=Orion, Size=UDim2.fromScale(1,1), BackgroundTransparency=1})
		local logo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {Parent=introHolder, AnchorPoint=Vector2.new(0.5,0.5), Position=UDim2.new(0.5,0,0.45,0), Size=UDim2.new(0,36,0,36), ImageTransparency=1})
		local text = SetProps(MakeElement("Label", "<b>"..WindowConfig.IntroText.."</b>", 16), {Parent=introHolder, AnchorPoint=Vector2.new(0.5,0.5), Position=UDim2.new(0.5,0,0.55,0), TextXAlignment=Enum.TextXAlignment.Center, TextTransparency=1})

		TweenService:Create(logo, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {ImageTransparency=0, Position=UDim2.new(0.5,0,0.5,-10)}):Play()
		TweenService:Create(text, TweenInfo.new(0.4, Enum.EasingStyle.Quad), {TextTransparency=0, Position=UDim2.new(0.5,0,0.5,20)}):Play()
		task.wait(1.5)
		TweenService:Create(logo, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {ImageTransparency=1}):Play()
		local textOutTween = TweenService:Create(text, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {TextTransparency=1})
		textOutTween:Play()
        textOutTween.Completed:Wait()
		MainWindow.Visible = true
		introHolder:Destroy()
	end

	if WindowConfig.IntroEnabled then LoadSequence() else MainWindow.Visible = true end

	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Unnamed Tab"
		TabConfig.Icon = TabConfig.Icon or "file-text" -- Default Lucide icon
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

		local tabFrame = AddThemeObject(SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1,0,0,36), Parent = TabHolder, BackgroundTransparency = 0.8 -- Slight background for inactive tabs
		}), {
			MakeElement("List",0,8), HorizontalAlignment = Enum.HorizontalAlignment.Left, PaddingLeft = UDim.new(0,10),
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon),{Size=UDim2.new(0,18,0,18), Name="Ico", ImageTransparency=0.3}),"Text"),
			AddThemeObject(SetProps(MakeElement("Label", "<b>"..TabConfig.Name.."</b>", 13),{Size=UDim2.new(1,-30,1,0), Name="Title", TextTransparency=0.3}),"Text"),
			Create("UICorner", {CornerRadius = UDim.new(0,4)}) -- Softer corners for tabs
		}), "Second") -- Theme background

		Tabs[TabConfig.Name] = tabFrame

		local itemContainer = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), {
			Size = UDim2.new(1,-160,1,-50), Position = UDim2.new(0,160,0,50), Parent = MainWindow, Visible = false, Name = "ItemContainer"
		}), { MakeElement("List",0,8), MakeElement("Padding",10,10,10,10) }), "Divider")

		AddConnection(itemContainer.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			itemContainer.CanvasSize = UDim2.new(0,0,0, itemContainer.UIListLayout.AbsoluteContentSize.Y + itemContainer.UIPadding.PaddingTop.Offset + itemContainer.UIPadding.PaddingBottom.Offset)
		end)

		if FirstTab and not (TabConfig.PremiumOnly and WindowConfig.HidePremium) then
			FirstTab = false
			tabFrame.BackgroundTransparency = 0.5
			tabFrame.Ico.ImageTransparency = 0
			tabFrame.Title.TextTransparency = 0
			itemContainer.Visible = true
		elseif TabConfig.PremiumOnly and WindowConfig.HidePremium then
            tabFrame.Visible = false -- Hide premium tab if HidePremium is true
            itemContainer.Visible = false
        end

		AddConnection(tabFrame.MouseButton1Click, function()
            if TabConfig.PremiumOnly and WindowConfig.HidePremium then return end -- Don't interact if fully hidden

			for _, otherTabButton in ipairs(TabHolder:GetChildren()) do
				if otherTabButton:IsA("TextButton") and otherTabButton:FindFirstChild("Ico") then
					otherTabButton.BackgroundTransparency = 0.8
					otherTabButton.Ico.ImageTransparency = 0.3
					otherTabButton.Title.TextTransparency = 0.3
				end
			end
			for _, otherContainer in ipairs(MainWindow:GetChildren()) do
				if otherContainer.Name == "ItemContainer" then otherContainer.Visible = false end
			end
			tabFrame.BackgroundTransparency = 0.5
			tabFrame.Ico.ImageTransparency = 0
			tabFrame.Title.TextTransparency = 0
			itemContainer.Visible = true
		end)

		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLabel(Text)
				local labelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,30),Parent=ItemParent}),{
					AddThemeObject(SetProps(MakeElement("Label","<b>"..Text.."</b>",14),{Size=UDim2.new(1,-16,1,0),Position=UDim2.new(0,8,0,0),TextXAlignment=Enum.TextXAlignment.Left,VerticalAlignment=Enum.VerticalAlignment.Center}),"Text"),
					AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local func = {}
				function func:Set(newText) labelFrame.TextLabel.Text = "<b>"..newText.."</b>" end
				return func
			end
			function ElementFunction:AddParagraph(Title, Content)
				local paragraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,0),AutomaticSize=Enum.AutomaticSize.Y,Parent=ItemParent}),{
					MakeElement("List",0,4),MakeElement("Padding",6,8,8,6),
					AddThemeObject(SetProps(MakeElement("Label","<b>"..Title.."</b>",14),{Size=UDim2.new(1,0,0,16)}),"Text"),
					AddThemeObject(SetProps(MakeElement("Label",Content,13),{Size=UDim2.new(1,0,0,0),AutomaticSize=Enum.AutomaticSize.Y,TextWrapped=true}),"TextDark"),
					AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local func = {}
				function func:Set(newContent) paragraphFrame:FindFirstChildWhichIsA("TextLabel",true).Text = newContent end -- Find the content label
				return func
			end
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}; ButtonConfig.Name = ButtonConfig.Name or "Button"; ButtonConfig.Callback = ButtonConfig.Callback or function()end; ButtonConfig.Icon = ButtonConfig.Icon
				local btn = {}
				local buttonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,34),Parent=ItemParent}),{
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{
						MakeElement("List",0,8),HorizontalAlignment=Enum.HorizontalAlignment.Center,VerticalAlignment=Enum.VerticalAlignment.Center,
						ButtonConfig.Icon and AddThemeObject(SetProps(MakeElement("Image",ButtonConfig.Icon),{Size=UDim2.new(0,16,0,16)}),"TextDark") or nil,
						AddThemeObject(SetProps(MakeElement("Label","<b>"..ButtonConfig.Name.."</b>",13),{Size=UDim2.new(0,0,0,16),AutomaticSize=Enum.AutomaticSize.X}),"Text")
					}),
					AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local clickRegion = buttonFrame.ClickRegion
				AddConnection(clickRegion.MouseEnter,function()TweenService:Create(buttonFrame,TweenInfo.new(0.15),{BackgroundColor3=OrionLib.Themes[OrionLib.SelectedTheme].Main}):Play()end)
				AddConnection(clickRegion.MouseLeave,function()TweenService:Create(buttonFrame,TweenInfo.new(0.15),{BackgroundColor3=OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()end)
				AddConnection(clickRegion.MouseButton1Click,function()task.spawn(ButtonConfig.Callback)end)
				function btn:Set(text) clickRegion:FindFirstChildWhichIsA("TextLabel").Text = "<b>"..text.."</b>" end
				return btn
			end
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}; ToggleConfig.Name = ToggleConfig.Name or "Toggle"; ToggleConfig.Default = ToggleConfig.Default or false; ToggleConfig.Callback = ToggleConfig.Callback or function()end; ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(0,120,255); ToggleConfig.Flag = ToggleConfig.Flag; ToggleConfig.Save = ToggleConfig.Save or false
				local toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type="Toggle"}
				local toggleBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,4),{Size=UDim2.new(0,40,0,20)}),{ -- Wider toggle box
					AddThemeObject(SetProps(MakeElement("RoundFrame",nil,1,0),{Size=UDim2.new(0,16,0,16),Position=UDim2.new(0,2,0.5,0),AnchorPoint=Vector2.new(0,0.5),Name="Nub"}),"Text"), -- Nub
					AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Divider")
				local toggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,38),Parent=ItemParent}),{
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{
						MakeElement("List",0,0),HorizontalAlignment=Enum.HorizontalAlignment.Right,PaddingRight=UDim.new(0,10),PaddingLeft=UDim.new(0,10),VerticalAlignment=Enum.VerticalAlignment.Center,
						AddThemeObject(SetProps(MakeElement("Label","<b>"..ToggleConfig.Name.."</b>",13),{Size=UDim2.new(1,-55,1,0),TextXAlignment=Enum.TextXAlignment.Left}),"Text"),toggleBox
					}), AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local clickRegion = toggleFrame.ClickRegion
				function toggle:Set(val, noCallback)
					toggle.Value = val
					local targetColor = toggle.Value and ToggleConfig.Color or OrionLib.Themes[OrionLib.SelectedTheme].Divider
					local nubPos = toggle.Value and UDim2.new(1,-18,0.5,0) or UDim2.new(0,2,0.5,0)
					TweenService:Create(toggleBox,TweenInfo.new(0.2),{BackgroundColor3=targetColor}):Play()
					TweenService:Create(toggleBox.Nub,TweenInfo.new(0.2),{Position=nubPos}):Play()
					if not noCallback then task.spawn(ToggleConfig.Callback, toggle.Value) end
				end
				toggle:Set(toggle.Value, true)
				AddConnection(clickRegion.MouseButton1Click,function()toggle:Set(not toggle.Value); if toggle.Save then SaveCfg(tostring(game.GameId))end end)
				if ToggleConfig.Flag then OrionLib.Flags[ToggleConfig.Flag] = toggle end
				return toggle
			end
			function ElementFunction:AddSlider(SliderCFG)
				SliderCFG = SliderCFG or {}; SliderCFG.Name = SliderCFG.Name or "Slider"; SliderCFG.Min = SliderCFG.Min or 0; SliderCFG.Max = SliderCFG.Max or 100; SliderCFG.Increment = SliderCFG.Increment or 1; SliderCFG.Default = SliderCFG.Default or SliderCFG.Min; SliderCFG.Callback = SliderCFG.Callback or function()end; SliderCFG.ValueName = SliderCFG.ValueName or ""; SliderCFG.Color = SliderCFG.Color or Color3.fromRGB(0,120,255); SliderCFG.Flag = SliderCFG.Flag; SliderCFG.Save = SliderCFG.Save or false
				local slider = {Value = SliderCFG.Default, Save = SliderCFG.Save, Type="Slider"}
				local dragging = false
				local sliderFill = AddThemeObject(SetProps(MakeElement("RoundFrame",SliderCFG.Color,0,4),{Size=UDim2.new(0,0,1,0),ZIndex=2}),"Text")
				local sliderValueLabel = AddThemeObject(SetProps(MakeElement("Label","",12),{Size=UDim2.new(1,0,1,0),TextXAlignment=Enum.TextXAlignment.Center,ZIndex=3}),"Text")
				local sliderTrack = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,4),{Size=UDim2.new(1,-10,0,20),ClipsDescendants=true,ZIndex=1}),{sliderFill,sliderValueLabel,AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Divider")
				local sliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,60),Parent=ItemParent}),{
					MakeElement("List",0,4),MakeElement("Padding",6,8,8,6),
					SetChildren(MakeElement("TFrame"),{Size=UDim2.new(1,0,0,16),MakeElement("List",0,5)},{
						AddThemeObject(SetProps(MakeElement("Label","<b>"..SliderCFG.Name.."</b>",13),{Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X}),"Text"),
						AddThemeObject(SetProps(MakeElement("Label","",12),{Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X,Name="CurrentValueDisplay"}),"TextDark")
					}), sliderTrack, AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local currentValueDisplay = sliderFrame:FindFirstChild("CurrentValueDisplay",true)

				function slider:Set(val, noCallback)
					local clampedVal = math.clamp(Round(val, SliderCFG.Increment), SliderCFG.Min, SliderCFG.Max)
					slider.Value = clampedVal
					local percentage = (clampedVal - SliderCFG.Min) / (SliderCFG.Max - SliderCFG.Min)
					if SliderCFG.Max == SliderCFG.Min then percentage = 0 end -- Avoid NaN

					sliderFill.Size = UDim2.new(percentage,0,1,0)
					local valText = tostring(slider.Value).." "..SliderCFG.ValueName
					sliderValueLabel.Text = valText
                    currentValueDisplay.Text = "("..valText..")"
					if not noCallback then task.spawn(SliderCFG.Callback, slider.Value) end
				end
				slider:Set(slider.Value, true)

				local inputBeganConn, inputChangedConn, inputEndedConn
				inputBeganConn = AddConnection(sliderTrack.InputBegan,function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging = true
						local relativeX = input.Position.X - sliderTrack.AbsolutePosition.X
						local percentage = math.clamp(relativeX / sliderTrack.AbsoluteSize.X, 0, 1)
						slider:Set(SliderCFG.Min + percentage * (SliderCFG.Max - SliderCFG.Min)); if slider.Save then SaveCfg(tostring(game.GameId))end
					end
				end)
				inputChangedConn = AddConnection(UserInputService.InputChanged,function(input)
					if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
						local relativeX = input.Position.X - sliderTrack.AbsolutePosition.X
						local percentage = math.clamp(relativeX / sliderTrack.AbsoluteSize.X, 0, 1)
						slider:Set(SliderCFG.Min + percentage * (SliderCFG.Max - SliderCFG.Min)); if slider.Save then SaveCfg(tostring(game.GameId))end
					end
				end)
				inputEndedConn = AddConnection(UserInputService.InputEnded,function(input)if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then dragging = false end end)
				if SliderCFG.Flag then OrionLib.Flags[SliderCFG.Flag] = slider end
				return slider
			end
			function ElementFunction:AddDropdown(DropdownCFG)
				DropdownCFG = DropdownCFG or {}; DropdownCFG.Name = DropdownCFG.Name or "Dropdown"; DropdownCFG.Options = DropdownCFG.Options or {}; DropdownCFG.Default = DropdownCFG.Default or (DropdownCFG.Options[1] or ""); DropdownCFG.Callback = DropdownCFG.Callback or function()end; DropdownCFG.Flag = DropdownCFG.Flag; DropdownCFG.Save = DropdownCFG.Save or false
				local MAX_DROPDOWN_HEIGHT = 150 -- Max height in pixels for the dropdown list
                local dropdown = {Value = DropdownCFG.Default, Options = {}, Buttons = {}, Toggled = false, Type="Dropdown", Save = DropdownCFG.Save}

				local dropdownListLayout = MakeElement("List",0,2)
				local dropdownScroll = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame",nil,4),{
					Size=UDim2.new(1,0,0,0), Position=UDim2.new(0,0,1,0), ClipsDescendants=true, Visible=false, ZIndex=3 -- High ZIndex
				}),{dropdownListLayout,MakeElement("Padding",4,4,4,4)}),"Main")

				local selectedLabel = AddThemeObject(SetProps(MakeElement("Label","",13),{Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X,TextXAlignment=Enum.TextXAlignment.Right}),"TextDark")
				local arrowIcon = AddThemeObject(SetProps(MakeElement("Image","chevron-down"),{Size=UDim2.new(0,16,0,16)}),"TextDark")

				local dropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,38),Parent=ItemParent,ClipsDescendants=false,ZIndex=2}),{ -- ClipsDescendants false to show list
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{
						MakeElement("List",0,8),HorizontalAlignment=Enum.HorizontalAlignment.Right,VerticalAlignment=Enum.VerticalAlignment.Center,PaddingLeft=UDim.new(0,10),PaddingRight=UDim.new(0,8),
						AddThemeObject(SetProps(MakeElement("Label","<b>"..DropdownCFG.Name.."</b>",13),{Size=UDim2.new(1,-100,1,0),TextXAlignment=Enum.TextXAlignment.Left}),"Text"),
						selectedLabel, arrowIcon
					}), dropdownScroll, AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local clickRegion = dropdownFrame.ClickRegion

				function dropdown:Set(val, noCallback)
					if not table.find(dropdown.Options, val) and #dropdown.Options > 0 then val = dropdown.Options[1] elseif not table.find(dropdown.Options,val) then val = "..." end
					dropdown.Value = val
					selectedLabel.Text = tostring(val)
					for opt, btn in pairs(dropdown.Buttons) do
						if btn and btn.Parent then btn.BackgroundColor3 = (opt == val) and OrionLib.Themes[OrionLib.SelectedTheme].Main or OrionLib.Themes[OrionLib.SelectedTheme].Second end
					end
					if not noCallback then task.spawn(DropdownCFG.Callback, dropdown.Value) end
				end
				function dropdown:Refresh(newOpts)
					for _,btn in pairs(dropdown.Buttons) do if btn and btn.Parent then btn:Destroy() end end
					table.clear(dropdown.Options); table.clear(dropdown.Buttons)
					for _,optName in ipairs(newOpts or {}) do
						table.insert(dropdown.Options, optName)
						local optButton = AddThemeObject(SetChildren(SetProps(MakeElement("Button"),{Size=UDim2.new(1,0,0,28),Parent=dropdownScroll}),{
							AddThemeObject(SetProps(MakeElement("Label",tostring(optName),13),{Size=UDim2.new(1,-16,1,0),Position=UDim2.new(0,8,0,0)}),"Text"),MakeElement("Corner",0,4)
						}),"Second")
						dropdown.Buttons[optName] = optButton
						AddConnection(optButton.MouseButton1Click,function()
							dropdown:Set(optName); if dropdown.Save then SaveCfg(tostring(game.GameId))end
							dropdown.Toggled = false; dropdownScroll.Visible = false; arrowIcon.Image = GetIcon("chevron-down")
							TweenService:Create(dropdownScroll,TweenInfo.new(0.15),{Size=UDim2.new(1,0,0,0)}):Play()
						end)
					end
					dropdown:Set(dropdown.Value, true) -- Re-set with new options
				end
				dropdown:Refresh(DropdownCFG.Options)
                dropdown:Set(DropdownCFG.Default, true) -- Ensure default is set after refresh

				AddConnection(clickRegion.MouseButton1Click,function()
					dropdown.Toggled = not dropdown.Toggled
					dropdownScroll.Visible = dropdown.Toggled
					arrowIcon.Image = GetIcon(dropdown.Toggled and "chevron-up" or "chevron-down")
					local contentHeight = dropdownListLayout.AbsoluteContentSize.Y + dropdownScroll.UIPadding.PaddingTop.Offset + dropdownScroll.UIPadding.PaddingBottom.Offset
					local targetHeight = dropdown.Toggled and math.min(contentHeight, MAX_DROPDOWN_HEIGHT) or 0
                    dropdownFrame.ZIndex = dropdown.Toggled and 4 or 2 -- Bring to front when open
					TweenService:Create(dropdownScroll,TweenInfo.new(0.15),{Size=UDim2.new(1,0,0,targetHeight)}):Play()
				end)
				if DropdownCFG.Flag then OrionLib.Flags[DropdownCFG.Flag] = dropdown end
				return dropdown
			end
			function ElementFunction:AddBind(BindCFG)
				BindCFG = BindCFG or {}; BindCFG.Name = BindCFG.Name or "Bind"; BindCFG.Default = BindCFG.Default or Enum.KeyCode.Unknown; BindCFG.Hold = BindCFG.Hold or false; BindCFG.Callback = BindCFG.Callback or function()end; BindCFG.Flag = BindCFG.Flag; BindCFG.Save = BindCFG.Save or false
				local bind = {Value = BindCFG.Default, Binding = false, Type="Bind", Save = BindCFG.Save, IsHolding = false}

				local bindDisplay = AddThemeObject(SetProps(MakeElement("Label","...",12),{Size=UDim2.new(0,0,1,0),AutomaticSize=Enum.AutomaticSize.X,TextXAlignment=Enum.TextXAlignment.Center,Name="BindDisplay"}),"TextDark")
				local bindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,4),{Size=UDim2.new(0,80,0,24),ClipsDescendants=true}),{
                    bindDisplay, MakeElement("Padding",0,5,0,5), AddThemeObject(MakeElement("Stroke"),"Stroke")
                }),"Main")

				local bindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,38),Parent=ItemParent}),{
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{
						MakeElement("List",0,0),HorizontalAlignment=Enum.HorizontalAlignment.Right,PaddingLeft=UDim.new(0,10),PaddingRight=UDim2.new(0,10),VerticalAlignment=Enum.VerticalAlignment.Center,
						AddThemeObject(SetProps(MakeElement("Label","<b>"..BindCFG.Name.."</b>",13),{Size=UDim2.new(1,-95,1,0),TextXAlignment=Enum.TextXAlignment.Left}),"Text"),bindBox
					}),AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local clickRegion = bindFrame.ClickRegion

                local function getBindName(keyEnum)
                    if keyEnum == Enum.KeyCode.Unknown then return "None" end
                    if keyEnum:IsA("EnumItem") then return keyEnum.Name end
                    return "..."
                end

				function bind:Set(key, noCallback)
					bind.Value = key
					bindDisplay.Text = getBindName(key)
                    bind.Binding = false -- Ensure binding mode is exited
					if not noCallback then task.spawn(BindCFG.Callback, false) end -- False for isHolding on set
				end
				bind:Set(BindCFG.Default, true)

				AddConnection(clickRegion.MouseButton1Click,function()
                    if bind.Binding then bind.Binding = false; bindDisplay.Text = getBindName(bind.Value); return end -- Cancel binding
					bind.Binding = true; bindDisplay.Text = "..."
				end)

                local inputBeganConnection, inputEndedConnection
                inputBeganConnection = UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
                    if gameProcessedEvent and not bind.Binding then return end -- Allow binding even if game processed
                    if UserInputService:GetFocusedTextBox() and not bind.Binding then return end

                    if bind.Binding then
                        local newBindKey = Enum.KeyCode.Unknown -- Default to unbinding
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 or input.UserInputType == Enum.UserInputType.MouseButton3 then
                            newBindKey = input.UserInputType
                        elseif input.KeyCode ~= Enum.KeyCode.Unknown then
                            if input.KeyCode == Enum.KeyCode.Backspace or input.KeyCode == Enum.KeyCode.Delete then
                                newBindKey = Enum.KeyCode.Unknown -- Explicitly unbind
                            elseif not IsKeyBlacklistedForBind(input.KeyCode) then
                                newBindKey = input.KeyCode
                            end
                        end
                        bind:Set(newBindKey)
                        if bind.Save then SaveCfg(tostring(game.GameId)) end
                        bind.Binding = false -- Exit binding mode
                    elseif (input.KeyCode == bind.Value or input.UserInputType == bind.Value) and bind.Value ~= Enum.KeyCode.Unknown then
                        if BindCFG.Hold then
                            if not bind.IsHolding then bind.IsHolding = true; task.spawn(BindCFG.Callback, true) end
                        else
                            task.spawn(BindCFG.Callback, false)
                        end
                    end
                end)
                inputEndedConnection = UserInputService.InputEnded:Connect(function(input)
                     if (input.KeyCode == bind.Value or input.UserInputType == bind.Value) and bind.Value ~= Enum.KeyCode.Unknown then
                        if BindCFG.Hold and bind.IsHolding then
                            bind.IsHolding = false; task.spawn(BindCFG.Callback, false)
                        end
                    end
                end)
                table.insert(OrionLib.Connections, inputBeganConnection) -- Manage these connections
                table.insert(OrionLib.Connections, inputEndedConnection)

				if BindCFG.Flag then OrionLib.Flags[BindCFG.Flag] = bind end
				return bind
			end
			function ElementFunction:AddTextbox(TextboxCFG)
				TextboxCFG = TextboxCFG or {}; TextboxCFG.Name = TextboxCFG.Name or "Textbox"; TextboxCFG.Default = TextboxCFG.Default or ""; TextboxCFG.Placeholder = TextboxCFG.Placeholder or "Type here..."; TextboxCFG.TextDisappear = TextboxCFG.TextDisappear or false; TextboxCFG.Callback = TextboxCFG.Callback or function()end; TextboxCFG.Numeric = TextboxCFG.Numeric or false; TextboxCFG.ClearOnFocus = TextboxCFG.ClearOnFocus or false; TextboxCFG.Flag = TextboxCFG.Flag; TextboxCFG.Save = TextboxCFG.Save or false
				local textbox = {Value = TextboxCFG.Default, Type="Textbox", Save = TextboxCFG.Save}

				local actualTextbox = AddThemeObject(Create("TextBox",{
					Size=UDim2.new(1,-10,1,-6), Position=UDim2.new(0.5,0,0.5,0), AnchorPoint=Vector2.new(0.5,0.5),
					BackgroundTransparency=1, PlaceholderText=TextboxCFG.Placeholder, Font=Enum.Font.GothamSemibold, TextSize=13,
					Text=TextboxCFG.Default, ClearTextOnFocus=TextboxCFG.ClearOnFocus
				}),"Text")
                actualTextbox.PlaceholderColor3 = OrionLib.Themes[OrionLib.SelectedTheme].TextDark

				local textboxContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,4),{Size=UDim2.new(0,120,0,26),ClipsDescendants=true}),{
                    actualTextbox, AddThemeObject(MakeElement("Stroke"),"Stroke")
                }),"Main")

				local textboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,38),Parent=ItemParent}),{
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{ -- Button to allow clicking label to focus textbox
						MakeElement("List",0,0),HorizontalAlignment=Enum.HorizontalAlignment.Right,PaddingLeft=UDim.new(0,10),PaddingRight=UDim2.new(0,10),VerticalAlignment=Enum.VerticalAlignment.Center,
						AddThemeObject(SetProps(MakeElement("Label","<b>"..TextboxCFG.Name.."</b>",13),{Size=UDim2.new(1,-135,1,0),TextXAlignment=Enum.TextXAlignment.Left}),"Text"),textboxContainer
					}),AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
                local clickRegion = textboxFrame.ClickRegion
                AddConnection(clickRegion.MouseButton1Click, function() actualTextbox:CaptureFocus() end)

				AddConnection(actualTextbox.FocusLost,function(enterPressed)
                    textbox.Value = actualTextbox.Text
					task.spawn(TextboxCFG.Callback, textbox.Value, enterPressed)
					if TextboxCFG.TextDisappear then actualTextbox.Text = "" end
                    if textbox.Save then SaveCfg(tostring(game.GameId))end
				end)
				if TextboxCFG.Numeric then
					AddConnection(actualTextbox:GetPropertyChangedSignal("Text"),function()
						local text = actualTextbox.Text
						local newText = text:gsub("[^%-%d%.]","") -- Allow numbers, decimal, minus
                        -- Ensure only one decimal and minus at start
                        local s,e = newText:find("^%-?")
                        local prefix = s and newText:sub(s,e) or ""
                        local suffix = newText:sub(e and e+1 or 1)
                        suffix = suffix:gsub("%-","") -- remove all other minuses
                        local firstDot = suffix:find("%.")
                        if firstDot then
                            suffix = suffix:sub(1,firstDot) .. suffix:sub(firstDot+1):gsub("%.","")
                        end
                        newText = prefix .. suffix
						if actualTextbox.Text ~= newText then actualTextbox.Text = newText end
					end)
				end
                function textbox:Set(text)
                    actualTextbox.Text = tostring(text)
                    textbox.Value = actualTextbox.Text -- Update internal value
                    task.spawn(TextboxCFG.Callback, textbox.Value, false)
                    if textbox.Save then SaveCfg(tostring(game.GameId)) end
                end
				if TextboxCFG.Flag then OrionLib.Flags[TextboxCFG.Flag] = textbox end
				return textbox
			end
			function ElementFunction:AddColorpicker(ColorCFG)
				ColorCFG = ColorCFG or {}; ColorCFG.Name = ColorCFG.Name or "Colorpicker"; ColorCFG.Default = ColorCFG.Default or Color3.new(1,1,1); ColorCFG.Callback = ColorCFG.Callback or function()end; ColorCFG.Flag = ColorCFG.Flag; ColorCFG.Save = ColorCFG.Save or false
				local H,S,V = Color3.toHSV(ColorCFG.Default)
				local colorpicker = {Value=ColorCFG.Default, Toggled=false, Type="Colorpicker", Save=ColorCFG.Save}
				local colorInputConn, hueInputConn

				local pickerSize = 100
				local hueWidth = 18
				local padding = 6

				local svSelector = Create("ImageLabel",{Size=UDim2.fromOffset(12,12),AnchorPoint=Vector2.new(0.5,0.5),BackgroundTransparency=1,Image="rbxassetid://4805639000",ZIndex=3,Position=UDim2.new(S,0,1-V,0)})
				local svBox = Create("ImageLabel",{Size=UDim2.fromOffset(pickerSize,pickerSize),Image="rbxassetid://4155801252",BackgroundColor3=Color3.fromHSV(H,1,1),ZIndex=2},{Create("UICorner",{CornerRadius=UDim.new(0,4)}),svSelector})
				local hueSelector = Create("ImageLabel",{Size=UDim2.fromOffset(12,12),AnchorPoint=Vector2.new(0.5,0.5),BackgroundTransparency=1,Image="rbxassetid://4805639000",ZIndex=3,Position=UDim2.new(0.5,0,1-H,0)})
				local hueBox = Create("Frame",{Size=UDim2.fromOffset(hueWidth,pickerSize),Position=UDim2.new(0,pickerSize+padding,0,0),ZIndex=2},{
					Create("UIGradient",{Rotation=90,Color=ColorSequence.new{ColorSequenceKeypoint.new(0,Color3.fromRGB(255,0,0)),ColorSequenceKeypoint.new(1/6,Color3.fromRGB(255,255,0)),ColorSequenceKeypoint.new(2/6,Color3.fromRGB(0,255,0)),ColorSequenceKeypoint.new(3/6,Color3.fromRGB(0,255,255)),ColorSequenceKeypoint.new(4/6,Color3.fromRGB(0,0,255)),ColorSequenceKeypoint.new(5/6,Color3.fromRGB(255,0,255)),ColorSequenceKeypoint.new(1,Color3.fromRGB(255,0,0))}}),
					Create("UICorner",{CornerRadius=UDim.new(0,4)}),hueSelector
				})
				local pickerContainer = Create("Frame",{Size=UDim2.new(1,0,0,0),Position=UDim2.new(0,0,1,0),ClipsDescendants=true,Visible=false,BackgroundTransparency=1,ZIndex=3,LayoutOrder=2},{
					Create("UIPadding",{PaddingTop=UDim.new(0,padding),PaddingBottom=UDim.new(0,padding),PaddingLeft=UDim.new(0,padding),PaddingRight=UDim.new(0,padding)}),svBox,hueBox
				})
				local colorDisplay = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",colorpicker.Value,0,4),{Size=UDim2.new(0,24,0,24)}),{AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Main")

				local colorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,38),Parent=ItemParent,ClipsDescendants=false,ZIndex=2}),{
					SetChildren(MakeElement("Button"),{Size=UDim2.new(1,0,1,0),Name="ClickRegion"},{
						MakeElement("List",0,0),HorizontalAlignment=Enum.HorizontalAlignment.Right,PaddingLeft=UDim.new(0,10),PaddingRight=UDim2.new(0,10),VerticalAlignment=Enum.VerticalAlignment.Center,
						AddThemeObject(SetProps(MakeElement("Label","<b>"..ColorCFG.Name.."</b>",13),{Size=UDim2.new(1,-39,1,0),TextXAlignment=Enum.TextXAlignment.Left}),"Text"),colorDisplay
					}), pickerContainer, AddThemeObject(MakeElement("Stroke"),"Stroke")}),"Second")
				local clickRegion = colorpickerFrame.ClickRegion

				function colorpicker:Set(val, noCallback)
                    if typeof(val) ~= "Color3" then return end
					colorpicker.Value = val; H,S,V = Color3.toHSV(val)
					colorDisplay.BackgroundColor3 = val; svBox.BackgroundColor3 = Color3.fromHSV(H,1,1)
					svSelector.Position = UDim2.new(S,0,1-V,0); hueSelector.Position = UDim2.new(0.5,0,1-H,0)
					if not noCallback then task.spawn(ColorCFG.Callback, colorpicker.Value) end
				end
				colorpicker:Set(ColorCFG.Default, true)

				local function updateFromInput() colorpicker:Set(Color3.fromHSV(H,S,V)); if colorpicker.Save then SaveCfg(tostring(game.GameId))end end
				AddConnection(svBox.InputBegan,function(i)if i.UserInputType~=Enum.UserInputType.MouseButton1 then return end if colorInputConn then colorInputConn:Disconnect()end colorInputConn=RunService.RenderStepped:Connect(function()local m=svBox:GetRelativeMousePosition()S=math.clamp(m.X/svBox.AbsoluteSize.X,0,1)V=1-math.clamp(m.Y/svBox.AbsoluteSize.Y,0,1)updateFromInput()end)end)
				AddConnection(hueBox.InputBegan,function(i)if i.UserInputType~=Enum.UserInputType.MouseButton1 then return end if hueInputConn then hueInputConn:Disconnect()end hueInputConn=RunService.RenderStepped:Connect(function()local m=hueBox:GetRelativeMousePosition()H=1-math.clamp(m.Y/hueBox.AbsoluteSize.Y,0,1)updateFromInput()end)end)
				AddConnection(UserInputService.InputEnded,function(i)if i.UserInputType~=Enum.UserInputType.MouseButton1 then return end if colorInputConn then colorInputConn:Disconnect();colorInputConn=nil end if hueInputConn then hueInputConn:Disconnect();hueInputConn=nil end end)

				AddConnection(clickRegion.MouseButton1Click,function()
					colorpicker.Toggled = not colorpicker.Toggled; pickerContainer.Visible = colorpicker.Toggled
                    colorpickerFrame.ZIndex = colorpicker.Toggled and 4 or 2
					local targetHeight = colorpicker.Toggled and (pickerSize + padding*2) or 0
					TweenService:Create(pickerContainer,TweenInfo.new(0.2),{Size=UDim2.new(1,0,0,targetHeight)}):Play()
                    TweenService:Create(colorpickerFrame,TweenInfo.new(0.2),{Size=UDim2.new(1,0,0,38+(colorpicker.Toggled and targetHeight or 0))}):Play()
				end)
				if ColorCFG.Flag then OrionLib.Flags[ColorCFG.Flag] = colorpicker end
				return colorpicker
			end
			return ElementFunction
		end

		local ElementFunction = {}
		function ElementFunction:AddSection(SectionName)
			local sectionFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame",nil,0,5),{Size=UDim2.new(1,0,0,0),AutomaticSize=Enum.AutomaticSize.Y,Parent=itemContainer}),{
				MakeElement("List",0,6),MakeElement("Padding",8,10,10,8),
				AddThemeObject(SetProps(MakeElement("Label","<b>"..SectionName.."</b>",14),{Size=UDim2.new(1,0,0,18)}),"Text"),
				AddThemeObject(SetProps(MakeElement("Frame"),{Size=UDim2.new(1,0,0,1),BackgroundColor3=OrionLib.Themes[OrionLib.SelectedTheme].Divider,LayoutOrder=2}),"Stroke"), -- Divider line
                SetProps(MakeElement("TFrame"),{Size=UDim2.new(1,0,0,0),AutomaticSize=Enum.AutomaticSize.Y,Name="ElementHolder",LayoutOrder=3},{MakeElement("List",0,6)})
			}),"Second")
			local elementHolder = sectionFrame.ElementHolder
			local SectionFunctions = {}
			for funcName, funcInstance in pairs(GetElements(elementHolder)) do SectionFunctions[funcName] = funcInstance end
			return SectionFunctions
		end
		for funcName, funcInstance in pairs(GetElements(itemContainer)) do ElementFunction[funcName] = funcInstance end

		if TabConfig.PremiumOnly then
            if WindowConfig.HidePremium then tabFrame.Visible = false; itemContainer.Visible = false; return {} end
			itemContainer:ClearAllChildren() -- Clear default elements
			AddThemeObject(SetChildren(itemContainer,{MakeElement("Padding",20,20,20,20),MakeElement("List",0,10),VerticalAlignment=Enum.VerticalAlignment.Center,HorizontalAlignment=Enum.HorizontalAlignment.Center},{
				AddThemeObject(SetProps(MakeElement("Image","lock"),{Size=UDim2.fromOffset(48,48)}),"Text"),
				AddThemeObject(SetProps(MakeElement("Label","<b>Premium Tab</b>",18),{TextXAlignment=Enum.TextXAlignment.Center}),"Text"),
				AddThemeObject(SetProps(MakeElement("Label","This content is locked. Please upgrade to access premium features.",14),{Size=UDim2.new(0.8,0,0,0),AutomaticSize=Enum.AutomaticSize.Y,TextWrapped=true,TextXAlignment=Enum.TextXAlignment.Center}),"TextDark")
			}),"Divider")
			return {} -- Return empty functions for premium locked tabs not hidden
		end
		return ElementFunction
	end
	return TabFunction
end

function OrionLib:Destroy()
	if Orion and Orion.Parent then Orion:Destroy() end -- Destroy the ScreenGui
	-- Connections are cleared by the task.spawned loop when Orion.Parent becomes nil
	table.clear(OrionLib.Elements)
	table.clear(OrionLib.ThemeObjects)
	table.clear(OrionLib.Flags)
	-- Potentially clear other tables if they hold references that need cleanup
end

return OrionLib
