local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local HttpService = game:GetService("HttpService")
getgenv().gethui = function() return game.CoreGui end

local OrionLib = {
	Elements = {},
	ThemeObjects = {},
	Connections = {},
	Flags = {},
	Themes = {
		Default = {
			Main = Color3.fromRGB(25, 25, 25),
			Second = Color3.fromRGB(32, 32, 32),
			Stroke = Color3.fromRGB(60, 60, 60),
			Divider = Color3.fromRGB(60, 60, 60),
			Text = Color3.fromRGB(240, 240, 240),
			TextDark = Color3.fromRGB(150, 150, 150)
		}
	},
	SelectedTheme = "Default",
	Folder = nil,
	SaveCfg = false
}

--Feather Icons https://github.com/evoincorp/lucideblox/tree/master/src/modules/util - Created by 7kayoh
local Icons = {}

local Success, Response = pcall(function()
	Icons = HttpService:JSONDecode(game:HttpGetAsync("https://raw.githubusercontent.com/evoincorp/lucideblox/master/src/modules/util/icons.json")).icons
end)

if not Success then
	-- Optionally print an error or handle it: print("OrionLib: Failed to load icons - ", Response)
end

local function GetIcon(IconName)
	if Icons[IconName] ~= nil then
		return Icons[IconName]
	else
		return nil
	end
end

local Orion = Instance.new("ScreenGui")
Orion.Name = "Orion"
if syn then
	syn.protect_gui(Orion)
	Orion.Parent = game.CoreGui
else
	Orion.Parent = gethui() or game.CoreGui
end

if gethui then
	for _, Interface in ipairs(gethui():GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
else
	for _, Interface in ipairs(game.CoreGui:GetChildren()) do
		if Interface.Name == Orion.Name and Interface ~= Orion then
			Interface:Destroy()
		end
	end
end

function OrionLib:IsRunning()
	if gethui then
		return Orion.Parent == gethui()
	else
		return Orion.Parent == game:GetService("CoreGui")
	end
end

local function AddConnection(Signal, Function)
	if (not OrionLib:IsRunning()) then
		return
	end
	local SignalConnect = Signal:Connect(Function)
	table.insert(OrionLib.Connections, SignalConnect)
	return SignalConnect
end

task.spawn(function()
	while (OrionLib:IsRunning()) do
		task.wait()
	end

	for _, Connection in pairs(OrionLib.Connections) do
		Connection:Disconnect()
	end
	OrionLib.Connections = {} -- Clear connections table after disconnecting
end)

local function MakeDraggable(DragPoint, Main) -- Original MakeDraggable for Main Window
	pcall(function()
		local Dragging, DragInput, MousePos, FramePos = false
		AddConnection(DragPoint.InputBegan, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
				Dragging = true
				MousePos = Input.Position
				FramePos = Main.Position

				Input.Changed:Connect(function()
					if Input.UserInputState == Enum.UserInputState.End then
						Dragging = false
					end
				end)
			end
		end)
		AddConnection(DragPoint.InputChanged, function(Input)
			if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then
				DragInput = Input
			end
		end)
		AddConnection(UserInputService.InputChanged, function(Input)
			if Input == DragInput and Dragging then
				local Delta = Input.Position - MousePos
				Main.Position = UDim2.new(FramePos.X.Scale, FramePos.X.Offset + Delta.X, FramePos.Y.Scale, FramePos.Y.Offset + Delta.Y)
			end
		end)
	end)
end

local function Create(Name, Properties, Children)
	local Object = Instance.new(Name)
	for i, v in pairs(Properties or {}) do
		Object[i] = v
	end
	for i, v in pairs(Children or {}) do
		v.Parent = Object
	end
	return Object
end

local function CreateElement(ElementName, ElementFunction)
	OrionLib.Elements[ElementName] = function(...)
		return ElementFunction(...)
	end
end

local function MakeElement(ElementName, ...)
	local NewElement = OrionLib.Elements[ElementName](...)
	return NewElement
end

local function SetProps(Element, Props)
	for Property, Value in pairs(Props) do
		Element[Property] = Value
	end
	return Element
end

local function SetChildren(Element, Children)
	for _, Child in pairs(Children) do
		Child.Parent = Element
	end
	return Element
end

local function Round(Number, Factor)
    if Factor == 0 then return Number end -- Prevent division by zero
	local Result = math.floor(Number / Factor + (math.sign(Number) * 0.5)) * Factor
	if Result < 0 and Number > 0 and Factor > 0 then -- Adjust for rounding towards zero for positive numbers
        Result = math.ceil(Number / Factor - (math.sign(Number) * 0.5)) * Factor
    end
	return Result
end


local function ReturnProperty(Object)
	if Object:IsA("Frame") or Object:IsA("TextButton") then
		return "BackgroundColor3"
	end
	if Object:IsA("ScrollingFrame") then
		return "ScrollBarImageColor3"
	end
	if Object:IsA("UIStroke") then
		return "Color"
	end
	if Object:IsA("TextLabel") or Object:IsA("TextBox") then
		return "TextColor3"
	end
	if Object:IsA("ImageLabel") or Object:IsA("ImageButton") then
		return "ImageColor3"
	end
	return nil -- Important to return nil if no property matches
end

local function AddThemeObject(Object, Type)
	if not OrionLib.ThemeObjects[Type] then
		OrionLib.ThemeObjects[Type] = {}
	end
	table.insert(OrionLib.ThemeObjects[Type], Object)
	local propertyName = ReturnProperty(Object)
	if propertyName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Type] then
		Object[propertyName] = OrionLib.Themes[OrionLib.SelectedTheme][Type]
	end
	return Object
end

local function SetTheme()
	for Name, Type in pairs(OrionLib.ThemeObjects) do
		for _, Object in pairs(Type) do
			local propertyName = ReturnProperty(Object)
			if propertyName and OrionLib.Themes[OrionLib.SelectedTheme] and OrionLib.Themes[OrionLib.SelectedTheme][Name] then
				Object[propertyName] = OrionLib.Themes[OrionLib.SelectedTheme][Name]
			end
		end
	end
end

local function PackColor(Color)
	return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end

local function UnpackColor(Color)
	return Color3.fromRGB(Color.R, Color.G, Color.B)
end

local function LoadCfg(Config)
	local success, Data = pcall(HttpService.JSONDecode, HttpService, Config)
	if not success or typeof(Data) ~= "table" then return end

	for a, b in pairs(Data) do
		if OrionLib.Flags[a] then
			task.spawn(function()
				if OrionLib.Flags[a].Type == "Colorpicker" then
					OrionLib.Flags[a]:Set(UnpackColor(b))
				else
					OrionLib.Flags[a]:Set(b)
				end
			end)
		end
	end
end

local function SaveCfg(Name)
	if not (getfenv().writefile and OrionLib.Folder and Name) then return end
	local Data = {}
	for i, v in pairs(OrionLib.Flags) do
		if v.Save then
			if v.Type == "Colorpicker" then
				Data[i] = PackColor(v.Value)
			else
				Data[i] = v.Value
			end
		end
	end
	writefile(OrionLib.Folder .. "/" .. Name .. ".txt", HttpService:JSONEncode(Data))
end

local WhitelistedMouse = {Enum.UserInputType.MouseButton1, Enum.UserInputType.MouseButton2, Enum.UserInputType.MouseButton3, Enum.UserInputType.Touch}
local BlacklistedKeys = {Enum.KeyCode.Unknown, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D, Enum.KeyCode.Up, Enum.KeyCode.Left, Enum.KeyCode.Down, Enum.KeyCode.Right, Enum.KeyCode.Slash, Enum.KeyCode.Tab, Enum.KeyCode.Backspace, Enum.KeyCode.Escape}

local function CheckKey(Table, Key)
	for _, v in pairs(Table) do
		if v == Key then
			return true
		end
	end
	return false
end

CreateElement("Corner", function(Scale, Offset)
	local Corner = Create("UICorner", {
		CornerRadius = UDim.new(Scale or 0, Offset or 10)
	})
	return Corner
end)

CreateElement("Stroke", function(Color, Thickness)
	local Stroke = Create("UIStroke", {
		Color = Color or Color3.fromRGB(255, 255, 255),
		Thickness = Thickness or 1
	})
	return Stroke
end)

CreateElement("List", function(Scale, Offset)
	local List = Create("UIListLayout", {
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(Scale or 0, Offset or 0)
	})
	return List
end)

CreateElement("Padding", function(Bottom, Left, Right, Top)
	local Padding = Create("UIPadding", {
		PaddingBottom = UDim.new(0, Bottom or 4),
		PaddingLeft = UDim.new(0, Left or 4),
		PaddingRight = UDim.new(0, Right or 4),
		PaddingTop = UDim.new(0, Top or 4)
	})
	return Padding
end)

CreateElement("TFrame", function()
	local TFrame = Create("Frame", {
		BackgroundTransparency = 1
	})
	return TFrame
end)

CreateElement("Frame", function(Color)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	})
	return Frame
end)

CreateElement("RoundFrame", function(Color, Scale, Offset)
	local Frame = Create("Frame", {
		BackgroundColor3 = Color or Color3.fromRGB(255, 255, 255),
		BorderSizePixel = 0
	}, {
		Create("UICorner", {
			CornerRadius = UDim.new(Scale or 0, Offset or 4) -- Defaulted offset to 4, as 10 was large for some elements. Adjust if needed.
		})
	})
	return Frame
end)

CreateElement("Button", function()
	local Button = Create("TextButton", {
		Text = "",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		BorderSizePixel = 0
	})
	return Button
end)

CreateElement("ScrollFrame", function(Color, Width)
	local ScrollFrame = Create("ScrollingFrame", {
		BackgroundTransparency = 1,
		MidImage = "rbxassetid://7445543667",
		BottomImage = "rbxassetid://7445543667",
		TopImage = "rbxassetid://7445543667",
		ScrollBarImageColor3 = Color or Color3.fromRGB(100, 100, 100), -- Added default color
		BorderSizePixel = 0,
		ScrollBarThickness = Width or 6, -- Added default width
		CanvasSize = UDim2.new(0, 0, 0, 0)
	})
	return ScrollFrame
end)

CreateElement("Image", function(ImageID)
	local ImageNew = Create("ImageLabel", {
		Image = ImageID or "",
		BackgroundTransparency = 1
	})

	if ImageID and Icons[ImageID] ~= nil then
		ImageNew.Image = Icons[ImageID]
	end

	return ImageNew
end)

CreateElement("ImageButton", function(ImageID)
	local Image = Create("ImageButton", {
		Image = ImageID or "",
		BackgroundTransparency = 1
	})
	return Image
end)

CreateElement("Label", function(Text, TextSize, Transparency)
	local Label = Create("TextLabel", {
		Text = Text or "",
		TextColor3 = Color3.fromRGB(240, 240, 240),
		TextTransparency = Transparency or 0,
		TextSize = TextSize or 15,
		Font = Enum.Font.Roboto,
		RichText = true,
		BackgroundTransparency = 1,
		TextXAlignment = Enum.TextXAlignment.Left
	})
	return Label
end)

local NotificationHolder = SetProps(SetChildren(MakeElement("TFrame"), {
	SetProps(MakeElement("List"), {
		HorizontalAlignment = Enum.HorizontalAlignment.Center,
		SortOrder = Enum.SortOrder.LayoutOrder,
		VerticalAlignment = Enum.VerticalAlignment.Bottom,
		Padding = UDim.new(0, 5)
	})
}), {
	Position = UDim2.new(1, -25, 1, -25),
	Size = UDim2.new(0, 300, 1, -25),
	AnchorPoint = Vector2.new(1, 1),
	Parent = Orion
})

function OrionLib:MakeNotification(NotificationConfig)
	task.spawn(function()
		NotificationConfig = NotificationConfig or {}
		NotificationConfig.Name = NotificationConfig.Name or "Notification"
		NotificationConfig.Content = NotificationConfig.Content or "Test"
		NotificationConfig.Image = NotificationConfig.Image or "rbxassetid://4384403532"
		NotificationConfig.Time = NotificationConfig.Time or 15

		local NotificationParent = SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 0),
			AutomaticSize = Enum.AutomaticSize.Y,
			Parent = NotificationHolder
		})

		local NotificationFrame = SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(25, 25, 25), 0, 10), {
			Parent = NotificationParent,
			Size = UDim2.new(1, 0, 0, 0),
			Position = UDim2.new(1, -55, 0, 0),
			BackgroundTransparency = 0,
			AutomaticSize = Enum.AutomaticSize.Y
		}), {
			MakeElement("Stroke", Color3.fromRGB(93, 93, 93), 1.2),
			MakeElement("Padding", 12, 12, 12, 12),
			SetProps(MakeElement("Image", NotificationConfig.Image), {
				Size = UDim2.new(0, 20, 0, 20),
				ImageColor3 = Color3.fromRGB(240, 240, 240),
				Name = "Icon"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Name, 15), {
				Size = UDim2.new(1, -30, 0, 20),
				Position = UDim2.new(0, 30, 0, 0),
				Font = Enum.Font.GothamBold,
				Name = "Title"
			}),
			SetProps(MakeElement("Label", NotificationConfig.Content, 14), {
				Size = UDim2.new(1, 0, 0, 0),
				Position = UDim2.new(0, 0, 0, 25),
				Font = Enum.Font.GothamSemibold,
				Name = "Content",
				AutomaticSize = Enum.AutomaticSize.Y,
				TextColor3 = Color3.fromRGB(200, 200, 200),
				TextWrapped = true
			})
		})

		TweenService:Create(NotificationFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {Position = UDim2.new(0, 0, 0, 0)}):Play()

		task.wait(NotificationConfig.Time - 0.88)
		if NotificationFrame and NotificationFrame.Parent then
			TweenService:Create(NotificationFrame.Icon, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
			TweenService:Create(NotificationFrame, TweenInfo.new(0.8, Enum.EasingStyle.Quint), {BackgroundTransparency = 0.6}):Play()
			task.wait(0.3)
			if NotificationFrame.UIStroke then TweenService:Create(NotificationFrame.UIStroke, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Transparency = 0.9}):Play() end
			if NotificationFrame.Title then TweenService:Create(NotificationFrame.Title, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.4}):Play() end
			if NotificationFrame.Content then TweenService:Create(NotificationFrame.Content, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {TextTransparency = 0.5}):Play() end
			task.wait(0.05)

			NotificationFrame:TweenPosition(UDim2.new(1, 20, 0, 0), Enum.EasingDirection.In, Enum.EasingStyle.Quint, 0.8, true)
			task.wait(1.35)
			NotificationFrame:Destroy()
		end
	end)
end

function OrionLib:Init()
	if OrionLib.SaveCfg then
		pcall(function()
			if getfenv().isfile and getfenv().readfile and isfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt") then
				LoadCfg(readfile(OrionLib.Folder .. "/" .. game.GameId .. ".txt"))
				OrionLib:MakeNotification({
					Name = "Configuration",
					Content = "Auto-loaded configuration for game " .. tostring(game.GameId) .. ".",
					Time = 5
				})
			end
		end)
	end
end

function OrionLib:MakeWindow(WindowConfig)
	local FirstTab = true
	local Minimized = false
	-- local Loaded = false -- Loaded variable was not used
	local UIHidden = false

	WindowConfig = WindowConfig or {}
	WindowConfig.Name = WindowConfig.Name or "Orion Library"
	WindowConfig.ConfigFolder = WindowConfig.ConfigFolder or WindowConfig.Name
	WindowConfig.SaveConfig = WindowConfig.SaveConfig or false
	WindowConfig.HidePremium = WindowConfig.HidePremium or false
	if WindowConfig.IntroEnabled == nil then
		WindowConfig.IntroEnabled = true
	end
	WindowConfig.IntroText = WindowConfig.IntroText or "Orion Library"
	WindowConfig.CloseCallback = WindowConfig.CloseCallback or function() end
	WindowConfig.ShowIcon = WindowConfig.ShowIcon or false
	WindowConfig.Icon = WindowConfig.Icon or "rbxassetid://8834748103"
	WindowConfig.IntroIcon = WindowConfig.IntroIcon or "rbxassetid://8834748103"
	WindowConfig.SearchBar = WindowConfig.SearchBar -- No or nil, allow it to be explicitly nil

	OrionLib.Folder = WindowConfig.ConfigFolder
	OrionLib.SaveCfg = WindowConfig.SaveConfig

	if WindowConfig.SaveConfig then
		if (getfenv().isfolder and getfenv().makefolder) and not isfolder(WindowConfig.ConfigFolder) then
			makefolder(WindowConfig.ConfigFolder)
		elseif not (getfenv().isfolder and isfolder(WindowConfig.ConfigFolder)) then
			pcall(function() if getfenv().makefolder then makefolder(WindowConfig.ConfigFolder) end end)
		end
	end

	local TabHolder = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 4), -- Color can be nil, theme sets it
	WindowConfig.SearchBar and {
		Size = UDim2.new(1, 0, 1, -90),
		Position = UDim2.new(0, 0, 0, 40)
	} or {
		Size = UDim2.new(1, 0, 1, -50)
	}),
	{
		MakeElement("List"),
		MakeElement("Padding", 8, 0, 0, 8) -- Bottom, Left, Right, Top
	}), "Divider")


	AddConnection(TabHolder.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
		TabHolder.CanvasSize = UDim2.new(0, 0, 0, TabHolder.UIListLayout.AbsoluteContentSize.Y + 16) -- 8 top + 8 bottom padding
	end)

	local CloseBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		Position = UDim2.new(0.5, 0, 0, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072725342"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18)
		}), "Text")
	})

	local MinimizeBtn = SetChildren(SetProps(MakeElement("Button"), {
		Size = UDim2.new(0.5, 0, 1, 0),
		BackgroundTransparency = 1
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072719338"), {
			Position = UDim2.new(0, 9, 0, 6),
			Size = UDim2.new(0, 18, 0, 18),
			Name = "Ico"
		}), "Text")
	})

	local DragPoint = SetProps(MakeElement("TFrame"), {
		Size = UDim2.new(1, 0, 0, 50)
	})

	local WindowStuff = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 10), { -- Color from theme
		Size = UDim2.new(0, 150, 1, -50),
		Position = UDim2.new(0, 0, 0, 50)
	}), {
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(1, 0, 0, 10),
			Position = UDim2.new(0, 0, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 10, 1, 0),
			Position = UDim2.new(1, -10, 0, 0)
		}), "Second"),
		AddThemeObject(SetProps(MakeElement("Frame"), {
			Size = UDim2.new(0, 1, 1, 0),
			Position = UDim2.new(1, -1, 0, 0)
		}), "Stroke"),
		TabHolder,
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Position = UDim2.new(0, 0, 1, -50)
		}), {
			AddThemeObject(SetProps(MakeElement("Frame"), {
				Size = UDim2.new(1, 0, 0, 1)
			}), "Stroke"),
			AddThemeObject(SetChildren(SetProps(MakeElement("Frame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				SetProps(MakeElement("Image", "https://www.roblox.com/headshot-thumbnail/image?userId=".. LocalPlayer.UserId .."&width=420&height=420&format=png"), {
					Size = UDim2.new(1, 0, 1, 0)
				}),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4031889928"), {
					Size = UDim2.new(1, 0, 1, 0),
				}), "Second"),
				MakeElement("Corner", 1, 0) -- Full corner radius scale
			}), "Divider"),
			SetChildren(SetProps(MakeElement("TFrame"), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 32, 0, 32),
				Position = UDim2.new(0, 10, 0.5, 0)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				MakeElement("Corner", 1, 0) -- Full corner radius scale
			}),
			AddThemeObject(SetProps(MakeElement("Label", LocalPlayer.DisplayName, WindowConfig.HidePremium and 14 or 13), {
				Size = UDim2.new(1, -60, 0, 13),
				Position = WindowConfig.HidePremium and UDim2.new(0, 50, 0, 19) or UDim2.new(0, 50, 0, 12),
				Font = Enum.Font.GothamBold,
				ClipsDescendants = true
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", "", 12), {
				Size = UDim2.new(1, -60, 0, 12),
				Position = UDim2.new(0, 50, 1, -25),
				Visible = not WindowConfig.HidePremium
			}), "TextDark")
		}),
	}), "Second")

	local Tabs = {};

	if WindowConfig.SearchBar then
		local searchBarDefaultText = "🔍 Search"
		local searchBarClearOnFocus = true
		if type(WindowConfig.SearchBar) == "table" then
			searchBarDefaultText = WindowConfig.SearchBar.Default or searchBarDefaultText
			if WindowConfig.SearchBar.ClearTextOnFocus ~= nil then
				searchBarClearOnFocus = WindowConfig.SearchBar.ClearTextOnFocus
			end
		end

		local SearchBox = Create("TextBox", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			PlaceholderColor3 = Color3.fromRGB(210,210,210),
			PlaceholderText = searchBarDefaultText,
			Font = Enum.Font.GothamBold,
			TextWrapped = true,
			Text = '',
			TextXAlignment = Enum.TextXAlignment.Center,
			TextSize = 14,
			ClearTextOnFocus = searchBarClearOnFocus
		})

		local TextboxActual = AddThemeObject(SearchBox, "Text")

		local SearchBar = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 1, 6), { -- Color from theme, full corner radius scale
			Parent = WindowStuff,
			Size = UDim2.new(0, 130, 0, 24),
			Position = UDim2.new(1.013, -12, 0.075, 0),
			AnchorPoint = Vector2.new(1, 0.5)
		}), {
			AddThemeObject(MakeElement("Stroke"), "Stroke"),
			TextboxActual
		}), "Main")

		local function SearchHandle()
			local Text = string.lower(SearchBox.Text);
			if not TabHolder or not TabHolder:IsA("GuiObject") then return end

			for i, v in pairs(Tabs) do
				if v and v:IsA('TextButton') then
					if Text == "" or string.find(string.lower(i), Text) then
						v.Visible = true
					else
						v.Visible = false
					end
				end
			end
		end
		AddConnection(TextboxActual:GetPropertyChangedSignal("Text"), SearchHandle);
	end

	local WindowName = AddThemeObject(SetProps(MakeElement("Label", WindowConfig.Name, 14), {
		Size = UDim2.new(1, -30, 2, 0), -- This size seems odd (2 scale Y for a 50px bar)
		Position = UDim2.new(0, 25, 0, -24), -- Y position seems too high, might be intentional for larger text
		Font = Enum.Font.GothamBlack,
		TextSize = 20
	}), "Text")

	local WindowTopBarLine = AddThemeObject(SetProps(MakeElement("Frame"), {
		Size = UDim2.new(1, 0, 0, 1),
		Position = UDim2.new(0, 0, 1, -1)
	}), "Stroke")

	local MainWindow = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 10), { -- Color from theme
		Parent = Orion,
		Position = UDim2.new(0.5, -307, 0.5, -172),
		Size = UDim2.new(0, 615, 0, 344),
		ClipsDescendants = true
	}), {
		SetChildren(SetProps(MakeElement("TFrame"), {
			Size = UDim2.new(1, 0, 0, 50),
			Name = "TopBar"
		}), {
			WindowName,
			WindowTopBarLine,
			AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 7), { -- Color from theme
				Size = UDim2.new(0, 70, 0, 30),
				Position = UDim2.new(1, -90, 0, 10)
			}), {
				AddThemeObject(MakeElement("Stroke"), "Stroke"),
				AddThemeObject(SetProps(MakeElement("Frame"), {
					Size = UDim2.new(0, 1, 1, 0),
					Position = UDim2.new(0.5, 0, 0, 0)
				}), "Stroke"),
				CloseBtn,
				MinimizeBtn
			}), "Second"),
		}),
		DragPoint,
		WindowStuff
	}), "Main")

	if WindowConfig.ShowIcon then
		WindowName.Position = UDim2.new(0, 50, 0, -24) -- Adjusted based on original logic
		local WindowIcon = SetProps(MakeElement("Image", WindowConfig.Icon), {
			Size = UDim2.new(0, 20, 0, 20),
			Position = UDim2.new(0, 25, 0, 15) -- Adjusted based on original logic
		})
		WindowIcon.Parent = MainWindow.TopBar
	end

	MakeDraggable(DragPoint, MainWindow) -- Uses the first MakeDraggable definition

	local localMakeDraggableForMobile -- Renaming to avoid conflict if MakeDraggable was not local before
	localMakeDraggableForMobile = function(button) -- MakeDraggable for MobileReopenButton
		local dragging = false
		local dragStart
		local startPos

		local function update(input)
			if not dragging or not button or not button.Parent then return end -- Added checks
			local delta = input.Position - dragStart
			local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TweenService:Create(button, TweenInfo.new(0.2), {Position = newPosition}):Play()
		end

		button.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = button.Position

				local changedConnection
				changedConnection = input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
						if changedConnection then changedConnection:Disconnect() end -- Disconnect self
					end
				end)
			end
		end)
        -- Consider disconnecting this on button destroy or when dragging stops to be extremely safe
		UserInputService.InputChanged:Connect(function(input)
			if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				update(input)
			end
		end)
	end


	local MobileReopenButton = SetChildren(SetProps(MakeElement("Button"), {
		Parent = Orion,
		Size = UDim2.new(0, 40, 0, 40),
		Position = UDim2.new(0.5, -20, 0, 20),
		BackgroundTransparency = 0,
		BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
		Visible = false,
		AnchorPoint = Vector2.new(0.5, 0.5)
	}), {
		AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://17615525476"), { -- Ensure this asset ID is valid
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.5, 0),
			Size = UDim2.new(0.7, 0, 0.7, 0)
		}), "Text"),
		MakeElement("Corner", 1, 0) -- Full corner radius
	})

	localMakeDraggableForMobile(MobileReopenButton)


	AddConnection(CloseBtn.MouseButton1Up, function()
		MainWindow.Visible = false
		MobileReopenButton.Visible = true
		UIHidden = true
		OrionLib:MakeNotification({
			Name = "Interface Hidden",
			Content = "Tap the open button to reopen. Or Press Key M.",
			Time = 5
		})
		if WindowConfig.CloseCallback then WindowConfig.CloseCallback() end
	end)

	AddConnection(UserInputService.InputBegan, function(Input)
		if Input.KeyCode == Enum.KeyCode.M then
			if UserInputService:GetFocusedTextBox() then return end -- Don't toggle if typing
			if UIHidden then
				MainWindow.Visible = true
				MobileReopenButton.Visible = false
				UIHidden = false
			else
				MainWindow.Visible = false
				MobileReopenButton.Visible = true
				UIHidden = true
			end
		end
	end)

	AddConnection(MobileReopenButton.Activated, function()
		MainWindow.Visible = true
		MobileReopenButton.Visible = false
		UIHidden = false -- Ensure state is consistent
	end)


	AddConnection(MinimizeBtn.MouseButton1Up, function()
		if Minimized then
			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, 615, 0, 344)}):Play()
			MinimizeBtn.Ico.Image = "rbxassetid://7072719338"
			task.wait(0.02) -- Use task.wait
			MainWindow.ClipsDescendants = false -- Should be true to hide content, then false after animation if needed
			WindowStuff.Visible = true
			WindowTopBarLine.Visible = true
		else
			MainWindow.ClipsDescendants = true
			WindowTopBarLine.Visible = false
			MinimizeBtn.Ico.Image = "rbxassetid://7072720870"

			local newWidth = WindowName.TextBounds.X + 140
			if WindowConfig.ShowIcon then newWidth = math.max(newWidth, 50 + WindowName.TextBounds.X + 90) end -- Approximate calculation

			TweenService:Create(MainWindow, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Size = UDim2.new(0, newWidth, 0, 50)}):Play()
			task.wait(0.1) -- Use task.wait
			WindowStuff.Visible = false
		end
		Minimized = not Minimized
	end)

	local function LoadSequence()
		MainWindow.Visible = false
		local LoadSequenceLogo = SetProps(MakeElement("Image", WindowConfig.IntroIcon), {
			Parent = Orion,
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 0, 0.4, 0),
			Size = UDim2.new(0, 28, 0, 28),
			ImageColor3 = Color3.fromRGB(255, 255, 255),
			ImageTransparency = 1
		})

		local LoadSequenceText = SetProps(MakeElement("Label", WindowConfig.IntroText, 14), {
			Parent = Orion,
			Size = UDim2.new(1, 0, 1, 0),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.new(0.5, 19, 0.5, 0), -- Y was 0.5, assuming text is centered. Check alignment.
			TextXAlignment = Enum.TextXAlignment.Center,
			TextYAlignment = Enum.TextYAlignment.Center, -- Added for vertical centering
			Font = Enum.Font.GothamBold,
			TextTransparency = 1
		})

		TweenService:Create(LoadSequenceLogo, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
		task.wait(0.8)
		TweenService:Create(LoadSequenceLogo, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X / 2) - (LoadSequenceLogo.AbsoluteSize.X/2 + 5), 0.5, 0)}):Play() -- Adjusted positioning
		task.wait(0.3)
		LoadSequenceText.Position = UDim2.new(0.5, (LoadSequenceLogo.AbsoluteSize.X/2 + 5), 0.5, 0) -- Position text next to logo
		TweenService:Create(LoadSequenceText, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
		task.wait(2)
		TweenService:Create(LoadSequenceText, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 1}):Play() -- Fade out logo too
		task.wait(0.3) -- Wait for fade out
		MainWindow.Visible = true
		LoadSequenceLogo:Destroy()
		LoadSequenceText:Destroy()
	end

	if WindowConfig.IntroEnabled then
		LoadSequence()
	else
		MainWindow.Visible = true
	end

	local TabFunction = {}
	function TabFunction:MakeTab(TabConfig)
		TabConfig = TabConfig or {}
		TabConfig.Name = TabConfig.Name or "Tab"
		TabConfig.Icon = TabConfig.Icon or ""
		TabConfig.PremiumOnly = TabConfig.PremiumOnly or false

		local TabFrame = SetChildren(SetProps(MakeElement("Button"), {
			Size = UDim2.new(1, 0, 0, 30),
			Parent = TabHolder
		}), {
			AddThemeObject(SetProps(MakeElement("Image", TabConfig.Icon), {
				AnchorPoint = Vector2.new(0, 0.5),
				Size = UDim2.new(0, 18, 0, 18),
				Position = UDim2.new(0, 10, 0.5, 0),
				ImageTransparency = 0.4,
				Name = "Ico"
			}), "Text"),
			AddThemeObject(SetProps(MakeElement("Label", TabConfig.Name, 14), {
				Size = UDim2.new(1, -35, 1, 0),
				Position = UDim2.new(0, 35, 0, 0),
				Font = Enum.Font.GothamSemibold,
				TextTransparency = 0.4,
				Name = "Title"
			}), "Text")
		})

		if TabConfig.Icon and Icons[TabConfig.Icon] ~= nil then -- Check TabConfig.Icon exists
			TabFrame.Ico.Image = Icons[TabConfig.Icon]
		end

		if WindowConfig.SearchBar then
			Tabs[TabConfig.Name] = TabFrame
		end


		local Container = AddThemeObject(SetChildren(SetProps(MakeElement("ScrollFrame", nil, 5), { -- Color from theme
			Size = UDim2.new(1, -150, 1, -50),
			Position = UDim2.new(0, 150, 0, 50),
			Parent = MainWindow,
			Visible = false,
			Name = "ItemContainer"
		}), {
			MakeElement("List", 0, 6),
			MakeElement("Padding", 15, 10, 10, 15) -- Bottom, Left, Right, Top
		}), "Divider")

		AddConnection(Container.UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"), function()
			Container.CanvasSize = UDim2.new(0, 0, 0, Container.UIListLayout.AbsoluteContentSize.Y + 30) -- 15 top + 15 bottom padding
		end)

		if FirstTab then
			FirstTab = false
			if TabFrame.Ico then TabFrame.Ico.ImageTransparency = 0 end
			if TabFrame.Title then
				TabFrame.Title.TextTransparency = 0
				TabFrame.Title.Font = Enum.Font.GothamBlack
			end
			Container.Visible = true
		end

		AddConnection(TabFrame.MouseButton1Click, function()
			for _, TabChild in pairs(TabHolder:GetChildren()) do -- Use pairs for consistency
				if TabChild:IsA("TextButton") then
					if TabChild.Title and TabChild.Ico then
						TabChild.Title.Font = Enum.Font.GothamSemibold
						TweenService:Create(TabChild.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.4}):Play()
						TweenService:Create(TabChild.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0.4}):Play()
					end
				end
			end
			for _, ItemContainerChild in pairs(MainWindow:GetChildren()) do
				if ItemContainerChild.Name == "ItemContainer" then
					ItemContainerChild.Visible = false
				end
			end
			if TabFrame.Ico and TabFrame.Title then
				TweenService:Create(TabFrame.Ico, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0}):Play()
				TweenService:Create(TabFrame.Title, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
				TabFrame.Title.Font = Enum.Font.GothamBlack
			end
			Container.Visible = true
		end)

		local function GetElements(ItemParent)
			local ElementFunction = {}
			function ElementFunction:AddLabel(Text)
				local LabelFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 30),
					BackgroundTransparency = 0.7, -- Consider making this part of the theme or configurable
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				local LabelFunction = {}
				function LabelFunction:Set(ToChange)
					LabelFrame.Content.Text = ToChange
				end
				return LabelFunction
			end
			function ElementFunction:AddParagraph(Text, Content)
				Text = Text or "Text"
				Content = Content or "Content"

				local ParagraphFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 30), -- Initial small size, will grow
					BackgroundTransparency = 0.7,
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", Text, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Title"
					}), "Text"),
					AddThemeObject(SetProps(MakeElement("Label", "", 13), {
						Size = UDim2.new(1, -24, 0, 0), -- Width -24 (12px padding each side)
						Position = UDim2.new(0, 12, 0, 26), -- Below title
						Font = Enum.Font.GothamSemibold,
						Name = "Content",
						TextWrapped = true,
						AutomaticSize = Enum.AutomaticSize.Y -- Let Y size adjust to content
					}), "TextDark"),
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Second")

				AddConnection(ParagraphFrame.Content:GetPropertyChangedSignal("TextBounds"), function()
                    if ParagraphFrame and ParagraphFrame.Parent and ParagraphFrame.Content and ParagraphFrame.Content.Parent then
					    local textHeight = ParagraphFrame.Content.TextBounds.Y
					    ParagraphFrame.Size = UDim2.new(1, 0, 0, 26 + textHeight + 9) -- 26 for title area, 9 for bottom padding
                    end
				end)

				ParagraphFrame.Content.Text = Content -- Set text to trigger initial size update

				local ParagraphFunction = {}
				function ParagraphFunction:Set(ToChange)
					ParagraphFrame.Content.Text = ToChange
				end
				return ParagraphFunction
			end
			function ElementFunction:AddButton(ButtonConfig)
				ButtonConfig = ButtonConfig or {}
				ButtonConfig.Name = ButtonConfig.Name or "Button"
				ButtonConfig.Callback = ButtonConfig.Callback or function() end
				ButtonConfig.Icon = ButtonConfig.Icon -- Keep as is, can be nil

				local Button = {}

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ButtonFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 33),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ButtonConfig.Name, 15), {
						Size = UDim2.new(1, (ButtonConfig.Icon and -42 or -12) , 1, 0), -- Adjust size if icon present
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					ButtonConfig.Icon and AddThemeObject(SetProps(MakeElement("Image", ButtonConfig.Icon), {
						Size = UDim2.new(0, 20, 0, 20),
						Position = UDim2.new(1, -30, 0, (33-20)/2 ), -- Centered Y
					}), "TextDark") or nil,
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					Click
				}), "Second")
				
				-- Remove nil from children if icon was nil
				if not ButtonConfig.Icon then
					for i, child in pairs(ButtonFrame:GetChildren()) do
						if child == nil then table.remove(ButtonFrame:GetChildren(), i) break end
					end
				end


				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
					task.spawn(ButtonConfig.Callback) -- Use task.spawn for safety
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ButtonFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)

				function Button:Set(ButtonText)
					ButtonFrame.Content.Text = ButtonText
				end

				return Button
			end
			function ElementFunction:AddToggle(ToggleConfig)
				ToggleConfig = ToggleConfig or {}
				ToggleConfig.Name = ToggleConfig.Name or "Toggle"
				ToggleConfig.Default = ToggleConfig.Default or false
				ToggleConfig.Callback = ToggleConfig.Callback or function() end
				ToggleConfig.Color = ToggleConfig.Color or Color3.fromRGB(9, 99, 195)
				ToggleConfig.Flag = ToggleConfig.Flag -- Keep as is
				ToggleConfig.Save = ToggleConfig.Save or false

				local Toggle = {Value = ToggleConfig.Default, Save = ToggleConfig.Save, Type = "Toggle"} -- Added Type for consistency

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ToggleBox = SetChildren(SetProps(MakeElement("RoundFrame", ToggleConfig.Color, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -24, 0.5, 0), -- Position to the right
					AnchorPoint = Vector2.new(1, 0.5) -- Anchor to the right
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = ToggleConfig.Color,
						Name = "Stroke",
						Transparency = 0.5
					}),
					SetProps(MakeElement("Image", "rbxassetid://3944680095"), {
						Size = UDim2.new(0, 20, 0, 20),
						AnchorPoint = Vector2.new(0.5, 0.5),
						Position = UDim2.new(0.5, 0, 0.5, 0),
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						Name = "Ico"
					}),
				})

				local ToggleFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", ToggleConfig.Name, 15), {
						Size = UDim2.new(1, -48, 1, 0), -- Adjusted for toggle box space
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					ToggleBox,
					Click
				}), "Second")

				function Toggle:Set(Value)
					Toggle.Value = Value
					local targetColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Divider
					local targetStrokeColor = Toggle.Value and ToggleConfig.Color or OrionLib.Themes.Default.Stroke
					TweenService:Create(ToggleBox, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = targetColor}):Play()
					TweenService:Create(ToggleBox.Stroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Color = targetStrokeColor}):Play()
					TweenService:Create(ToggleBox.Ico, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = Toggle.Value and 0 or 1, Size = Toggle.Value and UDim2.new(0, 20, 0, 20) or UDim2.new(0, 8, 0, 8)}):Play()
					ToggleConfig.Callback(Toggle.Value)
				end

				Toggle:Set(Toggle.Value) -- Initialize

				AddConnection(Click.MouseEnter, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
					Toggle:Set(not Toggle.Value)
					if OrionLib.SaveCfg and ToggleConfig.Save then SaveCfg(game.GameId) end
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(ToggleFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)

				if ToggleConfig.Flag then
					OrionLib.Flags[ToggleConfig.Flag] = Toggle
				end
				return Toggle
			end
			function ElementFunction:AddSlider(SliderConfig)
				SliderConfig = SliderConfig or {}
				SliderConfig.Name = SliderConfig.Name or "Slider"
				SliderConfig.Min = SliderConfig.Min or 0
				SliderConfig.Max = SliderConfig.Max or 100
				SliderConfig.Increment = SliderConfig.Increment or 1
				SliderConfig.Default = SliderConfig.Default or SliderConfig.Min -- Default to Min if not specified
				SliderConfig.Callback = SliderConfig.Callback or function() end
				SliderConfig.ValueName = SliderConfig.ValueName or ""
				SliderConfig.Color = SliderConfig.Color or Color3.fromRGB(9, 149, 98)
				SliderConfig.Flag = SliderConfig.Flag
				SliderConfig.Save = SliderConfig.Save or false

				local Slider = {Value = SliderConfig.Default, Save = SliderConfig.Save, Type = "Slider"}
				local Dragging = false
				local SliderKnob
				local KnobValueDisplay

				local SliderDrag = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Name = "SliderDrag",
					Size = UDim2.new(0, 0, 1, 0),
					BackgroundTransparency = 0.3,
					ClipsDescendants = true,
					ZIndex = 2
				}), {
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0.5, 0),
						AnchorPoint = Vector2.new(0, 0.5),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextYAlignment = Enum.TextYAlignment.Center,
						TextTransparency = 0
					}), "Text")
				})

				local SliderBar = SetChildren(SetProps(MakeElement("RoundFrame", SliderConfig.Color, 0, 5), {
					Name = "SliderBar",
					Size = UDim2.new(1, -24, 0, 26),
					Position = UDim2.new(0, 12, 0, 30),
					BackgroundTransparency = 0.9,
					ZIndex = 1
				}), {
					SetProps(MakeElement("Stroke"), {
						Color = SliderConfig.Color,
						Transparency = 0.5
					}),
					AddThemeObject(SetProps(MakeElement("Label", "value", 13), {
						Size = UDim2.new(1, -12, 1, 0),
						Position = UDim2.new(0, 12, 0.5, 0),
						AnchorPoint = Vector2.new(0, 0.5),
						Font = Enum.Font.GothamBold,
						Name = "Value",
						TextYAlignment = Enum.TextYAlignment.Center,
						TextTransparency = 0.8
					}), "Text"),
					SliderDrag
				})

				SliderKnob = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 6), {
					Name = "SliderKnob",
					Size = UDim2.new(0, 12, 0, 22),
					BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
					AnchorPoint = Vector2.new(0.5, 0.5),
					Position = UDim2.new(0,0,0.5,0),
					ZIndex = SliderBar.ZIndex + 2,
					Parent = SliderBar,
				}),{
					AddThemeObject(MakeElement("Stroke", nil, 1.5), "Stroke")
				}), "Text")


				local SliderFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 65),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", SliderConfig.Name, 15), {
						Size = UDim2.new(1, -12, 0, 14),
						Position = UDim2.new(0, 12, 0, 10),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					SliderBar
				}), "Second")

				KnobValueDisplay = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), {
					Name = "KnobValueDisplay",
					Parent = SliderFrame,
					Size = UDim2.new(0, 0, 0, 20),
					AutomaticSize = Enum.AutomaticSize.X,
					BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Main,
					BackgroundTransparency = 0.15,
					AnchorPoint = Vector2.new(0.5, 1),
					Visible = false,
					ZIndex = SliderFrame.ZIndex + 5,
				}), {
					AddThemeObject(MakeElement("Stroke", nil, 1), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "0", 11), {
						Name = "Text",
						Size = UDim2.new(0,0,1,0), -- Automatic X size
                        AutomaticSize = Enum.AutomaticSize.X,
						Font = Enum.Font.GothamSemibold,
						TextColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Text,
						TextXAlignment = Enum.TextXAlignment.Center,
						TextYAlignment = Enum.TextYAlignment.Center,
					}), "Text"),
					MakeElement("Padding", 1, 6, 1, 6) -- Top, Right, Bottom, Left (more horizontal padding for text)
				}), "Main")


				local knobOriginalSize = SliderKnob.Size
				local knobPressedSize = UDim2.new(knobOriginalSize.X.Scale, knobOriginalSize.X.Offset + 2, knobOriginalSize.Y.Scale, knobOriginalSize.Y.Offset + 2)

				local function UpdateKnobValueDisplayPosition()
					if KnobValueDisplay.Visible and SliderKnob and SliderKnob.Parent and SliderFrame and SliderFrame.Parent then
						task.defer(function() -- Defer to get updated AbsolutePosition after knob tweens
							if not (SliderKnob and SliderKnob.Parent and KnobValueDisplay and KnobValueDisplay.Parent) then return end

							local knobAbsPos = SliderKnob.AbsolutePosition
							local knobAbsSize = SliderKnob.AbsoluteSize
							local frameAbsPos = SliderFrame.AbsolutePosition

							KnobValueDisplay.Position = UDim2.fromOffset(
								(knobAbsPos.X - frameAbsPos.X) + (knobAbsSize.X / 2),
								(knobAbsPos.Y - frameAbsPos.Y) - 3 -- 3px gap above knob's top
							)
						end)
					end
				end
                
                function Slider:Set(Value, fromInput)
					self.Value = math.clamp(Round(Value, SliderConfig.Increment), SliderConfig.Min, SliderConfig.Max)
					local percentage = (SliderConfig.Max > SliderConfig.Min) and (self.Value - SliderConfig.Min) / (SliderConfig.Max - SliderConfig.Min) or 0

					local tweenInfo = TweenInfo.new(fromInput and 0 or 0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out) -- No tween if from direct input for responsiveness

					TweenService:Create(SliderDrag, tweenInfo, {Size = UDim2.fromScale(percentage, 1)}):Play()
					if SliderKnob then
						TweenService:Create(SliderKnob, tweenInfo, {Position = UDim2.new(percentage, 0, 0.5, 0)}):Play()
					end

					local displayValue = tostring(self.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
					SliderBar.Value.Text = displayValue
					SliderDrag.Value.Text = displayValue

					if KnobValueDisplay and KnobValueDisplay.Text then
						KnobValueDisplay.Text.Text = displayValue
						if KnobValueDisplay.Visible then
							UpdateKnobValueDisplayPosition()
						end
					end
					if not fromInput then -- Only call callback if not from continuous input, or on release
					    SliderConfig.Callback(self.Value)
                    end
				end

				SliderBar.InputBegan:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
						Dragging = true
						TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobPressedSize}):Play()

						KnobValueDisplay.Text.Text = tostring(Slider.Value) .. (SliderConfig.ValueName and " " .. SliderConfig.ValueName or "")
						KnobValueDisplay.Visible = true
						UpdateKnobValueDisplayPosition()

						local interactionPos = Input.Position
						local frameLocation = SliderBar.AbsolutePosition
						local relativeX = interactionPos.X - frameLocation.X
						local SizeScale = math.clamp(relativeX / SliderBar.AbsoluteSize.X, 0, 1)
						Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale), true)
					end
				end)
				SliderBar.InputEnded:Connect(function(Input)
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
						Dragging = false
						TweenService:Create(SliderKnob, TweenInfo.new(0.1, Enum.EasingStyle.Linear), {Size = knobOriginalSize}):Play()
						KnobValueDisplay.Visible = false
                        SliderConfig.Callback(Slider.Value) -- Final callback on release
						if OrionLib.SaveCfg and SliderConfig.Save then SaveCfg(game.GameId) end
					end
				end)

				local lastInputChangedTime = 0
				UserInputService.InputChanged:Connect(function(Input)
					if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
						local currentTime = tick()
						if currentTime - lastInputChangedTime < (1/60) then return end -- throttle to ~60fps
						lastInputChangedTime = currentTime

						local interactionPosX = Mouse.X -- For MouseMovement, Mouse.X is more reliable during drag
                        if Input.UserInputType == Enum.UserInputType.Touch then
                            interactionPosX = Input.Position.X
                        end

						local SizeScale = math.clamp((interactionPosX - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
						Slider:Set(SliderConfig.Min + ((SliderConfig.Max - SliderConfig.Min) * SizeScale), true)
						UpdateKnobValueDisplayPosition()
					end
				end)


				Slider:Set(Slider.Value) -- Initialize
				if SliderConfig.Flag then
					OrionLib.Flags[SliderConfig.Flag] = Slider
				end
				return Slider
			end
			function ElementFunction:AddDropdown(DropdownConfig)
				DropdownConfig = DropdownConfig or {}
				DropdownConfig.Name = DropdownConfig.Name or "Dropdown"
				DropdownConfig.Options = DropdownConfig.Options or {}
				DropdownConfig.Default = DropdownConfig.Default -- Allow nil default initially
				DropdownConfig.Callback = DropdownConfig.Callback or function() end
				DropdownConfig.Flag = DropdownConfig.Flag
				DropdownConfig.Save = DropdownConfig.Save or false

				local Dropdown = {Value = DropdownConfig.Default, Options = {}, Buttons = {}, Toggled = false, Type = "Dropdown", Save = DropdownConfig.Save}
				local MaxElements = 5 -- Max visible elements before scrolling

                -- Initialize Options ensuring it's a flat list if passed as a dictionary-like table
                if type(DropdownConfig.Options) == "table" then
                    for _, opt in pairs(DropdownConfig.Options) do
                        table.insert(Dropdown.Options, tostring(opt))
                    end
                end

				if not Dropdown.Value or not table.find(Dropdown.Options, Dropdown.Value) then
					if #Dropdown.Options > 0 then
						Dropdown.Value = Dropdown.Options[1]
					else
						Dropdown.Value = "..."
					end
				end

				local DropdownList = MakeElement("List")
                local DropdownPadding = MakeElement("Padding", 2,2,2,2) -- Top, Right, Bottom, Left

				local DropdownContainer = AddThemeObject(SetChildren(MakeElement("ScrollFrame", nil, 4), { -- Color from theme, scrollbar width 4
					DropdownList,
					DropdownPadding
				}), {
					Parent = nil, -- Parented later
					Position = UDim2.new(0, 0, 0, 38), -- Below the header
					Size = UDim2.new(1, 0, 0, 0), -- Height will be animated
					ClipsDescendants = true,
                    Visible = false, -- Initially hidden
                    ZIndex = 2 -- Above the main frame content, below header when open
				}), "Divider")


				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0),
                    ZIndex = 2 -- Ensure click is on top of labels
				})

				local DropdownFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 38), -- Initial height for header
					Parent = ItemParent,
					ClipsDescendants = true,
                    ZIndex = 1
				}), {
					-- Container added here so it's part of the frame for clipping
					SetProps(SetChildren(MakeElement("TFrame"), { -- Header Frame
						AddThemeObject(SetProps(MakeElement("Label", DropdownConfig.Name, 15), {
							Size = UDim2.new(1, -80, 1, 0), -- Space for selected text and icon
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content",
                            TextTruncate = Enum.TextTruncate.AtEnd,
                            ZIndex = 1
						}), "Text"),
						AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://7072706796"), {
							Size = UDim2.new(0, 20, 0, 20),
							AnchorPoint = Vector2.new(1, 0.5), -- Anchor to right
							Position = UDim2.new(1, -12, 0.5, 0), -- Position from right
							ImageColor3 = Color3.fromRGB(240, 240, 240),
							Name = "Ico",
                            ZIndex = 1
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Label", Dropdown.Value, 13), {
							Size = UDim2.new(0, 0, 1, 0), -- Auto width
                            AutomaticSize = Enum.AutomaticSize.X,
							AnchorPoint = Vector2.new(1,0.5),
                            Position = UDim2.new(1, -40, 0.5, 0), -- To the left of icon
							Font = Enum.Font.Gotham,
							Name = "Selected",
							TextXAlignment = Enum.TextXAlignment.Right,
                            TextTruncate = Enum.TextTruncate.AtEnd,
                            ZIndex = 1
						}), "TextDark"),
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Line separator
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1), -- At the bottom of the header
							Name = "Line",
							Visible = false, -- Toggled with dropdown
                            ZIndex = 1
						}), "Stroke"),
						Click -- Click button on top
					}), {
						Size = UDim2.new(1, 0, 0, 38), -- Header size
						ClipsDescendants = true,
						Name = "F", -- Header Frame name
                        ZIndex = 3 -- Header on top
					}),
                    DropdownContainer, -- Add container after header in hierarchy but it's positioned below
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					MakeElement("Corner",0,5) -- Ensure corner is applied
				}), "Second")
                DropdownContainer.Parent = DropdownFrame -- Parent after DropdownFrame is created

				AddConnection(DropdownList:GetPropertyChangedSignal("AbsoluteContentSize"), function()
					if DropdownContainer and DropdownContainer.Parent and DropdownList and DropdownList.Parent then
						local paddingHeight = (DropdownPadding and (DropdownPadding.PaddingTop.Offset + DropdownPadding.PaddingBottom.Offset)) or 4
						DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + paddingHeight)
					end
				end)

				local function AddOptionButtons(optionsToAdd)
					if not DropdownContainer or not DropdownContainer.Parent then return end
					for _, OptionText in pairs(optionsToAdd) do
                        if not Dropdown.Buttons[OptionText] then -- Avoid duplicates if Refresh isn't clearing
						    local OptionBtn = AddThemeObject(SetProps(SetChildren(MakeElement("Button"), { -- Removed unused color arg
							    MakeElement("Corner", 0, 6),
							    AddThemeObject(SetProps(MakeElement("Label", OptionText, 13, 0.4), {
								    Position = UDim2.new(0, 8, 0, 0),
								    Size = UDim2.new(1, -8, 1, 0),
								    Name = "Title",
                                    TextTruncate = Enum.TextTruncate.AtEnd
							    }), "Text")
						    }), {
							    Parent = DropdownContainer,
							    Size = UDim2.new(1, 0, 0, 28),
							    BackgroundTransparency = 1,
							    ClipsDescendants = true
						    }), "Divider") -- Themed as "Divider" sets its background

						    AddConnection(OptionBtn.MouseButton1Click, function()
							    Dropdown:Set(OptionText)
							    if OrionLib.SaveCfg and DropdownConfig.Save then SaveCfg(game.GameId) end
                                -- Close dropdown after selection
                                if Dropdown.Toggled then Click.MouseButton1Click:Fire() end
						    end)
						    Dropdown.Buttons[OptionText] = OptionBtn
                        end
					end
				end

				function Dropdown:Refresh(NewOptions, DeleteExisting)
					if DeleteExisting then
						for _, btn in pairs(Dropdown.Buttons) do
							if btn and btn.Parent then btn:Destroy() end
						end
						table.clear(Dropdown.Buttons)
						Dropdown.Options = {}
					end
                    
                    local optionsToAdd = {}
                    if type(NewOptions) == "table" then
                        for _, opt in pairs(NewOptions) do
                            local optStr = tostring(opt)
                            if not table.find(Dropdown.Options, optStr) then
                                table.insert(Dropdown.Options, optStr)
                                table.insert(optionsToAdd, optStr)
                            end
                        end
                    end
					AddOptionButtons(optionsToAdd)
                    
                    -- Update CanvasSize after adding all options
                    task.defer(function()
                        if DropdownContainer and DropdownContainer.Parent and DropdownList and DropdownList.Parent then
						    local paddingHeight = (DropdownPadding and (DropdownPadding.PaddingTop.Offset + DropdownPadding.PaddingBottom.Offset)) or 4
						    DropdownContainer.CanvasSize = UDim2.new(0, 0, 0, DropdownList.AbsoluteContentSize.Y + paddingHeight)
					    end
                    end)

                    -- Re-validate current value
                    if not table.find(Dropdown.Options, Dropdown.Value) then
                        if #Dropdown.Options > 0 then
                            Dropdown:Set(Dropdown.Options[1])
                        else
                            Dropdown:Set("...") -- Handles empty case after refresh
                        end
                    else
                        Dropdown:Set(Dropdown.Value) -- Re-apply current value to update visuals
                    end
				end

				function Dropdown:Set(Value)
                    local valueStr = tostring(Value)
					if not table.find(Dropdown.Options, valueStr) then
						if #Dropdown.Options > 0 then
							valueStr = Dropdown.Options[1]
						else
							valueStr = "..." -- Default if no options
						end
					end

					Dropdown.Value = valueStr
                    if DropdownFrame.F and DropdownFrame.F.Selected then
					    DropdownFrame.F.Selected.Text = Dropdown.Value
                    end

					for optKey, optButton in pairs(Dropdown.Buttons) do
						if optButton and optButton.Parent then
							local isSelected = (optKey == Dropdown.Value)
							TweenService:Create(optButton, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = isSelected and 0 or 1}):Play()
							if optButton.Title then
								TweenService:Create(optButton.Title, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = isSelected and 0 or 0.4}):Play()
							end
						end
					end
					DropdownConfig.Callback(Dropdown.Value)
                    return Dropdown.Value -- Return the set value
				end

				AddConnection(Click.MouseButton1Click, function()
					Dropdown.Toggled = not Dropdown.Toggled
					DropdownFrame.F.Line.Visible = Dropdown.Toggled
                    DropdownContainer.Visible = Dropdown.Toggled -- Show/hide container

					TweenService:Create(DropdownFrame.F.Ico, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Rotation = Dropdown.Toggled and 180 or 0}):Play()

					local targetHeight
					if Dropdown.Toggled then
						task.wait() -- Allow canvas size to update if options were just populated
						local contentHeight = DropdownContainer.CanvasSize.Y.Offset
                        local numOptions = #Dropdown.Options
                        local singleOptionHeight = 28 -- Height of one OptionBtn
                        local paddingHeightScroll = (DropdownPadding and (DropdownPadding.PaddingTop.Offset + DropdownPadding.PaddingBottom.Offset)) or 4

                        local scrollContentTargetHeight = 0
						if numOptions > 0 then
                            if numOptions > MaxElements then
							    scrollContentTargetHeight = (MaxElements * singleOptionHeight) + paddingHeightScroll
						    else
							    scrollContentTargetHeight = contentHeight -- Already includes padding
						    end
                        end
                        targetHeight = 38 + scrollContentTargetHeight
                        DropdownContainer.Size = UDim2.new(1,0,0,scrollContentTargetHeight) -- Set container actual size
					else
						targetHeight = 38
                        DropdownContainer.Size = UDim2.new(1,0,0,0) -- Collapse container size
					end
					TweenService:Create(DropdownFrame, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
				end)

				Dropdown:Refresh(Dropdown.Options, false) -- Initialize with current options (which are from DropdownConfig.Options)
				Dropdown:Set(Dropdown.Value) -- Set initial value

				if DropdownConfig.Flag then
					OrionLib.Flags[DropdownConfig.Flag] = Dropdown
				end
				return Dropdown
			end
			function ElementFunction:AddBind(BindConfig)
				BindConfig = BindConfig or {}
				BindConfig.Name = BindConfig.Name or "Bind"
				BindConfig.Default = BindConfig.Default or Enum.KeyCode.Unknown
				BindConfig.Hold = BindConfig.Hold or false
				BindConfig.Callback = BindConfig.Callback or function() end
				BindConfig.Flag = BindConfig.Flag
				BindConfig.Save = BindConfig.Save or false

				local Bind = {Value = (type(BindConfig.Default) == "EnumItem" and BindConfig.Default.Name) or tostring(BindConfig.Default), Binding = false, Type = "Bind", Save = BindConfig.Save}
				local Holding = false

				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local BindBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), { -- Color from theme
					Size = UDim2.new(0, 24, 0, 24), -- Initial, will resize
                    AutomaticSize = Enum.AutomaticSize.X, -- Allow X to grow
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					AddThemeObject(SetProps(MakeElement("Label", "", 14), {
						Size = UDim2.new(0,0,1,0), -- Auto X
                        AutomaticSize = Enum.AutomaticSize.X,
                        MinSize = UDim2.new(0,24,0,24), -- Min width for the box
						Font = Enum.Font.GothamBold,
						TextXAlignment = Enum.TextXAlignment.Center,
						Name = "Value",
                        Padding = UDim.new(0,8,0,8) -- Padding inside label for text
					}), "Text")
				}), "Main")
                -- BindBox.UIListLayout.Padding = UDim.new(0,8) -- Add padding to list layout if using it

				local BindFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", BindConfig.Name, 15), {
						Size = UDim2.new(1, -48, 1, 0), -- Adjust for bind box
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					BindBox,
					Click
				}), "Second")
                
                function Bind:Set(KeyName)
					Bind.Binding = false
					Bind.Value = (type(KeyName) == "EnumItem" and KeyName.Name) or tostring(KeyName) or "None"
					BindBox.Value.Text = Bind.Value
                    -- Size update handled by AutomaticSize + MinSize of Label + Padding of BindBox
				end

				AddConnection(Click.InputEnded, function(Input) -- Changed to InputEnded for better mobile tap-to-bind
					if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
						if Bind.Binding then return end -- Already binding
						Bind.Binding = true
						BindBox.Value.Text = "..."
                        -- No need to tween BindBox size, AutomaticSize handles it
					end
				end)

				AddConnection(UserInputService.InputBegan, function(InputObject)
					if UserInputService:GetFocusedTextBox() then return end

					local currentKeyName = InputObject.KeyCode ~= Enum.KeyCode.Unknown and InputObject.KeyCode.Name or InputObject.UserInputType.Name

					if currentKeyName == Bind.Value and not Bind.Binding then
						if BindConfig.Hold then
							Holding = true
							BindConfig.Callback(Holding)
						else
							BindConfig.Callback()
						end
					elseif Bind.Binding then
						local CapturedKeyName
						if not CheckKey(BlacklistedKeys, InputObject.KeyCode) and InputObject.KeyCode ~= Enum.KeyCode.Unknown then
							CapturedKeyName = InputObject.KeyCode.Name
						elseif CheckKey(WhitelistedMouse, InputObject.UserInputType) then
							CapturedKeyName = InputObject.UserInputType.Name
						end

						if CapturedKeyName then
							Bind:Set(CapturedKeyName)
							if OrionLib.SaveCfg and BindConfig.Save then SaveCfg(game.GameId) end
						else
							Bind:Set(Bind.Value) -- Revert to old value if invalid key
						end
						Bind.Binding = false -- Stop binding mode
					end
				end)

				AddConnection(UserInputService.InputEnded, function(InputObject)
					local endedKeyName = InputObject.KeyCode ~= Enum.KeyCode.Unknown and InputObject.KeyCode.Name or InputObject.UserInputType.Name
					if endedKeyName == Bind.Value then
						if BindConfig.Hold and Holding then
							Holding = false
							BindConfig.Callback(Holding)
						end
					end
				end)


				AddConnection(Click.MouseEnter, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseLeave, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)

				AddConnection(Click.MouseButton1Up, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(Click.MouseButton1Down, function()
					TweenService:Create(BindFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 6, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 6)}):Play()
				end)
				
				Bind:Set(BindConfig.Default) -- Initialize
				if BindConfig.Flag then
					OrionLib.Flags[BindConfig.Flag] = Bind
				end
				return Bind
			end
			function ElementFunction:AddTextbox(TextboxConfig)
				TextboxConfig = TextboxConfig or {}
				TextboxConfig.Name = TextboxConfig.Name or "Textbox"
				TextboxConfig.Default = TextboxConfig.Default or ""
				TextboxConfig.TextDisappear = TextboxConfig.TextDisappear or false -- Clear on focus lost and enter
				TextboxConfig.Callback = TextboxConfig.Callback or function() end
				TextboxConfig.Numeric = TextboxConfig.Numeric or false
                TextboxConfig.Placeholder = TextboxConfig.Placeholder or "Input"

				local TextboxActual = AddThemeObject(Create("TextBox", {
					Size = UDim2.new(1,0,1,0), -- Fill parent
                    BackgroundTransparency = 1,
					TextColor3 = Color3.fromRGB(255, 255, 255),
					PlaceholderColor3 = Color3.fromRGB(210,210,210),
					PlaceholderText = TextboxConfig.Placeholder,
					Font = Enum.Font.GothamSemibold,
					TextXAlignment = Enum.TextXAlignment.Center,
					TextSize = 14,
					ClearTextOnFocus = false -- Manual control
				}), "Text")

				local TextContainer = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 4), { -- Color from theme
					Size = UDim2.new(0, 24, 0, 24), -- Min size
                    AutomaticSize = Enum.AutomaticSize.X,
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
                    MakeElement("Padding",0,8,0,8), -- Padding for TextboxActual
					TextboxActual
				}), "Main")


				local TextboxFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 38),
					Parent = ItemParent
				}), {
					AddThemeObject(SetProps(MakeElement("Label", TextboxConfig.Name, 15), {
						Size = UDim2.new(1, -48, 1, 0), -- Adjust for text container
						Position = UDim2.new(0, 12, 0, 0),
						Font = Enum.Font.GothamBold,
						Name = "Content"
					}), "Text"),
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
					TextContainer
                    -- No separate click button, TextContainer itself will handle focus
				}), "Second")

				local previousText = TextboxConfig.Default or ""
                TextboxActual.Text = previousText

				if TextboxConfig.Numeric then
					TextboxActual.FocusLost:Connect(function(enterPressed)
						local text = TextboxActual.Text
						local num = tonumber(text)
						if num then
							TextboxConfig.Callback(num)
							previousText = text -- Update previousText only on valid numeric input
                            if TextboxConfig.TextDisappear and enterPressed then TextboxActual.Text = "" end
						else
							TextboxActual.Text = previousText -- Revert to last valid numeric or empty
						end
					end)

					TextboxActual:GetPropertyChangedSignal("Text"):Connect(function()
						local currentText = TextboxActual.Text
						if currentText ~= "" and currentText ~= "-" and currentText ~= "." and currentText ~= "-." then -- Allow intermediate valid chars
							if not string.match(currentText, "^%-?[0-9]*%.?[0-9]*$") then
                                -- Check one char back to allow deleting invalid char
                                local oneCharBack = string.sub(previousText, 1, math.max(0, #previousText -1))
                                if string.match(currentText, "^" .. string.gsub(oneCharBack, "[%(%)%.%+%-%*%?%[%]%^%$%%]", "%%%1") .. "%S?$") then
                                    -- Allow if it's one char different from a valid previous state (e.g. typing "12a" from "12")
                                    -- This part is tricky; for now, revert if not fully numeric-like
                                    TextboxActual.Text = string.match(currentText, "^%-?[0-9]*%.?[0-9]*") or previousText

                                else
								    TextboxActual.Text = previousText
                                end
							-- else previousText remains the same until FocusLost validates the number
							end
						end
					end)
				else
					AddConnection(TextboxActual.FocusLost, function(enterPressed)
						TextboxConfig.Callback(TextboxActual.Text)
						if TextboxConfig.TextDisappear and enterPressed then
							TextboxActual.Text = ""
						end
					end)
				end
                
                -- Allow clicking the whole frame to focus the textbox
                local FrameClick = SetProps(MakeElement("Button"), { Size = UDim2.fromScale(1,1), Parent = TextboxFrame})
                AddConnection(FrameClick.MouseButton1Click, function() TextboxActual:CaptureFocus() end)


				AddConnection(TextboxFrame.MouseEnter, function() -- MouseEnter on TextboxFrame
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(OrionLib.Themes[OrionLib.SelectedTheme].Second.R * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.G * 255 + 3, OrionLib.Themes[OrionLib.SelectedTheme].Second.B * 255 + 3)}):Play()
				end)

				AddConnection(TextboxFrame.MouseLeave, function()
					TweenService:Create(TextboxFrame, TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {BackgroundColor3 = OrionLib.Themes[OrionLib.SelectedTheme].Second}):Play()
				end)
			end
			function ElementFunction:AddColorpicker(ColorpickerConfig)
				ColorpickerConfig = ColorpickerConfig or {}
				ColorpickerConfig.Name = ColorpickerConfig.Name or "Colorpicker"
				ColorpickerConfig.Default = ColorpickerConfig.Default or Color3.fromRGB(255,255,255)
				ColorpickerConfig.Callback = ColorpickerConfig.Callback or function() end
				ColorpickerConfig.Flag = ColorpickerConfig.Flag
				ColorpickerConfig.Save = ColorpickerConfig.Save or false

				local ColorH, ColorS, ColorV = Color3.toHSV(ColorpickerConfig.Default)
				local Colorpicker = {Value = ColorpickerConfig.Default, Toggled = false, Type = "Colorpicker", Save = ColorpickerConfig.Save}

				local ColorSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(ColorS, 0, 1 - ColorV, 0),
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})

				local HueSelection = Create("ImageLabel", {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0.5, 0, ColorH, 0),
					ScaleType = Enum.ScaleType.Fit,
					AnchorPoint = Vector2.new(0.5, 0.5),
					BackgroundTransparency = 1,
					Image = "http://www.roblox.com/asset/?id=4805639000",
					ZIndex = 3
				})

				local ColorImage = Create("ImageLabel", {
					Name = "ColorImage",
					Size = UDim2.new(1, -25, 1, 0), -- Full width minus hue bar
					Image = "rbxassetid://4155801252", -- Saturation/Value gradient
					BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1), -- Base color for gradient
					ZIndex = 2
				}, {
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					ColorSelection
				})

				local HueImage = Create("Frame", {
					Name = "HueImage",
					Size = UDim2.new(0, 20, 1, 0), -- Hue bar width
					Position = UDim2.new(1, -20, 0, 0), -- Positioned to the right
					ZIndex = 2
				}, {
					Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)),ColorSequenceKeypoint.new(0.16,Color3.fromRGB(255,255,0)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.66, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
					Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
					HueSelection
				})

				local PickerContainer = Create("Frame", { -- Renamed from ColorpickerContainer to avoid confusion
					Position = UDim2.new(0, 0, 0, 38), -- Below header
					Size = UDim2.new(1, 0, 0, 110), -- Height for picker elements (148 total - 38 header)
					BackgroundTransparency = 1,
					ClipsDescendants = true,
					Visible = false, -- Initially hidden
					ZIndex = 1 -- Below header
				}, {
                    MakeElement("Padding", 10,10,10,10), -- Padding for ColorImage and HueImage within this container
					ColorImage, -- Add ColorImage first so HueImage can be positioned relative to remaining space or absolutely
					HueImage,
				})


				local Click = SetProps(MakeElement("Button"), {
					Size = UDim2.new(1, 0, 1, 0)
				})

				local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", ColorpickerConfig.Default, 0, 4), {
					Size = UDim2.new(0, 24, 0, 24),
					Position = UDim2.new(1, -12, 0.5, 0),
					AnchorPoint = Vector2.new(1, 0.5)
				}), {
					AddThemeObject(MakeElement("Stroke"), "Stroke")
				}), "Main")
				ColorpickerBox.BackgroundColor3 = ColorpickerConfig.Default -- Ensure initial color

				local ColorpickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", nil, 0, 5), { -- Color from theme
					Size = UDim2.new(1, 0, 0, 38), -- Initial height for header
					Parent = ItemParent,
					ClipsDescendants = true
				}), {
					SetProps(SetChildren(MakeElement("TFrame"), { -- Header Frame
						AddThemeObject(SetProps(MakeElement("Label", ColorpickerConfig.Name, 15), {
							Size = UDim2.new(1, -48, 1, 0), -- Space for color box
							Position = UDim2.new(0, 12, 0, 0),
							Font = Enum.Font.GothamBold,
							Name = "Content"
						}), "Text"),
						ColorpickerBox,
						Click,
						AddThemeObject(SetProps(MakeElement("Frame"), { -- Line Separator
							Size = UDim2.new(1, 0, 0, 1),
							Position = UDim2.new(0, 0, 1, -1),
							Name = "Line",
							Visible = false -- Toggled with picker
						}), "Stroke"),
					}), {
						Size = UDim2.new(1, 0, 0, 38), -- Header size
						ClipsDescendants = true,
						Name = "F" -- Header Frame Name
					}),
					PickerContainer, -- Add picker elements container
					AddThemeObject(MakeElement("Stroke"), "Stroke"),
				}), "Second")

				AddConnection(Click.MouseButton1Click, function()
					Colorpicker.Toggled = not Colorpicker.Toggled
					TweenService:Create(ColorpickerFrame,TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = Colorpicker.Toggled and UDim2.new(1, 0, 0, 148) or UDim2.new(1, 0, 0, 38)}):Play()
					PickerContainer.Visible = Colorpicker.Toggled
					ColorpickerFrame.F.Line.Visible = Colorpicker.Toggled
				end)

				local ColorInputConn, HueInputConn

				local function UpdateColorPickerVisuals()
					local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
					ColorpickerBox.BackgroundColor3 = newColor
					ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) -- Full saturation/value for base hue
					Colorpicker:Set(newColor, true) -- Pass true to avoid re-calling callback during drag
				end

				local function HandleColorInput(inputObject)
					if ColorInputConn then ColorInputConn:Disconnect(); ColorInputConn = nil end -- Disconnect previous if any
					ColorInputConn = AddConnection(RunService.RenderStepped, function()
                        if not ColorImage or not ColorImage.Parent then if ColorInputConn then ColorInputConn:Disconnect() end return end
						local interactionPos = UserInputService:GetMouseLocation() -- Use GetMouseLocation for RenderStepped
                        if inputObject.UserInputType == Enum.UserInputType.Touch then interactionPos = inputObject.Position end

						local ColorX = math.clamp((interactionPos.X - ColorImage.AbsolutePosition.X) / ColorImage.AbsoluteSize.X, 0, 1)
						local ColorY = math.clamp((interactionPos.Y - ColorImage.AbsolutePosition.Y) / ColorImage.AbsoluteSize.Y, 0, 1)
						ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
						ColorS = ColorX
						ColorV = 1 - ColorY
						UpdateColorPickerVisuals()
					end)
				end

                local function HandleHueInput(inputObject)
                    if HueInputConn then HueInputConn:Disconnect(); HueInputConn = nil end
                    HueInputConn = AddConnection(RunService.RenderStepped, function()
                        if not HueImage or not HueImage.Parent then if HueInputConn then HueInputConn:Disconnect() end return end
                        local interactionPos = UserInputService:GetMouseLocation()
                        if inputObject.UserInputType == Enum.UserInputType.Touch then interactionPos = inputObject.Position end

                        local HueY = math.clamp((interactionPos.Y - HueImage.AbsolutePosition.Y) / HueImage.AbsoluteSize.Y, 0, 1)
                        HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
                        ColorH = HueY
                        UpdateColorPickerVisuals()
                    end)
                end

				AddConnection(ColorImage.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						HandleColorInput(input)
                        -- Initial update on began
                        local interactionPos = input.Position
						local ColorX = math.clamp((interactionPos.X - ColorImage.AbsolutePosition.X) / ColorImage.AbsoluteSize.X, 0, 1)
						local ColorY = math.clamp((interactionPos.Y - ColorImage.AbsolutePosition.Y) / ColorImage.AbsoluteSize.Y, 0, 1)
						ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
						ColorS = ColorX; ColorV = 1 - ColorY
						UpdateColorPickerVisuals()
					end
				end)
                AddConnection(HueImage.InputBegan, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        HandleHueInput(input)
                        -- Initial update on began
                        local interactionPos = input.Position
                        local HueY = math.clamp((interactionPos.Y - HueImage.AbsolutePosition.Y) / HueImage.AbsoluteSize.Y, 0, 1)
						HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
						ColorH = HueY
						UpdateColorPickerVisuals()
					end
				end)

				AddConnection(UserInputService.InputEnded, function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
						if ColorInputConn then ColorInputConn:Disconnect(); ColorInputConn = nil end
						if HueInputConn then HueInputConn:Disconnect(); HueInputConn = nil end
                        -- Final callback call with the chosen color
                        ColorpickerConfig.Callback(Colorpicker.Value)
                        if OrionLib.SaveCfg and ColorpickerConfig.Save then SaveCfg(game.GameId) end
					end
				end)


				function Colorpicker:Set(Value, fromDrag)
					Colorpicker.Value = Value
					local h,s,v = Color3.toHSV(Value)
					ColorH, ColorS, ColorV = h,s,v -- Update internal HSV
					ColorpickerBox.BackgroundColor3 = Value
					if ColorImage and ColorImage.Parent then ColorImage.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1) end
					if ColorSelection and ColorSelection.Parent then ColorSelection.Position = UDim2.new(ColorS,0,1-ColorV,0) end
					if HueSelection and HueSelection.Parent then HueSelection.Position = UDim2.new(0.5,0,ColorH,0) end
					
                    if not fromDrag then -- Only call primary callback if not from internal drag update
					    ColorpickerConfig.Callback(Value)
                    end
				end

				Colorpicker:Set(ColorpickerConfig.Default) -- Initialize
				if ColorpickerConfig.Flag then
					OrionLib.Flags[ColorpickerConfig.Flag] = Colorpicker
				end
				return Colorpicker
			end
			return ElementFunction
		end

		local ElementFunction = {}

		function ElementFunction:AddSection(SectionConfig)
			SectionConfig = SectionConfig or {}
			SectionConfig.Name = SectionConfig.Name or "Section"

			local SectionFrame = SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 0, 0), -- Start with 0 height, autosize will manage
                AutomaticSize = Enum.AutomaticSize.Y,
				Parent = Container
			}), {
				AddThemeObject(SetProps(MakeElement("Label", SectionConfig.Name, 14), {
					Size = UDim2.new(1, 0, 0, 16), -- Fixed height for section name
					Position = UDim2.new(0, 0, 0, 3),
					Font = Enum.Font.GothamSemibold
				}), "TextDark"),
				SetChildren(SetProps(MakeElement("TFrame"), {
					AnchorPoint = Vector2.new(0, 0),
					Size = UDim2.new(1, 0, 0, 0), -- Start with 0 height for holder too
                    AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0, 0, 0, 23), -- Position below section name label
					Name = "Holder"
				}), {
					MakeElement("List", 0, 6) -- Padding between items in section
				}),
                MakeElement("Padding", 0,0,5,0) -- Bottom padding for the section frame itself
			})
            -- AutomaticSize Y on SectionFrame and Holder + UIListLayout should handle sizing.

			local SectionFunction = {}
			for i, v in pairs(GetElements(SectionFrame.Holder)) do
				SectionFunction[i] = v
			end
			return SectionFunction
		end

		for i, v in pairs(GetElements(Container)) do
			ElementFunction[i] = v
		end

		if TabConfig.PremiumOnly and WindowConfig.HidePremium then -- And HidePremium is true
			for i, v in pairs(ElementFunction) do
				ElementFunction[i] = function() end -- Nop functions
			end
			if Container:FindFirstChild("UIListLayout") then Container:FindFirstChild("UIListLayout"):Destroy() end
			if Container:FindFirstChild("UIPadding") then Container:FindFirstChild("UIPadding"):Destroy() end

			SetChildren(SetProps(MakeElement("TFrame"), {
				Size = UDim2.new(1, 0, 1, 0),
				Parent = Container
			}), {
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://3610239960"), {
					Size = UDim2.new(0, 18, 0, 18),
					Position = UDim2.new(0, 15, 0, 15),
					ImageTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Unauthorised Access", 14), {
					Size = UDim2.new(1, -38, 0, 14),
					Position = UDim2.new(0, 38, 0, 18),
					TextTransparency = 0.4
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Image", "rbxassetid://4483345875"), {
					Size = UDim2.new(0, 56, 0, 56),
					Position = UDim2.new(0, 84, 0, 110), -- Adjust positioning as needed
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "Premium Features", 14), {
					Size = UDim2.new(1, -150, 0, 14),
					Position = UDim2.new(0, 150, 0, 112),
					Font = Enum.Font.GothamBold
				}), "Text"),
				AddThemeObject(SetProps(MakeElement("Label", "This part of the script is locked. Purchase Premium in the Discord server (discord.gg/sirius)", 12), {
					Size = UDim2.new(1, -160, 0, 0), -- Allow auto height
                    AutomaticSize = Enum.AutomaticSize.Y,
					Position = UDim2.new(0, 150, 0, 138),
					TextWrapped = true,
					TextTransparency = 0.4
				}), "Text")
			})
		end
		return ElementFunction
	end

	return TabFunction
end

function OrionLib:Destroy()
    for _, Connection in pairs(OrionLib.Connections) do
		if Connection and type(Connection.Disconnect) == "function" then
			Connection:Disconnect()
		end
	end
	OrionLib.Connections = {}
	if Orion and Orion.Parent then
		Orion:Destroy()
	end
    -- Clear other tables if necessary to break references
    OrionLib.Elements = {}
    OrionLib.ThemeObjects = {}
    OrionLib.Flags = {}
end

return OrionLib
